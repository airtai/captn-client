{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Capt\u2019n python client","text":""},{"location":"#docs","title":"Docs","text":"<p>For full documentation, Please follow the below link:</p> <ul> <li>https://docs.captn.ai/</li> </ul>"},{"location":"#how-to-install","title":"How to install","text":"<p>If you don\u2019t have the captn library already installed, please install it using pip.</p> <pre><code>pip install captn-client\n</code></pre>"},{"location":"#how-to-use","title":"How to use","text":"<p>To access the captn service, you must first create a developer account. Please fill out the signup form below to get one:</p> <ul> <li>https://bit.ly/3I4cNuv</li> </ul> <p>After successful verification, you will receive an email with the username and password for the developer account.</p> <p>Once you have the credentials, use them to get an access token by calling <code>Client.get_token</code> method. It is necessary to get an access token; otherwise, you won\u2019t be able to access all of the captn service\u2019s APIs. You can either pass the username, password, and server address as parameters to the <code>Client.get_token</code> method or store them in the environment variables CAPTN_SERVICE_USERNAME, CAPTN_SERVICE_PASSWORD, and CAPTN_SERVER_URL.</p> <p>In addition to the regular authentication with credentials, you can also enable multi-factor authentication (MFA) and single sign-on (SSO) for generating tokens.</p> <p>To help protect your account, we recommend that you enable multi-factor authentication (MFA). MFA provides additional security by requiring you to provide unique verification code (OTP) in addition to your regular sign-in credentials when performing critical operations.</p> <p>Your account can be configured for MFA in just two easy steps:</p> <ol> <li> <p>To begin, you need to enable MFA for your account by calling the     <code>User.enable_mfa</code> method, which will generate a QR code. You can     then scan the QR code with an authenticator app, such as Google     Authenticator and follow the on-device instructions to finish the     setup in your smartphone.</p> </li> <li> <p>Finally, activate MFA for your account by calling     <code>User.activate_mfa</code> and passing the dynamically generated six-digit     verification code from your smartphone\u2019s authenticator app.</p> </li> </ol> <p>You can also disable MFA for your account at any time by calling the method <code>User.disable_mfa</code> method.</p> <p>Single sign-on (SSO) can be enabled for your account in three simple steps:</p> <ol> <li> <p>Enable the SSO for a provider by calling the <code>User.enable_sso</code>     method with the SSO provider name and an email address. At the     moment, we only support \u201cgoogle\u201d and \u201cgithub\u201d as SSO providers. We     intend to support additional SSO providers in future releases.</p> </li> <li> <p>Before you can start generating new tokens with SSO, you must first     authenticate with the SSO provider. Call the <code>Client.get_token</code> with     the same SSO provider you have enabled in the step above to generate     an SSO authorization URL. Please copy and paste it into your     preferred browser and complete the authentication process with the     SSO provider.</p> </li> <li> <p>After successfully authenticating with the SSO provider, call the     <code>Client.set_sso_token</code> method to generate a new token and use it     automatically in all future interactions with the captn server.</p> </li> </ol> <p>For more information, please check:</p> <ul> <li> <p>Tutorial with more elaborate   example, and</p> </li> <li> <p>API with reference   documentation.</p> </li> </ul> <p>Here\u2019s a minimal example showing how to use captn services to train a model and make predictions.</p> <p>In the below example, the username, password, and server address are stored in CAPTN_SERVICE_USERNAME, CAPTN_SERVICE_PASSWORD, and CAPTN_SERVER_URL environment variables.</p>"},{"location":"#0-get-token","title":"0. Get token","text":"<pre><code># Importing necessary libraries\nfrom captn.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token()\n</code></pre>"},{"location":"#1-connect-and-preprocess-data","title":"1. Connect and preprocess data","text":"<p>In our example, we will be using the captn APIs to load and preprocess a sample CSV file stored in an AWS S3 bucket.</p> <pre><code># Before you can use the data to train a model, it must be uploaded to the\n# captn server. Run the following command to upload the data to the\n# captn server for further processing.\ndata_blob = DataBlob.from_s3(uri=\"s3://test-airt-service/sample_gaming_130k\")\n\n# Display the upload progress\ndata_blob.progress_bar()\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:35&lt;00:00, 35.44s/it]\n</code></pre> <p>The sample data we used in this example doesn\u2019t have the header rows and their data types defined.</p> <p>The following code creates the necessary headers along with their data types and reads only a subset of columns that are required for modeling:</p> <pre><code># Add header rows\nprefix = [\"revenue\", \"ad_revenue\", \"conversion\", \"retention\"]\ndays = list(range(30)) + list(range(30, 361, 30))\ndtype = {\n    \"date\": \"str\",\n    \"game_name\": \"str\",\n    \"platform\": \"str\",\n    \"user_type\": \"str\",\n    \"network\": \"str\",\n    \"campaign\": \"str\",\n    \"adgroup\": \"str\",\n    \"installs\": \"int32\",\n    \"spend\": \"float32\",\n}\ndtype.update({f\"{p}_{d}\": \"float32\" for p in prefix for d in days})\nnames = list(dtype.keys())\n\nkwargs = {\n    \"delimiter\": \"|\",\n    \"names\": names,\n    \"parse_dates\": [\"date\"],\n    \"usecols\": names[:42],\n    \"dtype\": dtype,\n}\n</code></pre> <p>Finally, the above variables are passed to the <code>DataBlob.to_datasource</code> method which preprocesses the data and stores it in captn server.</p> <pre><code># Preprocess and prepare the data for training\ndata_source = data_blob.to_datasource(\n    file_type=\"csv\", index_column=\"game_name\", sort_by=\"date\", **kwargs\n)\n\n# Display the data preprocessing progress\ndata_source.progress_bar()\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:55&lt;00:00, 55.66s/it]\n</code></pre> <pre><code># When the preprocessing is finished, you can run the following command to\n# display the head of the data to ensure everything is fine.\nprint(data_source.head())\n</code></pre> <pre><code>                  date platform          user_type            network  \\\ngame_name                                                               \ngame_name_0 2021-03-15      ios      jetfuelit_int      jetfuelit_int   \ngame_name_0 2021-03-15      ios      jetfuelit_int      jetfuelit_int   \ngame_name_0 2021-03-15      ios      jetfuelit_int      jetfuelit_int   \ngame_name_0 2021-03-15      ios      jetfuelit_int      jetfuelit_int   \ngame_name_0 2021-03-15      ios      jetfuelit_int      jetfuelit_int   \ngame_name_0 2021-03-15  android  googleadwords_int  googleadwords_int   \ngame_name_0 2021-03-15  android  googleadwords_int  googleadwords_int   \ngame_name_0 2021-03-15  android         moloco_int         moloco_int   \ngame_name_0 2021-03-15  android      jetfuelit_int      jetfuelit_int   \ngame_name_0 2021-03-15  android      jetfuelit_int      jetfuelit_int\n\n                 campaign       adgroup  installs       spend  revenue_0  \\\ngame_name                                                                  \ngame_name_0    campaign_0   adgroup_541         1    0.600000   0.000000   \ngame_name_0    campaign_0  adgroup_2351         2    4.900000   0.000000   \ngame_name_0    campaign_0   adgroup_636         3    7.350000   0.000000   \ngame_name_0    campaign_0   adgroup_569         1    0.750000   0.000000   \ngame_name_0    campaign_0   adgroup_243         2    3.440000   0.000000   \ngame_name_0  campaign_283  adgroup_1685        11    0.000000   0.000000   \ngame_name_0    campaign_2    adgroup_56        32   30.090000   0.000000   \ngame_name_0  campaign_191          None       291  503.480011  34.701553   \ngame_name_0    campaign_0   adgroup_190         4    2.740000   0.000000   \ngame_name_0    campaign_0   adgroup_755         8   11.300000  13.976003\n\n             revenue_1  ...  revenue_23  revenue_24  revenue_25  revenue_26  \\\ngame_name               ...                                                   \ngame_name_0   0.018173  ...    0.018173    0.018173    0.018173    0.018173   \ngame_name_0   0.034000  ...    0.034000    6.034000    6.034000    6.034000   \ngame_name_0   0.000000  ...   12.112897   12.112897   12.112897   12.112897   \ngame_name_0   0.029673  ...    0.029673    0.029673    0.029673    0.029673   \ngame_name_0   0.027981  ...    0.042155    0.042155    0.042155    0.042155   \ngame_name_0   0.097342  ...    0.139581    0.139581    0.139581    0.139581   \ngame_name_0   0.802349  ...    2.548253    2.548253    2.771138    2.805776   \ngame_name_0  63.618111  ...  116.508331  117.334709  117.387489  117.509506   \ngame_name_0   0.000000  ...    0.000000    0.000000    0.000000    0.000000   \ngame_name_0  14.358793  ...   14.338905   14.338905   14.338905   14.338905\n\n             revenue_27  revenue_28  revenue_29  revenue_30  revenue_60  \\\ngame_name                                                                 \ngame_name_0    0.018173    0.018173    0.018173    0.018173    0.018173   \ngame_name_0    6.034000    6.034000    6.034000    6.034000    6.034000   \ngame_name_0   12.112897   12.112897   12.112897   12.112897   12.112897   \ngame_name_0    0.029673    0.029673    0.029673    0.029673    0.029673   \ngame_name_0    0.042155    0.042155    0.042155    0.042155    0.042155   \ngame_name_0    0.139581    0.139581    0.139581    0.139581    0.139581   \ngame_name_0    2.805776    2.805776    2.805776    2.805776    2.805776   \ngame_name_0  118.811417  118.760765  119.151291  119.350220  139.069443   \ngame_name_0    0.000000    0.000000    0.000000    0.000000    0.000000   \ngame_name_0   14.338905   14.338905   14.338905   14.338905   14.338905\n\n             revenue_90  \ngame_name                \ngame_name_0    0.018173  \ngame_name_0   13.030497  \ngame_name_0   12.112897  \ngame_name_0    0.029673  \ngame_name_0    0.042155  \ngame_name_0    0.139581  \ngame_name_0    2.805776  \ngame_name_0  147.528793  \ngame_name_0    0.000000  \ngame_name_0   14.338905\n\n[10 rows x 41 columns]\n</code></pre>"},{"location":"#2-training","title":"2. Training","text":"<pre><code># Todo\n</code></pre>"},{"location":"ActivateTestingEnvironment/","title":"Activate Testing Environment","text":"<p>source</p>"},{"location":"ActivateTestingEnvironment/#activated","title":"activated","text":"<pre><code> activated ()\n</code></pre>"},{"location":"CHANGELOG/","title":"Release notes","text":""},{"location":"CHANGELOG/#202330","title":"2023.3.0","text":""},{"location":"CHANGELOG/#new-features","title":"New Features","text":"<ul> <li>Add broken link checker ci action file (#22), thanks to @harishmohanraj</li> <li> <p>Closes #21</p> </li> <li> <p>Add broken link checker CI action file (#21)</p> </li> </ul>"},{"location":"CHANGELOG/#bugs-squashed","title":"Bugs Squashed","text":"<ul> <li>fix table in the captn client docs (Tutorial) (#14)</li> </ul>"},{"location":"CHANGELOG/#202320","title":"2023.2.0","text":""},{"location":"CHANGELOG/#202310","title":"2023.1.0","text":""},{"location":"CHANGELOG/#2022120","title":"2022.12.0","text":""},{"location":"CLI/","title":"CLI","text":"<pre><code>from captn._testing import activate_by_import\n</code></pre> <pre><code>from airt._sanitizer import sanitized_print\nfrom typer.testing import CliRunner\n</code></pre> <pre><code>runner = CliRunner()\n</code></pre> <pre><code>result = runner.invoke(app, [] + [\"--help\"])\n\nsanitized_print(str(result.stdout))\n\ntoken_help_txt = \"Get application token for captn service from a username/password\"\nversion_help_txt = \"Return the server and client versions.\"\ndb_help_txt = \"A set of commands for importing and processing\"\nds_help_txt = \"A set of commands for managing datasources\"\n\nfor msg in [version_help_txt, token_help_txt, db_help_txt, ds_help_txt]:\n    assert msg in str(result.stdout), f\"{msg=} not in {str(result.stdout)}\"\n</code></pre> <pre><code>Usage: root [OPTIONS] COMMAND [ARGS]...\n\n  CLI for interfacing with Capt\u2019n.\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or\n                        customize the installation.\n  --help                Show this message and exit.\n\nCommands:\n  api-key  A set of commands for managing the ApiKeys in the server.\n  db       A set of commands for importing and processing data from sources...\n  ds       A set of commands for managing datasources and training ML...\n  token    Get application token for captn service from a username/password...\n  user     A set of commands for managing users and their authentication in...\n  version  Return the server and client versions.\n</code></pre>"},{"location":"CLI_ApiKey/","title":"CLI_APIKey","text":"<pre><code>from captn._testing import activate_by_import\n</code></pre> <pre><code>from airt._sanitizer import sanitized_print\nfrom typer.testing import CliRunner\n</code></pre> <pre><code>runner = CliRunner()\n\nfor c in app.registered_commands:\n    name = c.callback.__name__.replace(\"_\", \"-\")\n    result = runner.invoke(app, [name] + [\"--help\"])\n\n    sanitized_print(str(result.stdout))\n\n    assert \"AIRT_\" not in str(result.stdout)\n    assert \"airt\" not in str(result.stdout)\n</code></pre> <pre><code>Usage: root create [OPTIONS] NAME\n\n  Create a new ApiKey\n\n  !!! note\n\n      - The name of the ApiKey must be unique. If not, an exception will be\n      raised while creating a new key with an existing key's name.\n\n      - The expiry for an ApiKey is optional. If not passed, then the default\n      value None will be used to create an ApiKey with no expiry date!\n\nArguments:\n  NAME  The name of the ApiKey.  [required]\n\nOptions:\n  -e, --expiry INTEGER  The validity of the API key in number of days. If not\n                        passed, then the default value None will be used to\n                        create an ApiKey with no expiry date!\n  --otp TEXT            Dynamically generated six-digit verification code from\n                        the authenticator app. Please pass this optional\n                        argument only if the MFA is enabled for your account.\n  -q, --quiet           Output access token only.\n  -d, --debug           Set logger level to DEBUG and output everything.\n  --help                Show this message and exit.\n\nUsage: root ls [OPTIONS]\n\n  Get the list of ApiKeys.\n\nOptions:\n  -u, --user TEXT       user_uuid/username associated with the ApiKey. To get\n                        the user account uuid/username, use the `captn user\n                        details` command. If the user_uuid/username is not\n                        passed, then the currently logged-in user_uuid/username\n                        will be used.\n  -o, --offset INTEGER  The number of ApiKeys to offset at the beginning. If\n                        None, then the default value 0 will be used.  [default:\n                        0]\n  -l, --limit INTEGER   The maximum number of ApiKeys to return from the server.\n                        If None, then the default value 100 will be used.\n                        [default: 100]\n  --disabled            If set to **True**, then the disabled ApiKeys will also\n                        be included in the result.\n  -f, --format TEXT     Format output and show only the given column(s) values.\n  -q, --quiet           Output only ApiKey uuids.\n  -d, --debug           Set logger level to DEBUG and output everything.\n  --help                Show this message and exit.\n\nUsage: root details [OPTIONS] APIKEY\n\n  Get the details of an ApiKey.\n\nArguments:\n  APIKEY  ApiKey uuid/name.  [required]\n\nOptions:\n  -f, --format TEXT  Format output and show only the given column(s) values.\n  -d, --debug        Set logger level to DEBUG and output everything.\n  --help             Show this message and exit.\n\nUsage: root revoke [OPTIONS] KEYS...\n\n  Revoke one or more ApiKeys\n\nArguments:\n  KEYS...  ApiKey uuid/name to revoke. To revoke multiple keys, please pass the\n           uuids/names separated by space.  [required]\n\nOptions:\n  --user TEXT        user_uuid/username associated with the ApiKey. To get the\n                     user account uuid/username, use the `captn user details`\n                     command. If the user_uuid/username is not passed, then the\n                     currently logged-in user_uuid/username will be used.\n  --otp TEXT         Dynamically generated six-digit verification code from the\n                     authenticator app. Please pass this optional argument only\n                     if the MFA is enabled for your account.\n  -f, --format TEXT  Format output and show only the given column(s) values.\n  -q, --quiet        Output only the revoked ApiKey uuid(s).\n  -d, --debug        Set logger level to DEBUG and output everything.\n  --help             Show this message and exit.\n</code></pre>"},{"location":"CLI_DataBlob/","title":"CLI_DataBlob","text":"<pre><code>from captn._testing import activate_by_import\n</code></pre> <pre><code>from airt._sanitizer import sanitized_print\nfrom typer.testing import CliRunner\n</code></pre> <pre><code>runner = CliRunner()\n\nfor c in app.registered_commands:\n    name = c.callback.__name__.replace(\"_\", \"-\")\n    result = runner.invoke(app, [name] + [\"--help\"])\n\n    sanitized_print(str(result.stdout))\n\n    assert \"AIRT_\" not in str(result.stdout)\n    assert \"airt\" not in str(result.stdout)\n</code></pre> <pre><code>Usage: root details [OPTIONS] UUID\n\n  Return details of a datablob.\n\nArguments:\n  UUID  Datablob uuid.  [required]\n\nOptions:\n  -f, --format TEXT  Format output and show only the given column(s) values.\n  -d, --debug        Set logger level to DEBUG and output everything.\n  --help             Show this message and exit.\n\nUsage: root from-s3 [OPTIONS] URI\n\n  Create and return a datablob that encapsulates the data from an AWS S3 bucket.\n\nArguments:\n  URI  The AWS S3 bucket uri.  [required]\n\nOptions:\n  --access-key TEXT           Access key for the S3 bucket. If **None** (default\n                              value), then the value from **AWS_ACCESS_KEY_ID**\n                              environment variable is used.\n  --secret-key TEXT           Secret key for the S3 bucket. If **None** (default\n                              value), then the value from\n                              **AWS_SECRET_ACCESS_KEY** environment variable is\n                              used.\n  -cp, --cloud-provider TEXT  The destination cloud storage provider's name to\n                              store the datablob. Currently, the API only\n                              supports **aws** and **azure** as cloud storage\n                              providers. If **None** (default value), then\n                              **aws**  will be used as the cloud storage\n                              provider.\n  -r, --region TEXT           The destination cloud provider's region to save\n                              your datablob. If **None** (default value) then\n                              the default region will be assigned based on the\n                              cloud provider. In the case of **aws**, the\n                              datablob's source bucket region will be used and\n                              in the case of **azure**, **westeurope** will be\n                              used. The supported AWS regions are: ap-\n                              northeast-1, ap-northeast-2, ap-south-1, ap-\n                              southeast-1, ap-southeast-2, ca-central-1, eu-\n                              central-1, eu-north-1, eu-west-1, eu-west-2, eu-\n                              west-3, sa-east-1, us-east-1, us-east-2, us-\n                              west-1, us-west-2. The supported Azure Blob\n                              Storage regions are: australiacentral,\n                              australiacentral2, australiaeast,\n                              australiasoutheast, brazilsouth, canadacentral,\n                              canadaeast, centralindia, centralus, eastasia,\n                              eastus, eastus2, francecentral, francesouth,\n                              germanynorth, germanywestcentral, japaneast,\n                              japanwest, koreacentral, koreasouth,\n                              northcentralus, northeurope, norwayeast,\n                              norwaywest, southafricanorth, southafricawest,\n                              southcentralus, southeastasia, southindia,\n                              switzerlandnorth, switzerlandwest, uaecentral,\n                              uaenorth, uksouth, ukwest, westcentralus,\n                              westeurope, westindia, westus, westus2.\n  -t, --tag TEXT              A string to tag the datablob. If not passed, then\n                              the tag **latest** will be assigned to the\n                              datablob.\n  -q, --quiet                 Output datablob uuid only.\n  -d, --debug                 Set logger level to DEBUG and output everything.\n  --help                      Show this message and exit.\n\nUsage: root from-azure-blob-storage [OPTIONS] URI\n\n  Create and return a datablob that encapsulates the data from an Azure Blob\n  Storage.\n\nArguments:\n  URI  Azure Blob Storage URI of the source file.  [required]\n\nOptions:\n  -c, --credential TEXT       Credential to access the Azure Blob Storage.\n                              [required]\n  -cp, --cloud-provider TEXT  The destination cloud storage provider's name to\n                              store the datablob. Currently, the API only\n                              supports **aws** and **azure** as cloud storage\n                              providers. If **None** (default value), then\n                              **azure**  will be used as the cloud storage\n                              provider.\n  -r, --region TEXT           The destination cloud provider's region to save\n                              your datablob. If **None** (default value) then\n                              the default region will be assigned based on the\n                              cloud provider. In the case of **aws**, **eu-\n                              west-1** will be used and in the case of\n                              **azure**, **westeurope** will be used. The\n                              supported AWS regions are: ap-northeast-1, ap-\n                              northeast-2, ap-south-1, ap-southeast-1, ap-\n                              southeast-2, ca-central-1, eu-central-1, eu-\n                              north-1, eu-west-1, eu-west-2, eu-west-3, sa-\n                              east-1, us-east-1, us-east-2, us-west-1, us-\n                              west-2. The supported Azure Blob Storage regions\n                              are: australiacentral, australiacentral2,\n                              australiaeast, australiasoutheast, brazilsouth,\n                              canadacentral, canadaeast, centralindia,\n                              centralus, eastasia, eastus, eastus2,\n                              francecentral, francesouth, germanynorth,\n                              germanywestcentral, japaneast, japanwest,\n                              koreacentral, koreasouth, northcentralus,\n                              northeurope, norwayeast, norwaywest,\n                              southafricanorth, southafricawest, southcentralus,\n                              southeastasia, southindia, switzerlandnorth,\n                              switzerlandwest, uaecentral, uaenorth, uksouth,\n                              ukwest, westcentralus, westeurope, westindia,\n                              westus, westus2.\n  -t, --tag TEXT              A string to tag the datablob. If not passed, then\n                              the tag **latest** will be assigned to the\n                              datablob.\n  -q, --quiet                 Output datablob uuid only.\n  -d, --debug                 Set logger level to DEBUG and output everything.\n  --help                      Show this message and exit.\n\nUsage: root from-mysql [OPTIONS]\n\n  Create and return a datablob that encapsulates the data from a mysql database.\n\n  If the database requires authentication, pass the username/password as\n  commandline arguments or store it in the **CAPTN_CLIENT_DB_USERNAME** and\n  **CAPTN_CLIENT_DB_PASSWORD** environment variables.\n\nOptions:\n  --host TEXT                 Remote database host name.  [required]\n  --database TEXT             Database name.  [required]\n  --table TEXT                Table name.  [required]\n  --port INTEGER              Host port number. If not passed, then the default\n                              value **3306** will be used.  [default: 3306]\n  -cp, --cloud-provider TEXT  The destination cloud storage provider's name to\n                              store the datablob. Currently, the API only\n                              supports **aws** and **azure** as cloud storage\n                              providers. If **None** (default value), then\n                              **aws**  will be used as the cloud storage\n                              provider.\n  -r, --region TEXT           The destination cloud provider's region to save\n                              your datablob. If **None** (default value) then\n                              the default region will be assigned based on the\n                              cloud provider. In the case of **aws**, **eu-\n                              west-1** will be used and in the case of\n                              **azure**, **westeurope** will be used. The\n                              supported AWS regions are: ap-northeast-1, ap-\n                              northeast-2, ap-south-1, ap-southeast-1, ap-\n                              southeast-2, ca-central-1, eu-central-1, eu-\n                              north-1, eu-west-1, eu-west-2, eu-west-3, sa-\n                              east-1, us-east-1, us-east-2, us-west-1, us-\n                              west-2. The supported Azure Blob Storage regions\n                              are: australiacentral, australiacentral2,\n                              australiaeast, australiasoutheast, brazilsouth,\n                              canadacentral, canadaeast, centralindia,\n                              centralus, eastasia, eastus, eastus2,\n                              francecentral, francesouth, germanynorth,\n                              germanywestcentral, japaneast, japanwest,\n                              koreacentral, koreasouth, northcentralus,\n                              northeurope, norwayeast, norwaywest,\n                              southafricanorth, southafricawest, southcentralus,\n                              southeastasia, southindia, switzerlandnorth,\n                              switzerlandwest, uaecentral, uaenorth, uksouth,\n                              ukwest, westcentralus, westeurope, westindia,\n                              westus, westus2.\n  -u, --username TEXT         Database username. If not passed, the default\n                              value \"root\" will be used unless the value is\n                              explicitly set in the environment variable\n                              **CAPTN_CLIENT_DB_USERNAME**.\n  -p, --password TEXT         Database password. If not passed, the default\n                              value \"\" will be used unless the value is\n                              explicitly set in the environment variable\n                              **CAPTN_CLIENT_DB_PASSWORD**.\n  -t, --tag TEXT              A string to tag the datablob. If not passed, then\n                              the tag **latest** will be assigned to the\n                              datablob.\n  -q, --quiet                 Output datablob uuid only.\n  -d, --debug                 Set logger level to DEBUG and output everything.\n  --help                      Show this message and exit.\n\nUsage: root to-datasource [OPTIONS]\n\n  Process the datablob and return a datasource object.\n\nOptions:\n  --uuid TEXT                     Datablob uuid.  [required]\n  --file-type TEXT                The file type of the datablob. Currently, the\n                                  API only supports \"csv\" and \"parquet\" as file\n                                  types.  [required]\n  --index-column TEXT             The column to use as index (row labels).\n                                  [required]\n  --sort-by TEXT                  The column(s) to sort the data. Can either be\n                                  a string or a JSON encoded list of strings.\n                                  [required]\n  --deduplicate-data / --no-deduplicate-data\n                                  If set to **True** (default value **False**),\n                                  the datasource will be created with duplicate\n                                  rows removed.  [default: no-deduplicate-data]\n  --blocksize TEXT                The number of bytes used to split larger\n                                  files. If None, then the default value\n                                  **256MB** will be used.  [default: 256MB]\n  --kwargs-json TEXT              Additional JSON encoded dict arguments to use\n                                  while processing the data.e.g: To skip 100\n                                  lines from the bottom of file, pass\n                                  '{\"skipfooter\": 100}'\n  -q, --quiet                     Output datasource uuid only.\n  -d, --debug                     Set logger level to DEBUG and output\n                                  everything.\n  --help                          Show this message and exit.\n\nUsage: root ls [OPTIONS]\n\n  Return the list of datablobs.\n\nOptions:\n  -o, --offset INTEGER  The number of datablobs to offset at the beginning. If\n                        **None**, then the default value **0** will be used.\n                        [default: 0]\n  -l, --limit INTEGER   The maximum number of datablobs to return from the\n                        server. If **None**, then the default value **100** will\n                        be used.  [default: 100]\n  --disabled            If set to **True**, then only the deleted datablobs will\n                        be returned.Else, the default value **False** will be\n                        used to return only the listof active datablobs.\n  --completed           If set to **True**, then only the datablobs that are\n                        successfully downloadedto the server will be returned.\n                        Else, the default value **False** will be used toreturn\n                        all the datablobs.\n  -f, --format TEXT     Format output and show only the given column(s) values.\n  -q, --quiet           Output only datablob uuids separated by space\n  -d, --debug           Set logger level to DEBUG and output everything.\n  --help                Show this message and exit.\n\nUsage: root rm [OPTIONS] UUID\n\n  Delete a datablob from the server.\n\nArguments:\n  UUID  Datablob uuid.  [required]\n\nOptions:\n  -f, --format TEXT  Format output and show only the given column(s) values.\n  -q, --quiet        Output the deleted datablob uuid only.\n  -d, --debug        Set logger level to DEBUG and output everything.\n  --help             Show this message and exit.\n\nUsage: root tag [OPTIONS]\n\n  Tag an existing datablob in the server.\n\nOptions:\n  -uuid, --datablob_uuid TEXT  Datablob uuid in the server.  [required]\n  -n, --name TEXT              A string to tag the datablob.  [required]\n  -f, --format TEXT            Format output and show only the given column(s)\n                               values.\n  -d, --debug                  Set logger level to DEBUG and output everything.\n  --help                       Show this message and exit.\n\nUsage: root from-local [OPTIONS]\n\n  Create and return a datablob from local csv file.\n\n  The API currently allows users to create datablobs from CSV or Parquet files.\n  We intend to support additional file formats in future releases.\n\nOptions:\n  -p, --path TEXT             The relative or absolute path to a local\n                              CSV/parquet file or to a directory containing the\n                              CSV/parquet files.  [required]\n  -cp, --cloud-provider TEXT  The destination cloud storage provider's name to\n                              store the datablob. Currently, the API only\n                              supports **aws** and **azure** as cloud storage\n                              providers. If **None** (default value), then\n                              **aws**  will be used as the cloud storage\n                              provider.\n  -r, --region TEXT           The destination cloud provider's region to save\n                              your datablob. If **None** (default value) then\n                              the default region will be assigned based on the\n                              cloud provider. In the case of **aws**, **eu-\n                              west-1** will be used and in the case of\n                              **azure**, **westeurope** will be used. The\n                              supported AWS regions are: ap-northeast-1, ap-\n                              northeast-2, ap-south-1, ap-southeast-1, ap-\n                              southeast-2, ca-central-1, eu-central-1, eu-\n                              north-1, eu-west-1, eu-west-2, eu-west-3, sa-\n                              east-1, us-east-1, us-east-2, us-west-1, us-\n                              west-2. The supported Azure Blob Storage regions\n                              are: australiacentral, australiacentral2,\n                              australiaeast, australiasoutheast, brazilsouth,\n                              canadacentral, canadaeast, centralindia,\n                              centralus, eastasia, eastus, eastus2,\n                              francecentral, francesouth, germanynorth,\n                              germanywestcentral, japaneast, japanwest,\n                              koreacentral, koreasouth, northcentralus,\n                              northeurope, norwayeast, norwaywest,\n                              southafricanorth, southafricawest, southcentralus,\n                              southeastasia, southindia, switzerlandnorth,\n                              switzerlandwest, uaecentral, uaenorth, uksouth,\n                              ukwest, westcentralus, westeurope, westindia,\n                              westus, westus2.\n  -t, --tag TEXT              A string to tag the datablob. If not passed, then\n                              the tag **latest** will be assigned to the\n                              datablob.\n  -q, --quiet                 Output data id only.\n  -d, --debug                 Set logger level to DEBUG and output everything.\n  --help                      Show this message and exit.\n\nUsage: root from-clickhouse [OPTIONS]\n\n  Create and return a datablob that encapsulates the data from a ClickHouse\n  database.\n\n  If the database requires authentication, pass the username/password as\n  commandline arguments or store it in the **CLICKHOUSE_USERNAME** and\n  **CLICKHOUSE_PASSWORD** environment variables.\n\nOptions:\n  --host TEXT                 Remote database host name.  [required]\n  --database TEXT             Database name.  [required]\n  --table TEXT                Table name.  [required]\n  --protocol TEXT             Protocol to use. The valid values are \"native\" and\n                              \"http\".  [required]\n  --index-column TEXT         The column to use as index (row labels).\n                              [required]\n  --timestamp-column TEXT     Timestamp column name in the tabel.  [required]\n  --port INTEGER              Host port number. If not passed, then the default\n                              value **0** will be used.  [default: 0]\n  -cp, --cloud-provider TEXT  The destination cloud storage provider's name to\n                              store the datablob. Currently, the API only\n                              supports **aws** and **azure** as cloud storage\n                              providers. If **None** (default value), then\n                              **aws**  will be used as the cloud storage\n                              provider.\n  -r, --region TEXT           The destination cloud provider's region to save\n                              your datablob. If **None** (default value) then\n                              the default region will be assigned based on the\n                              cloud provider. In the case of **aws**, **eu-\n                              west-1** will be used and in the case of\n                              **azure**, **westeurope** will be used. The\n                              supported AWS regions are: ap-northeast-1, ap-\n                              northeast-2, ap-south-1, ap-southeast-1, ap-\n                              southeast-2, ca-central-1, eu-central-1, eu-\n                              north-1, eu-west-1, eu-west-2, eu-west-3, sa-\n                              east-1, us-east-1, us-east-2, us-west-1, us-\n                              west-2. The supported Azure Blob Storage regions\n                              are: australiacentral, australiacentral2,\n                              australiaeast, australiasoutheast, brazilsouth,\n                              canadacentral, canadaeast, centralindia,\n                              centralus, eastasia, eastus, eastus2,\n                              francecentral, francesouth, germanynorth,\n                              germanywestcentral, japaneast, japanwest,\n                              koreacentral, koreasouth, northcentralus,\n                              northeurope, norwayeast, norwaywest,\n                              southafricanorth, southafricawest, southcentralus,\n                              southeastasia, southindia, switzerlandnorth,\n                              switzerlandwest, uaecentral, uaenorth, uksouth,\n                              ukwest, westcentralus, westeurope, westindia,\n                              westus, westus2.\n  -u, --username TEXT         Database username. If not passed, the default\n                              value 'root' will be used unless the value is\n                              explicitly set in the environment variable\n                              **CLICKHOUSE_USERNAME**.\n  -p, --password TEXT         Database password. If not passed, the default\n                              value '' will be used unless the value is\n                              explicitly set in the environment variable\n                              **CLICKHOUSE_PASSWORD**.\n  -f, --filters-json TEXT     Additional parameters to be used when importing\n                              data. For example, if you want to filter and\n                              extract data only for a specific user_id, pass\n                              '{\"user_id\": 1}'.\n  -t, --tag TEXT              A string to tag the datablob. If not passed, then\n                              the tag **latest** will be assigned to the\n                              datablob.\n  -q, --quiet                 Output datablob uuid only.\n  -d, --debug                 Set logger level to DEBUG and output everything.\n  --help                      Show this message and exit.\n</code></pre>"},{"location":"CLI_DataSource/","title":"CLI_DataSource","text":"<pre><code>from captn._testing import activate_by_import\n</code></pre> <pre><code>from airt._sanitizer import sanitized_print\nfrom typer.testing import CliRunner\n</code></pre> <pre><code>runner = CliRunner()\n\nfor c in app.registered_commands:\n    name = c.callback.__name__.replace(\"_\", \"-\")\n    result = runner.invoke(app, [name] + [\"--help\"])\n\n    sanitized_print(str(result.stdout))\n\n    assert \"AIRT_\" not in str(result.stdout)\n    assert \"airt\" not in str(result.stdout)\n</code></pre> <pre><code>Usage: root dtypes [OPTIONS] UUID\n\n  Return the dtypes of the datasource.\n\nArguments:\n  UUID  Datasource uuid.  [required]\n\nOptions:\n  -d, --debug  Set logger level to DEBUG and output everything.\n  --help       Show this message and exit.\n\nUsage: root head [OPTIONS] UUID\n\n  Return the first few rows of the datasource.\n\nArguments:\n  UUID  Datasource uuid.  [required]\n\nOptions:\n  -f, --format TEXT  Format output and show only the given column(s) values.\n  -d, --debug        Set logger level to DEBUG and output everything.\n  --help             Show this message and exit.\n\nUsage: root ls [OPTIONS]\n\n  Return the list of datasources.\n\nOptions:\n  -o, --offset INTEGER  The number of datasources to offset at the beginning. If\n                        **None**, then the default value **0** will be used.\n                        [default: 0]\n  -l, --limit INTEGER   The maximum number of datasources to return from the\n                        server. If **None**, then the default value **100** will\n                        be used.  [default: 100]\n  --disabled            If set to **True**, then only the deleted datasources\n                        will be returned.Else, the default value **False** will\n                        be used to return only the listof active datasources.\n  --completed           If set to **True**, then only the datasources that are\n                        successfully downloadedto the server will be returned.\n                        Else, the default value **False** will be used toreturn\n                        all the datasources.\n  -f, --format TEXT     Format output and show only the given column(s) values.\n  -q, --quiet           Output only datasource uuids separated by space\n  -d, --debug           Set logger level to DEBUG and output everything.\n  --help                Show this message and exit.\n\nUsage: root train [OPTIONS]\n\n  Train a model against the datasource.\n\nOptions:\n  -uuid, --datasource_uuid TEXT  Datasource uuid.  [required]\n  --client_column TEXT           The column name that uniquely identifies the\n                                 users/clients.  [required]\n  --timestamp_column TEXT        The timestamp column indicating the time of an\n                                 event. If not passed, then the default value\n                                 **None** will be used.\n  --target_column TEXT           Target column name that indicates the type of\n                                 the event.  [required]\n  --target TEXT                  Target event name to train and make\n                                 predictions. You can pass the target event as a\n                                 string or as a regular expression for\n                                 predicting more than one event. For example,\n                                 passing ***checkout** will train a model to\n                                 predict any checkout event.  [required]\n  --predict_after TEXT           Time delta in hours of the expected target\n                                 event.  [required]\n  -q, --quiet                    Output model uuid only.\n  -d, --debug                    Set logger level to DEBUG and output\n                                 everything.\n  --help                         Show this message and exit.\n\nUsage: root details [OPTIONS] UUID\n\n  Return details of a datasource.\n\nArguments:\n  UUID  Datasource uuid.  [required]\n\nOptions:\n  -f, --format TEXT  Format output and show only the given column(s) values.\n  -d, --debug        Set logger level to DEBUG and output everything.\n  --help             Show this message and exit.\n\nUsage: root rm [OPTIONS] UUID\n\n  Delete a datasource from the server.\n\nArguments:\n  UUID  Datasource uuid.  [required]\n\nOptions:\n  -f, --format TEXT  Format output and show only the given column(s) values.\n  -q, --quiet        Output the deleted datasource uuid only.\n  -d, --debug        Set logger level to DEBUG and output everything.\n  --help             Show this message and exit.\n\nUsage: root tag [OPTIONS]\n\n  Tag an existing datasource in server.\n\nOptions:\n  -uuid, --datasource_uuid TEXT  Datasource uuid.  [required]\n  -n, --name TEXT                A string to tag the datasource.  [required]\n  -f, --format TEXT              Format output and show only the given column(s)\n                                 values.\n  -d, --debug                    Set logger level to DEBUG and output\n                                 everything.\n  --help                         Show this message and exit.\n</code></pre>"},{"location":"CLI_Token/","title":"CLI_Token","text":"<pre><code>from captn._testing import activate_by_import\n</code></pre> <pre><code>from airt._sanitizer import sanitized_print\nfrom typer.testing import CliRunner\n</code></pre> <pre><code>runner = CliRunner()\n\nfor c in app.registered_commands:\n    name = c.callback.__name__.replace(\"_\", \"-\")\n    result = runner.invoke(app, [name] + [\"--help\"])\n\n    sanitized_print(str(result.stdout))\n\n    assert \"AIRT_\" not in str(result.stdout)\n    assert \"airt\" not in str(result.stdout)\n</code></pre> <pre><code>Usage: token [OPTIONS]\n\n  Get application token for captn service from a username/password pair.\n\n  To access the captn service, you must first create a developer account. To\n  obtain one, please contact us at info@captn.ai.\n\n  After successful verification, you will receive an email with the username and\n  password for the developer account.\n\n  Once you have the credentials, use them to get an access token by running\n  **captn token** command. It is necessary to get an access token; otherwise,\n  you won't be able to access all of the captn service's APIs. You can either\n  pass the username, password, and server address as command line arguments or\n  store them in the environment variables **CAPTN_SERVICE_USERNAME**,\n  **CAPTN_SERVICE_PASSWORD**, and **CAPTN_SERVER_URL**.\n\n  If you've already enabled multi-factor authentication (MFA) for your account,\n  you'll need to pass the dynamically generated six-digit verification code\n  along with your username and password to generate new tokens.\n\n  If the token is requested using Single sign-on (SSO), an authorization URL\n  will be returned. Please copy and paste it into your preferred browser and\n  complete the SSO provider authentication within 10 minutes. Otherwise, the SSO\n  login will time out and you will need to re-request the token.\n\n  Single sign-on (SSO) can be enabled for your account in three simple steps:\n\n  1. Enable the SSO for a provider by calling the command `captn user sso\n  enable` with the SSO provider name and an email address. At the moment, we\n  only support \"google\" and \"github\" as SSO providers. We intend to support\n  additional SSO providers in future releases.\n\n  2. Before you can start generating new tokens with SSO, you must first\n  authenticate with the SSO provider. Call the `captn token` command with the\n  same SSO provider you have enabled in the step above to generate an SSO\n  authorization URL. Please copy and paste it into your preferred browser and\n  complete the authentication process with the SSO provider.\n\n  3. After successfully authenticating with the SSO provider, an access token\n  will be generated and returned. Please set it in the **CAPTN_SERVICE_TOKEN**\n  environment variable for accessing the captn service.\n\nOptions:\n  -u, --username TEXT       Username for the developer account. If None (default\n                            value), then the value from\n                            **CAPTN_SERVICE_USERNAME** environment variable is\n                            used.\n  -p, --password TEXT       Password for the developer account. If None (default\n                            value), then the value from\n                            **CAPTN_SERVICE_PASSWORD** environment variable is\n                            used.\n  -s, --server TEXT         The captn server uri. If None (default value), then\n                            the value from **CAPTN_SERVER_URL** environment\n                            variable is used. If the variable is not set as\n                            well, then the default public server will be used.\n                            Please leave this setting to default unless you are\n                            running the service in your own server (please email\n                            us to info@captn.ai for that possibility).\n  --otp TEXT                Dynamically generated six-digit verification code\n                            from the authenticator app or the OTP you have\n                            received via SMS. Please do not pass this parameter\n                            if you haven't enabled the multi-factor\n                            authentication for your account.\n  -sp, --sso_provider TEXT  Name of the Single sign-on (SSO) provider. At the\n                            moment, we only support google and github as SSO\n                            providers. Please pass this parameter only if you\n                            have successfully enabled SSO for the provider.\n  -q, --quiet               Output authentication token only.\n  -d, --debug               Set logger level to DEBUG and output everything.\n  --install-completion      Install completion for the current shell.\n  --show-completion         Show completion for the current shell, to copy it or\n                            customize the installation.\n  --help                    Show this message and exit.\n</code></pre>"},{"location":"CLI_User/","title":"CLI_User","text":"<pre><code>from captn._testing import activate_by_import\n</code></pre> <pre><code>from airt._sanitizer import sanitized_print\nfrom typer.testing import CliRunner\n</code></pre> <pre><code>runner = CliRunner()\n\nfor c in app.registered_commands:\n    name = c.callback.__name__.replace(\"_\", \"-\")\n    result = runner.invoke(app, [name] + [\"--help\"])\n\n    sanitized_print(str(result.stdout))\n\n    assert \"AIRT_\" not in str(result.stdout)\n    assert \"airt\" not in str(result.stdout)\n</code></pre> <pre><code>Usage: root details [OPTIONS]\n\n  Get user details\n\n  Please do not pass the optional 'user' option unless you are a super user.\n  Only a super user can view details for other users.\n\nOptions:\n  -u, --user TEXT    Account user_uuid/username to get details. If not passed,\n                     then the currently logged-in details will be returned.\n  -f, --format TEXT  Format output and show only the given column(s) values.\n  -q, --quiet        Output user uuid only.\n  --help             Show this message and exit.\n\nUsage: root create [OPTIONS]\n\n  Create a new user in the server.\n\nOptions:\n  -un, --username TEXT           The new user's username. The username must be\n                                 unique or an exception will be thrown.\n                                 [required]\n  -fn, --first_name TEXT         The new user's first name.  [required]\n  -ln, --last_name TEXT          The new user's last name.  [required]\n  -e, --email TEXT               The new user's email. The email must be unique\n                                 or an exception will be thrown.  [required]\n  -p, --password TEXT            The new user's password.  [required]\n  -st, --subscription_type TEXT  User subscription type. Currently, the API\n                                 supports only the following subscription types\n                                 **small**, **medium** and **large**.\n                                 [required]\n  -su, --super_user              If set to **True**, then the new user will have\n                                 super user privilages. If **None**, then the\n                                 default value **False** will be used to create\n                                 a non-super user.\n  -ph, --phone_number TEXT       Phone number to be added to the user account.\n                                 The phone number should follow the pattern of\n                                 the country code followed by your phone number.\n                                 For example, 440123456789, +440123456789,\n                                 00440123456789, +44 0123456789,and (+44) 012\n                                 345 6789 are all valid formats for registering\n                                 a UK phone number.\n  --otp TEXT                     Dynamically generated six-digit verification\n                                 code from the authenticator app. Please pass\n                                 this optional argument only if you have\n                                 activated the MFA for your account.\n  -f, --format TEXT              Format output and show only the given column(s)\n                                 values.\n  -q, --quiet                    Output user uuid only.\n  -d, --debug                    Set logger level to DEBUG and output\n                                 everything.\n  --help                         Show this message and exit.\n\nUsage: root ls [OPTIONS]\n\n  Return the list of users available in the server.\n\nOptions:\n  -o, --offset INTEGER  The number of users to offset at the beginning. If\n                        **None**, then the default value **0** will be used.\n                        [default: 0]\n  -l, --limit INTEGER   The maximum number of users to return from the server.\n                        If None, then the default value 100 will be used.\n                        [default: 100]\n  --disabled            If set to **True**, then only the deleted users will be\n                        returned. Else, the default value **False** will be used\n                        to return only the list of active users.\n  -f, --format TEXT     Format output and show only the given column(s) values.\n  -q, --quiet           Output only user uuids separated by space\n  -d, --debug           Set logger level to DEBUG and output everything.\n  --help                Show this message and exit.\n\nUsage: root disable [OPTIONS] USERS...\n\n  Disable a user in the server.\n\nArguments:\n  USERS...  user_uuid/username to disabled.  To disable multiple users, please\n            pass the uuids/names separated by space.  [required]\n\nOptions:\n  --otp TEXT         Dynamically generated six-digit verification code from the\n                     authenticator app. Please pass this optional argument only\n                     if you have activated the MFA for your account.\n  -f, --format TEXT  Format output and show only the given column(s) values.\n  -q, --quiet        Output user uuid only.\n  -d, --debug        Set logger level to DEBUG and output everything.\n  --help             Show this message and exit.\n\nUsage: root enable [OPTIONS] USERS...\n\n  Enable a disabled user in the server.\n\nArguments:\n  USERS...  user_uuid/username to enable. To enable multiple users, please pass\n            the uuids/names separated by space.  [required]\n\nOptions:\n  --otp TEXT         Dynamically generated six-digit verification code from the\n                     authenticator app. Please pass this optional argument only\n                     if you have activated the MFA for your account.\n  -f, --format TEXT  Format output and show only the given column(s) values.\n  -q, --quiet        Output user uuid only.\n  -d, --debug        Set logger level to DEBUG and output everything.\n  --help             Show this message and exit.\n\nUsage: root update [OPTIONS]\n\n  Update existing user details in the server.\n\n  Please do not pass the optional user option unless you are a super user. Only\n  a super user can update details for other users.\n\nOptions:\n  --user TEXT             Account user_uuid/username to update. If not passed,\n                          then the default value None will be used to update the\n                          currently logged-in user details.\n  -un, --username TEXT    New username for the user.\n  -fn, --first_name TEXT  New first name for the user.\n  -ln, --last_name TEXT   New last name for the user.\n  -e, --email TEXT        New email for the user.\n  --otp TEXT              Dynamically generated six-digit verification code from\n                          the authenticator app. Please pass this optional\n                          argument only if you have activated the MFA for your\n                          account.\n  -f, --format TEXT       Format output and show only the given column(s)\n                          values.\n  -q, --quiet             Output user uuid only.\n  -d, --debug             Set logger level to DEBUG and output everything.\n  --help                  Show this message and exit.\n\nUsage: root register-phone-number [OPTIONS]\n\n  Register and validate a phone number\n\n  This is an interactive command, one called it will send an OTP via SMS to the\n  phone number. Please enter the OTP you have received in the interactive prompt\n  to complete the phone number registration process.\n\n  After ten invalid OTP attempts, you have to call this command again to\n  register the phone number.\n\nOptions:\n  -p, --phone-number TEXT  Phone number to register. The phone number should\n                           follow the pattern of the  country code followed by\n                           your phone number. For example, **440123456789,\n                           +440123456789, 00440123456789, +44 0123456789, and\n                           (+44) 012 345 6789** are all valid formats for\n                           registering a UK phone number. If the phone number is\n                           not passed in the arguments, then the OTP will be\n                           sent to the phone  number that was already registered\n                           to the user's account.\n  --otp TEXT               Dynamically generated six-digit verification code\n                           from the authenticator app. Please pass this optional\n                           argument only if you have activated the MFA for your\n                           account.\n  -d, --debug              Set logger level to DEBUG and output everything.\n  --help                   Show this message and exit.\n\nUsage: root reset-password [OPTIONS]\n\n  Reset the account password\n\n      We currently support two types of OTPs to reset the password for your\n      account and you don't have to be logged in to call this command\n\n\n\n  The command switches to interactive mode unless all arguments are passed. The\n  interactive mode will prompt you for the missing details and ask you to choose\n  a recovery option to reset your password. Currently, we only support resetting\n  the password either using a TOTP or SMS OTP.\n\n  If you have already activated the MFA for your account, then you can either\n  enter the dynamically generated six-digit verification code from the\n  authenticator app (TOTP) or request an OTP via SMS to your registered phone\n  number.\n\n  If the MFA is not activated already, then you can only request the OTP via SMS\n  to your registered phone number.\n\n  After selecting an option, please follow the on-screen instructions to reset\n  your password. In case, you don't have MFA enabled or don't have access to\n  your registered phone number, please contact your administrator.\n\nOptions:\n  -u, --username TEXT       Account username to reset the password\n  -np, --new-password TEXT  New password to set for the account\n  --otp TEXT                Dynamically generated six-digit verification code\n                            from the authenticator app\n  -d, --debug               Set logger level to DEBUG and output everything.\n  --help                    Show this message and exit.\n</code></pre>"},{"location":"CLI_Version/","title":"CLI_Version","text":"<pre><code>from captn._testing import activate_by_import\n</code></pre> <pre><code>from airt._sanitizer import sanitized_print\nfrom typer.testing import CliRunner\n</code></pre> <pre><code>runner = CliRunner()\n\nfor c in app.registered_commands:\n    name = c.callback.__name__.replace(\"_\", \"-\")\n    result = runner.invoke(app, [name] + [\"--help\"])\n\n    sanitized_print(str(result.stdout))\n\n    assert \"AIRT_\" not in str(result.stdout)\n    assert \"airt\" not in str(result.stdout)\n</code></pre> <pre><code>Usage: version [OPTIONS]\n\n  Return the server and client versions.\n\nOptions:\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or\n                        customize the installation.\n  --help                Show this message and exit.\n</code></pre> <pre><code>result = runner.invoke(app)\n\nsanitized_print(str(result.stdout))\n</code></pre> <pre><code>        Version\nclient  2023.2.0\nserver  2022.12.0rc0\n</code></pre>"},{"location":"Client/","title":"Client","text":"<pre><code>from airt._sanitizer import sanitized_print\n</code></pre> <pre><code>from contextlib import contextmanager\n\nfrom fastcore.utils import patch\n\n\nclass A:\n\"\"\"A\"\"\"\n\n    pass\n\n\n@patch(cls_method=True)\n@contextmanager\ndef f(cls: A):\n\"\"\"AIRT_\"\"\"\n    pass\n\n\n_fix_doc_string(A)\n\nsanitized_print(A.f.__doc__)\n\nassert A.f.__doc__ == \"CAPTN_\"\n</code></pre> <pre><code>CAPTN_\n</code></pre> <pre><code>from airt.client import DataBlob\n\n_fix_doc_string(DataBlob)\n\nsanitized_print(DataBlob.set_default_cloud_provider.__doc__)\n\nassert \"AIRT_\" not in DataBlob.set_default_cloud_provider.__doc__\n</code></pre> <pre><code>Sets the default destination value for the cloud_provider and the region.\n\n    Whenever you call the from_\\* methods of the `DataBlob` class inside this context manager, the destination cloud_provider and region set in this context\n    will be passed to the from_\\* methods, unless you explicitely override it in the parameter.\n\n    Args:\n        cloud_provider: The destination cloud storage provider's name to store the datablob. Currently, the API only supports **aws** and **azure** as cloud storage providers.\n        region: The destination cloud provider's region to store the datablob. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1,\n            ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported\n            Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia,\n            centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth,\n            northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth,\n            switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.\n\n    Returns:\n        A context manager that specifies the cloud provider and region to use.\n\n    Here's an example of creating a datablob from Azure Blob Storage and storing it in AWS S3:\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        import os\n\n        from azure.identity import DefaultAzureCredential\n        from azure.mgmt.storage import StorageManagementClient\n\n        from  captn.client import Client, DataBlob\n\n        # Create a credential for accessing Azure Blob Storage\n        # Setting the required environment variables\n        os.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"\n        os.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"\n        os.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"\n        os.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"\n\n        # Setting the resource group name and storage account name\n        azure_group_name = \"{fill in azure_group_name}\"\n        azure_storage_account_name = \"{fill in azure_storage_account_name}\"\n\n        # Retrieving the credential\n        azure_storage_client = StorageManagementClient(\n            DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n        )\n        azure_storage_keys = azure_storage_client.storage_accounts.list_keys(\n            azure_group_name, azure_storage_account_name\n        )\n        azure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}\n        credential = azure_storage_keys['key1']\n\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a datablob\n        # In this example, the datablobs created inside the context manager will be\n        # stored in an AWS S3 bucket with the region set to eu-west-3.\n        with DataBlob.set_default_cloud_provider(\n            cloud_provider=\"aws\",\n            region=\"eu-west-3\"\n        ):\n            db = DataBlob.from_azure_blob_storage(\n                uri=\"{fill in uri}\",\n                credential=credential\n            )\n\n        # Display the status in a progress bar\n        db.progress_bar()\n\n        # Print the details of the newly created datablob\n        # If the upload is successful, the ready flag should be set to True\n        print(db.details())\n        ```\n</code></pre>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Capt'n python client</li> <li>Tutorial</li> <li>API<ul> <li>captn.client</li> </ul> </li> <li>CLI<ul> <li>captn</li> </ul> </li> <li>Releases</li> </ul>"},{"location":"Tutorial/","title":"Tutorial","text":"<p>This tutorial gives an example of how to use captn services to train a model and make predictions.</p> <p>We can use the captn-client library\u2019s following classes for the task at hand:</p> <ul> <li> <p><code>Client</code> for authenticating and accessing the captn service,</p> </li> <li> <p><code>DataBlob</code> for encapsulating the data from sources like CSV files,   databases, or AWS S3 bucket, and</p> </li> <li> <p><code>DataSource</code> for managing datasources and training the models in the   captn service.</p> </li> </ul> <p>We import them from captn.client module as follows:</p> <pre><code># Importing necessary libraries\nfrom captn.client import Client, DataBlob, DataSource\n</code></pre>"},{"location":"Tutorial/#authentication","title":"Authentication","text":"<p>To access the captn service, you must first create a developer account. Please fill out the signup form below to get one:</p> <ul> <li>https://bit.ly/3I4cNuv</li> </ul> <p>After successful verification, you will receive an email with the username and password for the developer account.</p> <p>Once you have the credentials, use them to get an access token by calling <code>Client.get_token</code> method. It is necessary to get an access token; otherwise, you won\u2019t be able to access all of the captn service\u2019s APIs. You can either pass the username, password, and server address as parameters to the <code>Client.get_token</code> method or store them in the environment variables CAPTN_SERVICE_USERNAME, CAPTN_SERVICE_PASSWORD, and CAPTN_SERVER_URL.</p> <p>In addition to the regular authentication with credentials, you can also enable multi-factor authentication (MFA) and single sign-on (SSO) for generating tokens.</p> <p>To help protect your account, we recommend that you enable multi-factor authentication (MFA). MFA provides additional security by requiring you to provide unique verification code (OTP) in addition to your regular sign-in credentials when performing critical operations.</p> <p>Your account can be configured for MFA in just two easy steps:</p> <ol> <li> <p>To begin, you need to enable MFA for your account by calling the     <code>User.enable_mfa</code> method, which will generate a QR code. You can     then scan the QR code with an authenticator app, such as Google     Authenticator and follow the on-device instructions to finish the     setup in your smartphone.</p> </li> <li> <p>Finally, activate MFA for your account by calling     <code>User.activate_mfa</code> and passing the dynamically generated six-digit     verification code from your smartphone\u2019s authenticator app.</p> </li> </ol> <p>You can also disable MFA for your account at any time by calling the method <code>User.disable_mfa</code> method.</p> <p>Single sign-on (SSO) can be enabled for your account in three simple steps:</p> <ol> <li> <p>Enable the SSO for a provider by calling the <code>User.enable_sso</code>     method with the SSO provider name and an email address. At the     moment, we only support \u201cgoogle\u201d and \u201cgithub\u201d as SSO providers. We     intend to support additional SSO providers in future releases.</p> </li> <li> <p>Before you can start generating new tokens with SSO, you must first     authenticate with the SSO provider. Call the <code>Client.get_token</code> with     the same SSO provider you have enabled in the step above to generate     an SSO authorization URL. Please copy and paste it into your     preferred browser and complete the authentication process with the     SSO provider.</p> </li> <li> <p>After successfully authenticating with the SSO provider, call the     <code>Client.set_sso_token</code> method to generate a new token and use it     automatically in all future interactions with the captn server.</p> </li> </ol> <p>Info</p> <p>In the below example, the username, password, and server address are stored in CAPTN_SERVICE_USERNAME, CAPTN_SERVICE_PASSWORD, and CAPTN_SERVER_URL environment variables.</p> <pre><code># Authenticate\nClient.get_token()\n</code></pre>"},{"location":"Tutorial/#1-connect-and-preprocess-data","title":"1. Connect and preprocess data","text":"<p><code>DataBlob</code> objects are used to encapsulate data access. Currently, we support:</p> <ul> <li> <p>access for local CSV files,</p> </li> <li> <p>database access for MySql, ClickHouse, and</p> </li> <li> <p>files stored in cloud storage like AWS S3 and Azure Blob Storage.</p> </li> </ul> <p>We intend to support additional databases and storage mediums in future releases.</p> <p>To create a <code>DataBlob</code> object, use one of the DataBlob class\u2019s from_* methods. Check out the <code>DataBlob</code> class documentation for more information.</p> <p>In this example, the input data is a CSV file stored in an AWS S3 bucket. Before you can use the data to train a model, it must be uploaded to the captn server. To upload data from an AWS S3 bucket to the captn server, use the DataBlob class\u2019s <code>DataBlob.from_s3</code> method.</p> <p>In our example, we will be using the captn APIs to load and preprocess a sample CSV file stored in an AWS S3 bucket.</p> <pre><code># Pull the data from an AWS S3 bucket to the captn server\ndata_blob = DataBlob.from_s3(uri=\"s3://test-airt-service/sample_gaming_130k\")\n</code></pre> <p>The above method will automatically pull the data into the captn server, and all calls to the library are asynchronous and return immediately. To manage completion, all the from_* methods of the DataBlob class will return a status object indicating the completion status. Alternatively, you can monitor the completion status interactively in a progress bar by calling the <code>DataBlob.progress_bar</code> method:</p> <pre><code>data_blob.progress_bar()\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [01:36&lt;00:00, 96.17s/it]\n</code></pre> <p>The next step is to preprocess and prepare the data for training. Preprocessing entails creating the index column, sort column, and so on. Currently, CSV and Parquet files can be preprocessed. Please use the <code>DataBlob.to_datasource</code> method in the DataBlob class for the same. We intend to support additional file formats in the future releases.</p> <p>The sample data we used in this example doesn\u2019t have the header rows and their data types defined.</p> <p>The following code creates the necessary headers along with their data types and reads only a subset of columns that are required for modeling:</p> <pre><code># Add header rows\nprefix = [\"revenue\", \"ad_revenue\", \"conversion\", \"retention\"]\ndays = list(range(30)) + list(range(30, 361, 30))\ndtype = {\n    \"date\": \"str\",\n    \"game_name\": \"str\",\n    \"platform\": \"str\",\n    \"user_type\": \"str\",\n    \"network\": \"str\",\n    \"campaign\": \"str\",\n    \"adgroup\": \"str\",\n    \"installs\": \"int32\",\n    \"spend\": \"float32\",\n}\ndtype.update({f\"{p}_{d}\": \"float32\" for p in prefix for d in days})\nnames = list(dtype.keys())\n\nkwargs = {\n    \"delimiter\": \"|\",\n    \"names\": names,\n    \"parse_dates\": [\"date\"],\n    \"usecols\": names[:42],\n    \"dtype\": dtype,\n}\n</code></pre> <p>Finally, the above variables are passed to the <code>DataBlob.to_datasource</code> method which preprocesses the data and stores it in captn server.</p> <pre><code># Preprocess and prepare the data for training\ndata_source = data_blob.to_datasource(\n    file_type=\"csv\", index_column=\"game_name\", sort_by=\"date\", **kwargs\n)\n\n# Display the data preprocessing progress\ndata_source.progress_bar()\n</code></pre> <pre><code>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:45&lt;00:00, 45.64s/it]\n</code></pre> <p>When the preprocessing is finished, you can run the following command to display the head of the data to ensure everything is fine.</p> <pre><code># Display the first few rows of preprocessed data.\ndata_source.head().style\n</code></pre> date platform user_type network campaign adgroup installs spend revenue_0 revenue_1 revenue_2 revenue_3 revenue_4 revenue_5 revenue_6 revenue_7 revenue_8 revenue_9 revenue_10 revenue_11 revenue_12 revenue_13 revenue_14 revenue_15 revenue_16 revenue_17 revenue_18 revenue_19 revenue_20 revenue_21 revenue_22 revenue_23 revenue_24 revenue_25 revenue_26 revenue_27 revenue_28 revenue_29 revenue_30 revenue_60 revenue_90 game_name game_name_0 2021-03-15 00:00:00 ios jetfuelit_int jetfuelit_int campaign_0 adgroup_541 1 0.600000 0.000000 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 0.018173 game_name_0 2021-03-15 00:00:00 ios jetfuelit_int jetfuelit_int campaign_0 adgroup_2351 2 4.900000 0.000000 0.034000 0.034000 0.034000 0.034000 0.034000 0.034000 0.034000 0.034000 0.034000 0.034000 0.034000 0.034000 0.034000 0.034000 0.034000 0.034000 0.034000 0.034000 0.034000 0.034000 0.034000 0.034000 0.034000 6.034000 6.034000 6.034000 6.034000 6.034000 6.034000 6.034000 6.034000 13.030497 game_name_0 2021-03-15 00:00:00 ios jetfuelit_int jetfuelit_int campaign_0 adgroup_636 3 7.350000 0.000000 0.000000 0.034000 0.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 12.112897 game_name_0 2021-03-15 00:00:00 ios jetfuelit_int jetfuelit_int campaign_0 adgroup_569 1 0.750000 0.000000 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 0.029673 game_name_0 2021-03-15 00:00:00 ios jetfuelit_int jetfuelit_int campaign_0 adgroup_243 2 3.440000 0.000000 0.027981 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 0.042155 game_name_0 2021-03-15 00:00:00 android googleadwords_int googleadwords_int campaign_283 adgroup_1685 11 0.000000 0.000000 0.097342 0.105832 0.105832 0.114427 0.126571 0.138659 0.134605 0.134605 0.134605 0.137692 0.139581 0.139581 0.139581 0.139581 0.139581 0.139581 0.139581 0.139581 0.139581 0.139581 0.139581 0.139581 0.139581 0.139581 0.139581 0.139581 0.139581 0.139581 0.139581 0.139581 0.139581 0.139581 game_name_0 2021-03-15 00:00:00 android googleadwords_int googleadwords_int campaign_2 adgroup_56 32 30.090000 0.000000 0.802349 0.747480 1.342748 1.301987 1.301987 2.425463 2.537004 2.537004 2.537004 2.537004 2.537004 2.537004 2.537004 2.537004 2.537004 2.537004 2.537004 2.537004 2.537004 2.537004 2.537004 2.548253 2.548253 2.548253 2.771138 2.805776 2.805776 2.805776 2.805776 2.805776 2.805776 2.805776 game_name_0 2021-03-15 00:00:00 android moloco_int moloco_int campaign_191 None 291 503.480011 34.701553 63.618111 73.118065 83.186073 93.135414 95.532127 102.649849 108.591347 109.839607 109.839607 111.157013 111.790909 113.925873 114.228226 114.500160 115.298882 115.285194 115.299660 115.404655 115.425957 115.456314 116.153206 116.508331 116.508331 117.334709 117.387489 117.509506 118.811417 118.760765 119.151291 119.350220 139.069443 147.528793 game_name_0 2021-03-15 00:00:00 android jetfuelit_int jetfuelit_int campaign_0 adgroup_190 4 2.740000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 game_name_0 2021-03-15 00:00:00 android jetfuelit_int jetfuelit_int campaign_0 adgroup_755 8 11.300000 13.976003 14.358793 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905 14.338905"},{"location":"Tutorial/#2-training","title":"2. Training","text":"<pre><code># Todo\n</code></pre>"},{"location":"captn_api_docs/captn/client/","title":"captn.client","text":""},{"location":"captn_api_docs/captn/client/#captn.client.APIKey","title":"<code> APIKey        </code>","text":"<p>A class for managing the APIKeys in the server.</p> <p>Both the APIKey and the token can be used for accessing the captn services. However, there is a slight difference in generating and managing the two.</p> <p>For generating the APIKey, you first need to get the developer token. Please refer to <code>Client.get_token</code> method documentation to generate one.</p> <p>After logging in with your developer token, you can create any number of new APIKeys and can set an expiration date individually. You can also access other methods available in the APIKey class to list, revoke the APIKey at any time.</p> <p>Here's an example of how to use the APIKey class to create a new key and use it to access the captn service.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, APIKey, User\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a new key with the given name\nkey_name = \"{fill in key_name}\"\nnew_key = APIKey.create(name=key_name)\n\n# Display the details of the newly created key\nprint(APIKey.details(apikey=key_name))\n\n# Call the set_token method to set the newly generated key\nClient.set_token(token=new_key[\"access_token\"])\n\n# Print the logged-in user details\n# If set_token fails, the line below will throw an error.\nprint(User.details())\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.APIKey.__init__","title":"<code>__init__(self, uuid, name=None, expiry=None, disabled=None, created=None)</code>  <code>special</code>","text":"<p>Constructs a new APIKey instance.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>str</code> <p>APIKey uuid.</p> required <code>name</code> <code>Optional[str]</code> <p>APIKey name.</p> <code>None</code> <code>expiry</code> <code>Optional[str]</code> <p>APIKey expiry date.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Flag to indicate the status of the APIKey.</p> <code>None</code> <code>created</code> <code>Optional[str]</code> <p>APIKey creation date.</p> <code>None</code> Source code in <code>captn/client.py</code> <pre><code>def __init__(\n    self,\n    uuid: str,\n    name: Optional[str] = None,\n    expiry: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    created: Optional[str] = None,\n):\n\"\"\"Constructs a new APIKey instance.\n\n    Args:\n        uuid: APIKey uuid.\n        name: APIKey name.\n        expiry: APIKey expiry date.\n        disabled: Flag to indicate the status of the APIKey.\n        created: APIKey creation date.\n    \"\"\"\n    self.uuid = uuid\n    self.name = name\n    self.expiry = expiry\n    self.disabled = disabled\n    self.created = created\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.APIKey.as_df","title":"<code>as_df(ax)</code>  <code>staticmethod</code>","text":"<p>Return the details of APIKey instances in a pandas dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>ax</code> <code>List[APIKey]</code> <p>List of APIKey instances.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Details of all the APIKeys in a dataframe.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>An example of displaying the APIKeys generated by the currently logged-in user in a dataframe</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, APIKey\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a key without an expiry date in the given name\nkey_name = \"{fill in key_name}\"\nAPIKey.create(name=key_name)\n\n# Display all the APIKey instance details in a pandas dataframe\ndf = APIKey.as_df(APIKey.ls())\nprint(df)\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef as_df(ax: List[\"APIKey\"]) -&gt; pd.DataFrame:\n\"\"\"Return the details of APIKey instances in a pandas dataframe.\n\n    Args:\n        ax: List of APIKey instances.\n\n    Returns:\n        Details of all the APIKeys in a dataframe.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n\n    An example of displaying the APIKeys generated by the currently logged-in user in a dataframe\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a key without an expiry date in the given name\n        key_name = \"{fill in key_name}\"\n        APIKey.create(name=key_name)\n\n        # Display all the APIKey instance details in a pandas dataframe\n        df = APIKey.as_df(APIKey.ls())\n        print(df)\n        ```\n    \"\"\"\n    lists = get_attributes_from_instances(ax, APIKey.API_KEY_COLS)  # type: ignore\n    return generate_df(lists, APIKey.API_KEY_COLS)\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.APIKey.create","title":"<code>create(name, expiry=None, otp=None)</code>  <code>staticmethod</code>","text":"<p>Create a new APIKey</p> <p>In order to access the captn service with the newly generated APIKey, please call the <code>Client.set_token</code> method or set the APIKey value in the CAPTN_SERVICE_TOKEN environment variable.</p> <p>Note</p> <ul> <li> <p>The APIKey's name must be unique. If not, an exception will be raised while creating a new key with the name of an existing key. However, you can create a new key with the name of a revoked key.</p> </li> <li> <p>The expiry for an APIKey is optional, if not passed then the default value None will be used to create an APIKey with no expiry date!</p> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the APIKey.</p> required <code>expiry</code> <code>Union[int, datetime.timedelta, datetime.datetime]</code> <p>The validity for the APIKey. This can be an integer representing the number of days till expiry, can be an instance of timedelta (timedelta(days=x)) or can be an instance of datetime. If not passed, then the default value None will be used to create a APIKey that will never expire!</p> <code>None</code> <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if the MFA is enabled for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, str]</code> <p>The APIKey and its type as a dictionary.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the user is not authenticated.</p> <code>ValueError</code> <p>If the user tries to create a new APIKey with an existing key name.</p> <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>In the following example, a new APIKey is created with a 10-day expiration date and used to access the captn service.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, APIKey\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a key with the given name and set the expiry to 10 days from now.\n# If the expiry parameter is not specified, a key with no expiry date is created.\nkey_name = \"{fill in key_name}\"\nnew_key_details = APIKey.create(name=key_name, expiry=10)\n\n# Display the details of the newly created key\nprint(APIKey.details(apikey=key_name))\n\n# If a new key with the same name is created, an exception will be raised.\n# However, you can create a new key with the name of a revoked key.\ntry:\n    APIKey.create(name=key_name, expiry=10)\n    print(\"Should not print this, the above line should raise an exception\")\n    raise RuntimeException()\n\nexcept ValueError as e:\n    print(\"Expected to fail, everything is fine\")\n\n# Finally, either call the below method to set the newly generated key\n# or store it in the CAPTN_SERVICE_TOKEN environment variable.\nClient.set_token(token=new_key_details[\"access_token\"])\n\n# If set_token fails, the line below will throw an error.\nprint(APIKey.details(apikey=key_name))\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef create(\n    name: str,\n    expiry: Optional[Union[int, timedelta, datetime]] = None,\n    otp: Optional[str] = None,\n) -&gt; Dict[str, str]:\n\"\"\"Create a new APIKey\n\n    In order to access the airt service with the newly generated APIKey, please call the `Client.set_token` method\n    or set the APIKey value in the **AIRT_SERVICE_TOKEN** environment variable.\n\n    !!! note\n\n        - The APIKey's name must be unique. If not, an exception will be raised while creating a new key with the name of an existing key.\n        However, you can create a new key with the name of a revoked key.\n\n        - The expiry for an APIKey is optional, if not passed then the default value **None** will be used to create an APIKey with no expiry date!\n\n    Args:\n        name: The name of the APIKey.\n        expiry: The validity for the APIKey. This can be an integer representing the number of days till expiry, can be\n            an instance of timedelta (timedelta(days=x)) or can be an instance of datetime. If not passed, then the default value\n            **None** will be used to create a APIKey that will never expire!\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if the MFA is enabled for your account.\n\n    Returns:\n        The APIKey and its type as a dictionary.\n\n    Raises:\n        ValueError: If the user is not authenticated.\n        ValueError: If the user tries to create a new APIKey with an existing key name.\n        ValueError: If the OTP is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    In the following example, a new APIKey is created with a 10-day expiration date and used to access the airt service.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a key with the given name and set the expiry to 10 days from now.\n        # If the expiry parameter is not specified, a key with no expiry date is created.\n        key_name = \"{fill in key_name}\"\n        new_key_details = APIKey.create(name=key_name, expiry=10)\n\n        # Display the details of the newly created key\n        print(APIKey.details(apikey=key_name))\n\n        # If a new key with the same name is created, an exception will be raised.\n        # However, you can create a new key with the name of a revoked key.\n        try:\n            APIKey.create(name=key_name, expiry=10)\n            print(\"Should not print this, the above line should raise an exception\")\n            raise RuntimeException()\n\n        except ValueError as e:\n            print(\"Expected to fail, everything is fine\")\n\n        # Finally, either call the below method to set the newly generated key\n        # or store it in the AIRT_SERVICE_TOKEN environment variable.\n        Client.set_token(token=new_key_details[\"access_token\"])\n\n        # If set_token fails, the line below will throw an error.\n        print(APIKey.details(apikey=key_name))\n        ```\n    \"\"\"\n    if expiry is None:\n        expiry_date = expiry\n    else:\n        if isinstance(expiry, int):\n            delta = datetime.now() + timedelta(days=expiry)\n        elif isinstance(expiry, timedelta):\n            delta = datetime.now() + expiry\n        else:\n            delta = expiry\n\n        expiry_date = delta.strftime(\"%Y-%m-%dT%H:%M\")\n\n    return Client._post_data(\n        relative_url=\"/apikey\",\n        json=dict(name=name, expiry=expiry_date, otp=otp),\n    )\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.APIKey.details","title":"<code>details(apikey)</code>  <code>staticmethod</code>","text":"<p>Return details of an APIKey.</p> <p>Parameters:</p> Name Type Description Default <code>apikey</code> <code>str</code> <p>APIKey uuid/name.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas Dataframe encapsulating the details of the APIKey.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the APIKey uuid is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>An example to get details of an APIKey</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, APIKey\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a key without an expiry date in the given name\nkey_name = \"{fill in key_name}\"\nAPIKey.create(name=key_name)\n\n# Display the details of the newly created key\nprint(APIKey.details(apikey=key_name))\n\n# To display the details of all keys created by the user, use the method below.\ndf = APIKey.as_df(APIKey.ls())\nprint(df)\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef details(apikey: str) -&gt; pd.DataFrame:\n\"\"\"Return details of an APIKey.\n\n    Args:\n        apikey: APIKey uuid/name.\n\n    Returns:\n        A pandas Dataframe encapsulating the details of the APIKey.\n\n    Raises:\n        ValueError: If the APIKey uuid is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    An example to get details of an APIKey\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a key without an expiry date in the given name\n        key_name = \"{fill in key_name}\"\n        APIKey.create(name=key_name)\n\n        # Display the details of the newly created key\n        print(APIKey.details(apikey=key_name))\n\n        # To display the details of all keys created by the user, use the method below.\n        df = APIKey.as_df(APIKey.ls())\n        print(df)\n        ```\n    \"\"\"\n    details = Client._get_data(relative_url=f\"/apikey/{apikey}\")\n\n    return pd.DataFrame(details, index=[0])[APIKey.API_KEY_COLS]\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.APIKey.ls","title":"<code>ls(user=None, offset=0, limit=100, include_disabled=False)</code>  <code>staticmethod</code>","text":"<p>Return the list of APIKeys instances.</p> <p>Please do not pass the user parameter unless you are a super user. Only a super user can view the APIKeys created by other users.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>Optional[str]</code> <p>user_uuid/username associated with the APIKey. Please call <code>User.details</code> method of the User class to get your user_uuid. If not passed, then the currently logged-in user_uuid will be used.</p> <code>None</code> <code>offset</code> <code>int</code> <p>The number of APIKeys to offset at the beginning. If None, then the default value 0 will be used.</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of APIKeys to return from the server. If None, then the default value 100 will be used.</p> <code>100</code> <code>include_disabled</code> <code>bool</code> <p>If set to True, then the disabled APIKeys will also be included in the result.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[APIKey]</code> <p>A list of APIKey instances.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <code>ValueError</code> <p>If the user_uuid is invalid.</p> <p>An example of displaying the APIKeys generated by the currently logged-in user</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, APIKey\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a key without an expiry date in the given name\nkey_name = \"{fill in key_name}\"\nAPIKey.create(name=key_name)\n\n# Get the list of all APIKey instances created by the currently logged-in user.\n# If you are a super user, you can view the APIkeys created by other users by\n# passing their uuid/username in the user parameter.\nax = APIKey.ls()\nprint(ax)\n\n# Display the details of the instances in a pandas dataframe\ndf = APIKey.as_df(ax)\nprint(df)\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef ls(\n    user: Optional[str] = None,\n    offset: int = 0,\n    limit: int = 100,\n    include_disabled: bool = False,\n) -&gt; List[\"APIKey\"]:\n\"\"\"Return the list of APIKeys instances.\n\n    Please do not pass the **user** parameter unless you are a super user. Only a super user can view\n    the APIKeys created by other users.\n\n    Args:\n        user: user_uuid/username associated with the APIKey. Please call `User.details` method of the User class to get your user_uuid.\n            If not passed, then the currently logged-in user_uuid will be used.\n        offset: The number of APIKeys to offset at the beginning. If None, then the default value 0 will be used.\n        limit: The maximum number of APIKeys to return from the server. If None, then the default value 100 will be used.\n        include_disabled: If set to **True**, then the disabled APIKeys will also be included in the result.\n\n    Returns:\n        A list of APIKey instances.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n        ValueError: If the user_uuid is invalid.\n\n    An example of displaying the APIKeys generated by the currently logged-in user\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a key without an expiry date in the given name\n        key_name = \"{fill in key_name}\"\n        APIKey.create(name=key_name)\n\n        # Get the list of all APIKey instances created by the currently logged-in user.\n        # If you are a super user, you can view the APIkeys created by other users by\n        # passing their uuid/username in the user parameter.\n        ax = APIKey.ls()\n        print(ax)\n\n        # Display the details of the instances in a pandas dataframe\n        df = APIKey.as_df(ax)\n        print(df)\n        ```\n    \"\"\"\n    user_uuid = User.details(user=user)[\"uuid\"]\n\n    apikeys = Client._get_data(\n        relative_url=f\"/{user_uuid}/apikey?include_disabled={include_disabled}&amp;offset={offset}&amp;limit={limit}\"\n    )\n\n    ax = [\n        APIKey(\n            uuid=apikey[\"uuid\"],\n            name=apikey[\"name\"],\n            expiry=apikey[\"expiry\"],\n            disabled=apikey[\"disabled\"],\n            created=apikey[\"created\"],\n        )\n        for apikey in apikeys\n    ]\n\n    return ax\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.APIKey.revoke","title":"<code>revoke(keys, user=None, otp=None)</code>  <code>staticmethod</code>","text":"<p>Revoke one or more APIKeys</p> <p>Please do not pass the user parameter unless you are a super user. Only a super user can revoke the APIKeys created by other users.</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>Union[str, List[str], List[APIKey]]</code> <p>APIKey uuid/name to revoke. To revoke multiple keys, either pass a list of APIKey uuid/names or a list of APIKey instances.</p> required <code>user</code> <code>Optional[str]</code> <p>user_uuid/username associated with the APIKey. Please call <code>User.details</code> method of the User class to get your user_uuid/username. If not passed, then the currently logged-in user will be used.</p> <code>None</code> <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if the MFA is enabled for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas Dataframe encapsulating the details of the deleted APIKey(s).</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the APIKey uuid is invalid.</p> <code>ValueError</code> <p>If the user_uuid is invalid.</p> <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>An example to revoke a single APIKey by name</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, APIKey\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a key without an expiry date in the given name\nkey_name = \"{fill in key_name}\"\nAPIKey.create(name=key_name)\n\n# Check that the newly created key exists\nprint([key.name for key in APIKey.ls()])\n\n# Revoke the newly created key\n# To delete multiple keys, pass a list of key names or key instances\nAPIKey.revoke(keys=key_name)\n\n# Check that the newly created key does not exists\nprint([key.name for key in APIKey.ls()])\n</code></pre> <p>Here's an example of a super user revoking all APIkeys generated by a specific user.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, APIKey\n\n# Authenticate with super user privileges\nClient.get_token(\n    username=\"{fill in super_user_username}\",\n    password=\"{fill in super_user_password}\"\n)\n\n# List the APIKeys generated by a specific user\nuser = \"{fill in other_username}\"\nax = APIKey.ls(user=user)\nprint([key.name for key in ax])\n\n# Revoke the APIKeys\nAPIKey.revoke(keys=ax, user=user)\n\n# Check that all APIkeys have been revoked\nprint([key.name for key in APIKey.ls(user=user)])\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef revoke(\n    keys: Union[str, List[str], List[\"APIKey\"]],\n    user: Optional[str] = None,\n    otp: Optional[str] = None,\n) -&gt; pd.DataFrame:\n\"\"\"Revoke one or more APIKeys\n\n    Please do not pass the **user** parameter unless you are a super user. Only a super user can revoke the\n    APIKeys created by other users.\n\n    Args:\n        keys: APIKey uuid/name to revoke. To revoke multiple keys, either pass a list of APIKey uuid/names or a list of APIKey instances.\n        user: user_uuid/username associated with the APIKey. Please call `User.details` method of the User class to get your user_uuid/username.\n            If not passed, then the currently logged-in user will be used.\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if the MFA is enabled for your account.\n\n    Returns:\n         A pandas Dataframe encapsulating the details of the deleted APIKey(s).\n\n    Raises:\n        ValueError: If the APIKey uuid is invalid.\n        ValueError: If the user_uuid is invalid.\n        ValueError: If the OTP is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    An example to revoke a single APIKey by name\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a key without an expiry date in the given name\n        key_name = \"{fill in key_name}\"\n        APIKey.create(name=key_name)\n\n        # Check that the newly created key exists\n        print([key.name for key in APIKey.ls()])\n\n        # Revoke the newly created key\n        # To delete multiple keys, pass a list of key names or key instances\n        APIKey.revoke(keys=key_name)\n\n        # Check that the newly created key does not exists\n        print([key.name for key in APIKey.ls()])\n        ```\n\n    Here's an example of a super user revoking all APIkeys generated by a specific user.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate with super user privileges\n        Client.get_token(\n            username=\"{fill in super_user_username}\",\n            password=\"{fill in super_user_password}\"\n        )\n\n        # List the APIKeys generated by a specific user\n        user = \"{fill in other_username}\"\n        ax = APIKey.ls(user=user)\n        print([key.name for key in ax])\n\n        # Revoke the APIKeys\n        APIKey.revoke(keys=ax, user=user)\n\n        # Check that all APIkeys have been revoked\n        print([key.name for key in APIKey.ls(user=user)])\n        ```\n    \"\"\"\n    user_uuid = User.details(user=user)[\"uuid\"]\n    _keys = APIKey._get_key_names(keys)\n\n    response_list = []\n\n    for key_uuid in _keys:\n        url = f\"/{user_uuid}/apikey/{key_uuid}\"\n        response = Client._delete_data(\n            relative_url=check_and_append_otp_query_param(url, otp)\n        )\n        response_list.append(response)\n\n    return generate_df(response_list, APIKey.API_KEY_COLS)\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.Client","title":"<code> Client        </code>","text":"<p>A class for authenticating and accessing the captn service.</p> <p>To access the captn service, you must first create a developer account. To obtain one, please contact us at info@captn.ai.</p> <p>After successful verification, you will receive an email with the username and password for the developer account.</p> <p>Once you have the credentials, use them to get an access token by calling <code>get_token</code> method. It is necessary to get an access token; otherwise, you won't be able to access all of the captn service's APIs. You can either pass the username, password, and server address as parameters to the <code>get_token</code> method or store them in the environment variables CAPTN_SERVICE_USERNAME, CAPTN_SERVICE_PASSWORD, and CAPTN_SERVER_URL.</p> <p>In addition to the regular authentication with credentials, you can also enable multi-factor authentication (MFA) and single sign-on (SSO) for generating tokens.</p> <p>To help protect your account, we recommend that you enable multi-factor authentication (MFA). MFA provides additional security by requiring you to provide unique verification code (OTP) in addition to your regular sign-in credentials when performing critical operations.</p> <p>Your account can be configured for MFA in just two easy steps:</p> <ol> <li> <p>To begin, you need to enable MFA for your account by calling the <code>User.enable_mfa</code> method, which will generate a QR code. You can then scan the QR code with an authenticator app, such as Google Authenticator and follow the on-device instructions to finish the setup in your smartphone.</p> </li> <li> <p>Finally, activate MFA for your account by calling <code>User.activate_mfa</code> and passing the dynamically generated six-digit verification code from your smartphone's authenticator app.</p> </li> </ol> <p>After activating MFA for your account, you must pass the dynamically generated six-digit verification code, along with your username and password, to the <code>get_token</code> method to generate new tokens.</p> <p>Single sign-on (SSO) can be enabled for your account in three simple steps:</p> <ol> <li> <p>Enable the SSO for a provider by calling the <code>User.enable_sso</code> method with the SSO provider name and an email address. At the moment, we only support \"google\" and \"github\" as SSO providers. We intend to support additional SSO providers in future releases.</p> </li> <li> <p>Before you can start generating new tokens with SSO, you must first authenticate with the SSO provider. Call the <code>get_token</code> with the same SSO provider you have enabled in the step above to generate an SSO authorization URL. Please copy and paste it into your preferred browser and complete the authentication process with the SSO provider.</p> </li> <li> <p>After successfully authenticating with the SSO provider, call the <code>set_sso_token</code> method to generate a new token and use it automatically in all future interactions with the captn server.</p> </li> </ol> <p>Here's an example of how to use the Client class to authenticate and display the details of the currently logged-in user.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, User\n\n# Authenticate\n# MFA enabled users must pass the OTP along with the username and password\n# to the get_token method.\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Print the logged-in user details\nprint(User.details())\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.Client.get_token","title":"<code>get_token(*, username=None, password=None, server=None, sso_provider=None, otp=None)</code>  <code>classmethod</code>","text":"<p>Get application token for captn service from a username/password pair.</p> <p>This methods validates the developer credentials and returns an auth token. The returned auth token is implicitly used in all the interactions with the server.</p> <p>If you've already enabled multi-factor authentication (MFA) for your account, you'll need to pass the dynamically generated six-digit verification code along with your username and password to generate new tokens.</p> <p>If the token is requested using Single sign-on (SSO), an authorization URL will be returned. Please copy and paste it into your preferred browser and complete the SSO provider authentication within 10 minutes. Otherwise, the SSO login will time out and you will need to re-request the token.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>Optional[str]</code> <p>Username for the developer account. If None (default value), then the value from CAPTN_SERVICE_USERNAME environment variable is used.</p> <code>None</code> <code>password</code> <code>Optional[str]</code> <p>Password for the developer account. If None (default value), then the value from CAPTN_SERVICE_PASSWORD environment variable is used.</p> <code>None</code> <code>server</code> <code>Optional[str]</code> <p>The captn server uri. If None (default value), then the value from CAPTN_SERVER_URL environment variable is used. If the variable is not set as well, then the default public server will be used. Please leave this setting to default unless you are running the service in your own server (please email us to info@captn.ai for that possibility).</p> <code>None</code> <code>sso_provider</code> <code>Optional[str]</code> <p>Name of the Single sign-on (SSO) provider. Please pass this parameter only if you have successfully enabled SSO for this provider. At present, the API only supports \"google\" and \"github\" as valid SSO providers.</p> <code>None</code> <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app or the OTP you have received via SMS.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The authorization url if the token is requested using Single sign-on (SSO).</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the username/password pair does not match.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <code>KeyError</code> <p>If username/password is neither passed as parameters nor stored in environment variables.</p> <p>Here's an example of a non-MFA user authenticating and generating a new token</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import User, Client\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Print the logged-in user details\nprint(User.details())\n</code></pre> <p>Here's an example of a MFA user authenticating using SMS OTP and generating a new token</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, User\n\n# Request OTP via SMS to authenticate\n# If you want to use the OTP from the authenticator app, skip this step and\n# don't generate an SMS OTP; instead, pass the OTP from the authenticator\n# app to the get_token method below\nusername=\"{fill in username}\"\nUser.send_sms_otp(\n    username=username,\n    message_template_name=\"get_token\" # Don't change the message_template_name\n)\n\n# Authenticate using SMS OTP\n# The send_sms_otp method will send the OTP via SMS to the registered\n# phone number, which you must fill below\npassword=\"{fill in password}\"\notp=\"{fill in otp}\"\nClient.get_token(username=username, password=password, otp=otp)\n\n# Print the logged-in user details\nprint(User.details())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@classmethod\ndef get_token(  # type: ignore\n    cls,\n    *,\n    username: Optional[str] = None,\n    password: Optional[str] = None,\n    server: Optional[str] = None,\n    sso_provider: Optional[str] = None,\n    otp: Optional[str] = None,\n) -&gt; Optional[str]:\n\"\"\"Get application token for airt service from a username/password pair.\n\n    This methods validates the developer credentials and returns an auth token. The returned auth\n    token is implicitly used in all the interactions with the server.\n\n    If you've already enabled multi-factor authentication (MFA) for your account, you'll need to\n    pass the dynamically generated six-digit verification code along with your username and\n    password to generate new tokens.\n\n    If the token is requested using Single sign-on (SSO), an authorization URL will be returned.\n    Please copy and paste it into your preferred browser and complete the SSO provider\n    authentication within 10 minutes. Otherwise, the SSO login will time out and you will need\n    to re-request the token.\n\n    Args:\n        username: Username for the developer account. If None (default value), then the value from\n            **AIRT_SERVICE_USERNAME** environment variable is used.\n        password: Password for the developer account. If None (default value), then the value from\n            **AIRT_SERVICE_PASSWORD** environment variable is used.\n        server: The airt server uri. If None (default value), then the value from **AIRT_SERVER_URL** environment variable\n            is used. If the variable is not set as well, then the default public server will be used. Please leave this\n            setting to default unless you are running the service in your own server (please email us to info@airt.ai\n            for that possibility).\n        sso_provider: Name of the Single sign-on (SSO) provider. Please pass this parameter only if you have successfully\n            enabled SSO for this provider. At present, the API only supports \"google\" and \"github\" as valid SSO providers.\n        otp: Dynamically generated six-digit verification code from the authenticator app or the OTP you have received via SMS.\n\n    Returns:\n        The authorization url if the token is requested using Single sign-on (SSO).\n\n    Raises:\n        ValueError: If the username/password pair does not match.\n        ConnectionError: If the server address is invalid or not reachable.\n        KeyError: If username/password is neither passed as parameters nor stored in environment variables.\n\n    Here's an example of a non-MFA user authenticating and generating a new token\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import User, Client\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Print the logged-in user details\n        print(User.details())\n        ```\n\n    Here's an example of a MFA user authenticating using SMS OTP and generating a new token\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Request OTP via SMS to authenticate\n        # If you want to use the OTP from the authenticator app, skip this step and\n        # don't generate an SMS OTP; instead, pass the OTP from the authenticator\n        # app to the get_token method below\n        username=\"{fill in username}\"\n        User.send_sms_otp(\n            username=username,\n            message_template_name=\"get_token\" # Don't change the message_template_name\n        )\n\n        # Authenticate using SMS OTP\n        # The send_sms_otp method will send the OTP via SMS to the registered\n        # phone number, which you must fill below\n        password=\"{fill in password}\"\n        otp=\"{fill in otp}\"\n        Client.get_token(username=username, password=password, otp=otp)\n\n        # Print the logged-in user details\n        print(User.details())\n        ```\n    \"\"\"\n    cls.server = get_base_url(server)\n\n    username, password = _get_credentials(username, password)\n\n    if otp is not None:\n        password = json.dumps({\"password\": password, \"user_otp\": otp})\n\n    if sso_provider is None:\n        response = post_data(\n            url=f\"{cls.server}/token\",\n            data=dict(username=username, password=password),\n            token=None,\n        )\n\n        cls.auth_token = response[\"access_token\"]\n    else:\n        response = post_data(\n            url=f\"{cls.server}/sso/initiate\",\n            data=json.dumps(  # type: ignore\n                dict(\n                    username=username, password=password, sso_provider=sso_provider\n                )\n            ),\n            token=None,\n        )\n\n        cls.sso_authorization_url = response[\"authorization_url\"]\n        return cls.sso_authorization_url\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.Client.set_sso_token","title":"<code>set_sso_token()</code>  <code>classmethod</code>","text":"<p>Set the application token generated using Single sign-on (SSO).</p> <p>The token set using this method will be implicitly used in all the interactions with the server.</p> <p>Please call this method only if you successfully enabled and completed the login with the Single sign-on (SSO) provider. If not, please call the <code>get_token</code> method with an appropriate sso_provider to initiate the SSO authentication.</p> <p>Here's an example of authenticating with Single sign-on (SSO) using google and setting the newly generated token to interact with the captn service.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, User\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Enable single sign-on (SSO) and use google as the provider\nsso_provider=\"google\"\nsso_email=\"{fill in sso_email}\"\nUser.enable_sso(sso_provider=sso_provider, sso_email=sso_email)\n\n# Authenticate using Single sign-on (SSO)\n# To generate a token using SSO, you must first authenticate with the provider.\n# The command below will generate an authorization URL for you.\n# Please copy and paste it into your preferred browser and complete the\n# SSO provider authentication within 10 minutes. Otherwise, the SSO login\n# will time out and you will need to call the get_token method again.\nsso_url = Client.get_token(sso_provider=sso_provider)\nprint(sso_url)\n\n# Once the provider authentication is successful, call the below method to\n# set the generated token\nClient.set_sso_token()\n\n# If set_sso_token fails, the line below will throw an error.\nprint(User.details())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@classmethod\ndef set_sso_token(cls):\n\"\"\"Set the application token generated using Single sign-on (SSO).\n\n    The token set using this method will be implicitly used in all the interactions with the server.\n\n    Please call this method only if you successfully enabled and completed the login with the Single\n    sign-on (SSO) provider. If not, please call the `get_token` method with an appropriate\n    sso_provider to initiate the SSO authentication.\n\n    Here's an example of authenticating with Single sign-on (SSO) using google and setting the\n    newly generated token to interact with the airt service.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Enable single sign-on (SSO) and use google as the provider\n        sso_provider=\"google\"\n        sso_email=\"{fill in sso_email}\"\n        User.enable_sso(sso_provider=sso_provider, sso_email=sso_email)\n\n        # Authenticate using Single sign-on (SSO)\n        # To generate a token using SSO, you must first authenticate with the provider.\n        # The command below will generate an authorization URL for you.\n        # Please copy and paste it into your preferred browser and complete the\n        # SSO provider authentication within 10 minutes. Otherwise, the SSO login\n        # will time out and you will need to call the get_token method again.\n        sso_url = Client.get_token(sso_provider=sso_provider)\n        print(sso_url)\n\n        # Once the provider authentication is successful, call the below method to\n        # set the generated token\n        Client.set_sso_token()\n\n        # If set_sso_token fails, the line below will throw an error.\n        print(User.details())\n        ```\n    \"\"\"\n    quoted_authorization_url = urllib.parse.quote(cls.sso_authorization_url)\n    response = get_data(\n        url=f\"{cls.server}/sso/token/?authorization_url={quoted_authorization_url}\",\n        token=None,\n    )\n\n    cls.auth_token = response[\"access_token\"]\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.Client.set_token","title":"<code>set_token(token=None, server=None)</code>  <code>classmethod</code>","text":"<p>Set application token for captn service.</p> <p>If you already have a valid token, you can call this method to set it and use it in all subsequent interactions with the captn server.</p> <p>Please call this method only if you already have a token. If not, please call the <code>get_token</code> method to generate one.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>Optional[str]</code> <p>The application token obtained by calling the <code>get_token</code> method, or an APIKey obtained by calling the <code>APIKey.create</code> method. If None (default value), then the value from CAPTN_SERVICE_TOKEN environment variable is used.</p> <code>None</code> <code>server</code> <code>Optional[str]</code> <p>The captn server uri. If None (default value), then the value from CAPTN_SERVER_URL environment variable is used. If the variable is not set as well, then the default public server will be used. Please leave this setting to default unless you are running the service in your own server (please email us to info@captn.ai for that possibility).</p> <code>None</code> <p>An example to set an existing token:</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, User\n\n# Optional Step: For demonstration purpose, generate a new token\n# When you generate a new token with the get_token method, you do not\n# need to explicitly call set_token. It is shown here for demo purposes only.\n# Skip this step if you already have a valid token and pass it directly to\n# the set_token method below\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Setting a valid token\nClient.set_token(token=Client.auth_token)\n\n# If set_token fails, the line below will throw an error.\nprint(User.details())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@classmethod\ndef set_token(cls, token: Optional[str] = None, server: Optional[str] = None):\n\"\"\"Set application token for airt service.\n\n    If you already have a valid token, you can call this method to set it and use it in all\n    subsequent interactions with the airt server.\n\n    Please call this method only if you already have a token. If not, please call the `get_token` method to generate one.\n\n    Args:\n        token: The application token obtained by calling the `get_token` method, or an APIKey obtained by calling\n            the `APIKey.create` method. If None (default value), then the value from **AIRT_SERVICE_TOKEN** environment variable is used.\n        server: The airt server uri. If None (default value), then the value from **AIRT_SERVER_URL** environment variable\n            is used. If the variable is not set as well, then the default public server will be used. Please leave this\n            setting to default unless you are running the service in your own server (please email us to info@airt.ai\n            for that possibility).\n\n    An example to set an existing token:\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Optional Step: For demonstration purpose, generate a new token\n        # When you generate a new token with the get_token method, you do not\n        # need to explicitly call set_token. It is shown here for demo purposes only.\n        # Skip this step if you already have a valid token and pass it directly to\n        # the set_token method below\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Setting a valid token\n        Client.set_token(token=Client.auth_token)\n\n        # If set_token fails, the line below will throw an error.\n        print(User.details())\n        ```\n    \"\"\"\n\n    auth_token = token if token is not None else os.environ.get(SERVICE_TOKEN)\n\n    if not auth_token:\n        raise KeyError(\n            f\"The token is neither passed as parameter nor set in the environment variable {SERVICE_TOKEN}.\"\n        )\n\n    cls.auth_token = auth_token\n    cls.server = get_base_url(server)\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.Client.version","title":"<code>version()</code>  <code>staticmethod</code>","text":"<p>Return the client and server versions.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dict containing the client and server versions.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>An example to get the client and server versions:</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client\n\n# Get the client and server versions\nprint(Client.version())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef version() -&gt; dict:\n\"\"\"Return the client and server versions.\n\n    Returns:\n        A dict containing the client and server versions.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n\n    An example to get the client and server versions:\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client\n\n        # Get the client and server versions\n        print(Client.version())\n        ```\n    \"\"\"\n\n    response = Client._get_data(relative_url=f\"/version\")\n\n    version = {\n        # nosemgrep: python.lang.security.audit.non-literal-import.non-literal-import\n        \"client\": importlib.import_module(CLIENT_NAME).__version__,\n        \"server\": response[\"airt_service\"],\n    }\n\n    return version\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataBlob","title":"<code> DataBlob        </code>","text":"<p>A class for importing and processing data from sources such as CSV/parquet files, databases, AWS S3 buckets, and Azure Blob Storage.</p> <p>Currently, the only way to instantiate the DataBlob class is to call one of the following static methods <code>from_local</code>, <code>from_mysql</code>, <code>from_clickhouse</code>, <code>from_s3</code>, or <code>from_azure_blob_storage</code> which imports the data in the parquet file format from:</p> <ul> <li> <p>a local CSV/parquet file,</p> </li> <li> <p>a MySql database,</p> </li> <li> <p>a ClickHouse database</p> </li> <li> <p>an AWS S3 bucket, and</p> </li> <li> <p>an Azure Blob Storage respectively.</p> </li> </ul> <p>We intend to support additional databases and storage mediums in future releases.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\ndb.progress_bar()\n\n# Display the ready status\n# If the datablob is successfully uploaded, True will be returned.\nprint(db.is_ready())\n\n# Print the details of the newly created datablob\nprint(db.details())\n\n# Display the details of all datablob created by the currently\n# logged-in user\nprint(DataBlob.as_df(DataBlob.ls()))\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Display the head of the data to ensure everything is fine.\nprint(ds.head())\n\n# Tag the datablob\nprint(db.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datablob\nprint(db.delete())\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataBlob.__init__","title":"<code>__init__(self, uuid, type=None, source=None, region=None, cloud_provider=None, datasources=None, total_steps=None, completed_steps=None, folder_size=None, disabled=None, pulled_on=None, user=None, tags=None, error=None)</code>  <code>special</code>","text":"<p>Constructs a new DataBlob instance.</p> <p>Warning</p> <p>Do not construct this object directly by calling the constructor, please use <code>from_s3</code>, <code>from_azure_blob_storage</code>, <code>from_mysql</code>, <code>from_clickhouse</code> or <code>from_local</code> methods instead.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>str</code> <p>Datablob uuid.</p> required <code>source</code> <code>Optional[str]</code> <p>The URI of the data that was used to create the datablob.</p> <code>None</code> <code>type</code> <code>Optional[str]</code> <p>The type of source used to generate the datablob. Depending on the source type, one of the following values will be assigned: \"s3\", \"local\", \"db\", or \"azure_blob_storage\".</p> <code>None</code> <code>region</code> <code>Optional[str]</code> <p>The destination cloud provider's region to store the datablob. If None (default value) then the default region will be assigned based on the cloud provider.</p> <code>None</code> <code>cloud_provider</code> <code>Optional[str]</code> <p>Cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers.</p> <code>None</code> <code>datasources</code> <code>Optional[List[str]]</code> <p>The uuids of the datasources created from the datablob.</p> <code>None</code> <code>total_steps</code> <code>Optional[int]</code> <p>The number of steps required to upload the datablob to the server.</p> <code>None</code> <code>completed_steps</code> <code>Optional[int]</code> <p>The number of steps completed during the datablob's upload to the server.</p> <code>None</code> <code>folder_size</code> <code>Optional[int]</code> <p>The uploaded datablob's size in bytes.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>A flag that indicates the datablob's status. If the datablob is deleted, then False will be set.</p> <code>None</code> <code>pulled_on</code> <code>Optional[str]</code> <p>The most recent date the datablob was uploaded.</p> <code>None</code> <code>user</code> <code>Optional[str]</code> <p>The uuid of the user who created the datablob.</p> <code>None</code> <code>tags</code> <code>Optional[List]</code> <p>Tag names associated with the datablob.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Contains the error message if the processing of the datablob fails.</p> <code>None</code> Source code in <code>captn/client.py</code> <pre><code>def __init__(\n    self,\n    uuid: str,\n    type: Optional[str] = None,\n    source: Optional[str] = None,\n    region: Optional[str] = None,\n    cloud_provider: Optional[str] = None,\n    datasources: Optional[List[str]] = None,\n    total_steps: Optional[int] = None,\n    completed_steps: Optional[int] = None,\n    folder_size: Optional[int] = None,\n    disabled: Optional[bool] = None,\n    pulled_on: Optional[str] = None,\n    user: Optional[str] = None,\n    tags: Optional[List] = None,\n    error: Optional[str] = None,\n):\n\"\"\"Constructs a new DataBlob instance.\n\n    Warning:\n        Do not construct this object directly by calling the constructor, please use `from_s3`, `from_azure_blob_storage`,\n        `from_mysql`, `from_clickhouse` or `from_local` methods instead.\n\n    Args:\n        uuid: Datablob uuid.\n        source: The URI of the data that was used to create the datablob.\n        type: The type of source used to generate the datablob. Depending on the source type, one of the following\n            values will be assigned: \"s3\", \"local\", \"db\", or \"azure_blob_storage\".\n        region: The destination cloud provider's region to store the datablob. If None (default value) then the default region will be assigned based on the cloud provider.\n        cloud_provider: Cloud storage provider's name to store the datablob. Currently, the API only supports **aws** and **azure** as cloud storage providers.\n        datasources: The uuids of the datasources created from the datablob.\n        total_steps: The number of steps required to upload the datablob to the server.\n        completed_steps: The number of steps completed during the datablob's upload to the server.\n        folder_size: The uploaded datablob's size in bytes.\n        disabled: A flag that indicates the datablob's status. If the datablob is deleted, then **False** will be set.\n        pulled_on: The most recent date the datablob was uploaded.\n        user: The uuid of the user who created the datablob.\n        tags: Tag names associated with the datablob.\n        error: Contains the error message if the processing of the datablob fails.\n    \"\"\"\n    self.uuid = uuid\n    self.type = type\n    self.source = source\n    self.region = region\n    self.cloud_provider = cloud_provider\n    self.datasources = datasources\n    self.total_steps = total_steps\n    self.completed_steps = completed_steps\n    self.folder_size = folder_size\n    self.disabled = disabled\n    self.pulled_on = pulled_on\n    self.user = user\n    self.tags = tags\n    self.error = error\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataBlob.as_df","title":"<code>as_df(dbx)</code>  <code>staticmethod</code>","text":"<p>Return the details of datablob instances as a pandas dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>dbx</code> <code>List[DataBlob]</code> <p>List of datablob instances.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Details of all the datablobs in a dataframe.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\ndb.progress_bar()\n\n# Display the ready status\n# If the datablob is successfully uploaded, True will be returned.\nprint(db.is_ready())\n\n# Print the details of the newly created datablob\nprint(db.details())\n\n# Display the details of all datablob created by the currently\n# logged-in user\nprint(DataBlob.as_df(DataBlob.ls()))\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Display the head of the data to ensure everything is fine.\nprint(ds.head())\n\n# Tag the datablob\nprint(db.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datablob\nprint(db.delete())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef as_df(dbx: List[\"DataBlob\"]) -&gt; pd.DataFrame:\n\"\"\"Return the details of datablob instances as a pandas dataframe.\n\n    Args:\n        dbx: List of datablob instances.\n\n    Returns:\n        Details of all the datablobs in a dataframe.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    db_lists = get_attributes_from_instances(dbx, DataBlob.ALL_DB_COLS)  # type: ignore\n\n    for db in db_lists:\n        db = DataBlob._get_tag_name_and_datasource_id(db)\n\n    lists_df = generate_df(db_lists, DataBlob.BASIC_DB_COLS)\n    df = add_ready_column(lists_df)\n\n    df = df.rename(columns=DataBlob.COLS_TO_RENAME)\n\n    return df\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataBlob.delete","title":"<code>delete(self)</code>","text":"<p>Delete a datablob from the server.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame encapsulating the details of the deleted datablob.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\ndb.progress_bar()\n\n# Display the ready status\n# If the datablob is successfully uploaded, True will be returned.\nprint(db.is_ready())\n\n# Print the details of the newly created datablob\nprint(db.details())\n\n# Display the details of all datablob created by the currently\n# logged-in user\nprint(DataBlob.as_df(DataBlob.ls()))\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Display the head of the data to ensure everything is fine.\nprint(ds.head())\n\n# Tag the datablob\nprint(db.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datablob\nprint(db.delete())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@patch\ndef delete(self: DataBlob) -&gt; pd.DataFrame:\n\"\"\"Delete a datablob from the server.\n\n    Returns:\n        A pandas DataFrame encapsulating the details of the deleted datablob.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n\n    response = Client._delete_data(relative_url=f\"/datablob/{self.uuid}\")\n\n    response = DataBlob._get_tag_name_and_datasource_id(response)\n\n    df = pd.DataFrame([response])[DataBlob.BASIC_DB_COLS]\n\n    df = df.rename(columns=DataBlob.COLS_TO_RENAME)\n\n    return add_ready_column(df)\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataBlob.details","title":"<code>details(self)</code>","text":"<p>Return details of a datablob.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The datablob details as a pandas dataframe.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\ndb.progress_bar()\n\n# Display the ready status\n# If the datablob is successfully uploaded, True will be returned.\nprint(db.is_ready())\n\n# Print the details of the newly created datablob\nprint(db.details())\n\n# Display the details of all datablob created by the currently\n# logged-in user\nprint(DataBlob.as_df(DataBlob.ls()))\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Display the head of the data to ensure everything is fine.\nprint(ds.head())\n\n# Tag the datablob\nprint(db.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datablob\nprint(db.delete())\n</code></pre> <p>Columns in the resulting dataframe are: uuid, datasources, type, source, region, cloud_provider, tags, pulled_on, completed_steps, total_steps, folder_size, user, error, disabled.</p> Source code in <code>captn/client.py</code> <pre><code>@patch\ndef details(self: DataBlob) -&gt; pd.DataFrame:\n\"\"\"Return details of a datablob.\n\n    Returns:\n        The datablob details as a pandas dataframe.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n\n    details = Client._get_data(relative_url=f\"/datablob/{self.uuid}\")\n\n    details = DataBlob._get_tag_name_and_datasource_id(details)\n\n    details_df = pd.DataFrame([details])[DataBlob.ALL_DB_COLS]\n\n    details_df = details_df.rename(columns=DataBlob.COLS_TO_RENAME)\n\n    return add_ready_column(details_df)\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataBlob.from_azure_blob_storage","title":"<code>from_azure_blob_storage(uri, credential, cloud_provider=None, region=None, tag=None)</code>  <code>classmethod</code>","text":"<p>Create and return a datablob that encapsulates the data from an Azure Blob Storage.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>Azure Blob Storage URI of the source file.</p> required <code>credential</code> <code>str</code> <p>Credential to access the Azure Blob Storage.</p> required <code>cloud_provider</code> <code>Optional[str]</code> <p>The destination cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers. If None (default value), then azure  will be used as the cloud storage provider.</p> <code>None</code> <code>region</code> <code>Optional[str]</code> <p>The destination cloud provider's region to store the datablob. If None (default value) then the default region will be assigned based on the cloud provider. In the case of aws, eu-west-1 will be used and in the case of azure, westeurope will be used. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</p> <code>None</code> <code>tag</code> <code>Optional[str]</code> <p>A string to tag the datablob. If not passed, then the tag latest will be assigned to the datablob.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataBlob</code> <p>An instance of the <code>DataBlob</code> class.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If parameters to the API are invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>To create a Datablob from Azure Blob Storage, you must have a valid Azure Blob Storage credential.</p> <p>If you don't know how to get the Azure Blob Storage credential, you can follow the below python example. It's one of the ways to get the Azure Blob Storage credential.</p> <ul> <li> <p>If you don't already have it, please install the Azure Storage Management (azure-mgmt-storage) and Azure Resource Management (azure-mgmt-resource) python client libraries using pip.</p> </li> <li> <p>Ensure the following four environment variables are set into your current working environment with appropriate values.</p> <ul> <li> <p>AZURE_TENANT_ID</p> </li> <li> <p>AZURE_CLIENT_ID</p> </li> <li> <p>AZURE_CLIENT_SECRET</p> </li> <li> <p>AZURE_SUBSCRIPTION_ID</p> </li> </ul> </li> <li> <p>Assign the resource group name in the GROUP_NAME variable and the storage account name in the STORAGE_ACCOUNT_NAME variable.</p> </li> <li> <p>Below is a sample code to create a datablob and storing it in S3. Please copy it and replace the placeholders with appropriate values</p> </li> </ul> <p>Examples:</p> <pre><code># Importing necessary libraries\nimport os\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storage import StorageManagementClient\n\nfrom  captn.client import Client, DataBlob\n\n# Create a credential for accessing Azure Blob Storage\n# Setting the required environment variables\nos.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"\nos.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"\nos.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"\nos.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"\n\n# Setting the resource group name and storage account name\nazure_group_name = \"{fill in azure_group_name}\"\nazure_storage_account_name = \"{fill in azure_storage_account_name}\"\n\n# Retrieving the credential\nazure_storage_client = StorageManagementClient(\n    DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n)\nazure_storage_keys = azure_storage_client.storage_accounts.list_keys(\n    azure_group_name, azure_storage_account_name\n)\nazure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}\ncredential = azure_storage_keys['key1']\n\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The region\n# is set to eu-west-1 (default), feel free to change the cloud provider and\n# the region to suit your needs.\ndb = DataBlob.from_azure_blob_storage(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    credential=credential\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Print the details of the newly created datablob\n# If the upload is successful, the ready flag should be set to True\nprint(db.details())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@classmethod\ndef from_azure_blob_storage(\n    cls,\n    uri: str,\n    credential: str,\n    cloud_provider: Optional[str] = None,\n    region: Optional[str] = None,\n    tag: Optional[str] = None,\n) -&gt; \"DataBlob\":\n\"\"\"Create and return a datablob that encapsulates the data from an Azure Blob Storage.\n\n    Args:\n        uri: Azure Blob Storage URI of the source file.\n        credential: Credential to access the Azure Blob Storage.\n        cloud_provider: The destination cloud storage provider's name to store the datablob. Currently, the API only supports **aws** and **azure** as cloud storage providers.\n            If **None** (default value), then **azure**  will be used as the cloud storage provider.\n        region: The destination cloud provider's region to store the datablob. If **None** (default value) then the default region will be assigned based on the cloud\n            provider. In the case of **aws**, **eu-west-1** will be used and in the case of **azure**, **westeurope** will be used. The supported AWS regions\n            are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1,\n            us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast,\n            brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast,\n            japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia,\n            switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.\n        tag: A string to tag the datablob. If not passed, then the tag **latest** will be assigned to the datablob.\n\n    Returns:\n        An instance of the `DataBlob` class.\n\n    Raises:\n        ValueError: If parameters to the API are invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    To create a Datablob from Azure Blob Storage, you must have a valid Azure Blob Storage credential.\n\n    If you don't know how to get the Azure Blob Storage credential, you can follow the below python example. It's one of the ways to get the Azure Blob Storage credential.\n\n    - If you don't already have it, please install the Azure Storage Management (azure-mgmt-storage) and Azure Resource Management (azure-mgmt-resource) python client libraries using pip.\n\n    - Ensure the following four environment variables are set into your current working environment with appropriate values.\n\n        - AZURE_TENANT_ID\n\n        - AZURE_CLIENT_ID\n\n        - AZURE_CLIENT_SECRET\n\n        - AZURE_SUBSCRIPTION_ID\n\n    - Assign the resource group name in the GROUP_NAME variable and the storage account name in the STORAGE_ACCOUNT_NAME variable.\n\n    - Below is a sample code to create a datablob and storing it in S3. Please copy it and replace the placeholders with appropriate values\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        import os\n\n        from azure.identity import DefaultAzureCredential\n        from azure.mgmt.storage import StorageManagementClient\n\n        from  airt.client import Client, DataBlob\n\n        # Create a credential for accessing Azure Blob Storage\n        # Setting the required environment variables\n        os.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"\n        os.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"\n        os.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"\n        os.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"\n\n        # Setting the resource group name and storage account name\n        azure_group_name = \"{fill in azure_group_name}\"\n        azure_storage_account_name = \"{fill in azure_storage_account_name}\"\n\n        # Retrieving the credential\n        azure_storage_client = StorageManagementClient(\n            DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n        )\n        azure_storage_keys = azure_storage_client.storage_accounts.list_keys(\n            azure_group_name, azure_storage_account_name\n        )\n        azure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}\n        credential = azure_storage_keys['key1']\n\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a datablob\n        # In this example, the datablob will be stored in an AWS S3 bucket. The region\n        # is set to eu-west-1 (default), feel free to change the cloud provider and\n        # the region to suit your needs.\n        db = DataBlob.from_azure_blob_storage(\n            uri=\"{fill in uri}\",\n            cloud_provider=\"aws\",\n            credential=credential\n        )\n\n        # Display the status in a progress bar\n        db.progress_bar()\n\n        # Print the details of the newly created datablob\n        # If the upload is successful, the ready flag should be set to True\n        print(db.details())\n        ```\n    \"\"\"\n    cloud_provider, region = DataBlob._get_cloud_provider_and_region(cloud_provider=cloud_provider, region=region, default_cloud_provider=\"azure\")  # type: ignore\n\n    response = Client._post_data(\n        relative_url=\"/datablob/from_azure_blob_storage\",\n        json=dict(\n            uri=uri,\n            credential=credential,\n            region=region,\n            cloud_provider=cloud_provider,\n            tag=tag,\n        ),\n    )\n\n    return DataBlob(\n        uuid=response[\"uuid\"], type=response[\"type\"], source=response[\"source\"]\n    )\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataBlob.from_clickhouse","title":"<code>from_clickhouse(*, host, database, table, protocol, index_column, timestamp_column, port=0, cloud_provider=None, region=None, username=None, password=None, filters=None, tag=None)</code>  <code>staticmethod</code>","text":"<p>Create and return a datablob that encapsulates the data from a ClickHouse database.</p> <p>If the database requires authentication, pass the username/password as parameters or store it in the CLICKHOUSE_USERNAME and CLICKHOUSE_PASSWORD environment variables.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>Remote database host name.</p> required <code>database</code> <code>str</code> <p>Database name.</p> required <code>table</code> <code>str</code> <p>Table name.</p> required <code>protocol</code> <code>str</code> <p>Protocol to use. The valid values are \"native\" and \"http\".</p> required <code>index_column</code> <code>str</code> <p>The column to use as index (row labels).</p> required <code>timestamp_column</code> <code>str</code> <p>Timestamp column name in the tabel.</p> required <code>port</code> <code>int</code> <p>Host port number. If not passed, then the default value 0 will be used.</p> <code>0</code> <code>cloud_provider</code> <code>Optional[str]</code> <p>The destination cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers. If None (default value), then aws  will be used as the cloud storage provider.</p> <code>None</code> <code>region</code> <code>Optional[str]</code> <p>The destination cloud provider's region to store the datablob. If None (default value) then the default region will be assigned based on the cloud provider. In the case of aws, eu-west-1 will be used and in the case of azure, westeurope will be used. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</p> <code>None</code> <code>username</code> <code>Optional[str]</code> <p>Database username. If not passed, the default value \"root\" will be used unless the value is explicitly set in the environment variable CLICKHOUSE_USERNAME.</p> <code>None</code> <code>password</code> <code>Optional[str]</code> <p>Database password. If not passed, the default value \"root\" will be used unless the value is explicitly set in the environment variable CLICKHOUSE_PASSWORD.</p> <code>None</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Additional parameters to be used when importing data. For example, if you want to filter and extract data only for a specific user_id, pass {\"user_id\": 1}.</p> <code>None</code> <code>tag</code> <code>Optional[str]</code> <p>A string to tag the datablob. If not passed, then the tag latest will be assigned to the datablob.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataBlob</code> <p>An instance of the <code>DataBlob</code> class.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If parameters to the API are invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example of how to create a Datablob from a ClickHouse database:</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The region\n# is set to eu-west-3, feel free to change the cloud provider and the region\n# to suit your needs.\ndb = DataBlob.from_clickhouse(\n    username=\"{fill in database_username}\",\n    password=\"{fill in database_password}\",\n    host=\"{fill in host}\",\n    database=\"{fill in database}\",\n    table=\"{fill in table}\",\n    index_column=\"{fill in index_column}\",\n    timestamp_column=\"{fill in timestamp_column}\",\n    port=\"{fill in port}\",\n    filters={fill in filters},\n    protocol=\"native\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Print the details of the newly created datablob\n# If the upload is successful, the ready flag should be set to True\nprint(db.details())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef from_clickhouse(\n    *,\n    host: str,\n    database: str,\n    table: str,\n    protocol: str,\n    index_column: str,\n    timestamp_column: str,\n    port: int = 0,\n    cloud_provider: Optional[str] = None,\n    region: Optional[str] = None,\n    username: Optional[str] = None,\n    password: Optional[str] = None,\n    filters: Optional[Dict[str, Any]] = None,\n    tag: Optional[str] = None,\n) -&gt; \"DataBlob\":\n\"\"\"Create and return a datablob that encapsulates the data from a ClickHouse database.\n\n    If the database requires authentication, pass the username/password as parameters or store it in\n    the **CLICKHOUSE_USERNAME** and **CLICKHOUSE_PASSWORD** environment variables.\n\n    Args:\n        host: Remote database host name.\n        database: Database name.\n        table: Table name.\n        protocol: Protocol to use. The valid values are \"native\" and \"http\".\n        index_column: The column to use as index (row labels).\n        timestamp_column: Timestamp column name in the tabel.\n        port: Host port number. If not passed, then the default value **0** will be used.\n        cloud_provider: The destination cloud storage provider's name to store the datablob. Currently, the API only supports **aws** and **azure** as cloud storage providers.\n            If **None** (default value), then **aws**  will be used as the cloud storage provider.\n        region: The destination cloud provider's region to store the datablob. If **None** (default value) then the default region will be assigned based on the cloud\n            provider. In the case of **aws**, **eu-west-1** will be used and in the case of **azure**, **westeurope** will be used. The supported AWS regions\n            are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1,\n            us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast,\n            brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast,\n            japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia,\n            switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.\n        username: Database username. If not passed, the default value \"root\" will be used unless the value is explicitly set in the environment variable\n            **CLICKHOUSE_USERNAME**.\n        password: Database password. If not passed, the default value \"root\" will be used unless the value is explicitly set in the environment variable\n            **CLICKHOUSE_PASSWORD**.\n        filters: Additional parameters to be used when importing data. For example, if you want to filter and extract data only for a specific user_id, pass {\"user_id\": 1}.\n        tag: A string to tag the datablob. If not passed, then the tag **latest** will be assigned to the datablob.\n\n    Returns:\n       An instance of the `DataBlob` class.\n\n    Raises:\n        ValueError: If parameters to the API are invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example of how to create a Datablob from a ClickHouse database:\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, DataBlob\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a datablob\n        # In this example, the datablob will be stored in an AWS S3 bucket. The region\n        # is set to eu-west-3, feel free to change the cloud provider and the region\n        # to suit your needs.\n        db = DataBlob.from_clickhouse(\n            username=\"{fill in database_username}\",\n            password=\"{fill in database_password}\",\n            host=\"{fill in host}\",\n            database=\"{fill in database}\",\n            table=\"{fill in table}\",\n            index_column=\"{fill in index_column}\",\n            timestamp_column=\"{fill in timestamp_column}\",\n            port=\"{fill in port}\",\n            filters={fill in filters},\n            protocol=\"native\",\n            cloud_provider=\"aws\",\n            region=\"eu-west-3\"\n        )\n\n        # Display the status in a progress bar\n        db.progress_bar()\n\n        # Print the details of the newly created datablob\n        # If the upload is successful, the ready flag should be set to True\n        print(db.details())\n        ```\n    \"\"\"\n    username = (\n        username\n        if username is not None\n        else os.environ.get(\"CLICKHOUSE_USERNAME\", \"root\")\n    )\n\n    password = (\n        password\n        if password is not None\n        else os.environ.get(\"CLICKHOUSE_PASSWORD\", \"\")\n    )\n\n    cloud_provider, region = DataBlob._get_cloud_provider_and_region(cloud_provider, region)  # type: ignore\n\n    json_req = dict(\n        host=host,\n        database=database,\n        table=table,\n        protocol=protocol,\n        port=port,\n        username=username,\n        password=password,\n        index_column=index_column,\n        timestamp_column=timestamp_column,\n        filters=filters,\n        region=region,\n        cloud_provider=cloud_provider,\n        tag=tag,\n    )\n\n    response = Client._post_data(\n        relative_url=f\"/datablob/from_clickhouse\", json=json_req\n    )\n\n    return DataBlob(\n        uuid=response[\"uuid\"], type=response[\"type\"], source=response[\"source\"]\n    )\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataBlob.from_local","title":"<code>from_local(path, cloud_provider=None, region=None, tag=None, show_progress=True)</code>  <code>staticmethod</code>","text":"<p>Create and return a datablob from local file.</p> <p>The API currently allows users to create datablobs from CSV or Parquet files. We intend to support additional file formats in future releases.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, pathlib.Path]</code> <p>The relative or absolute path to a local file or to a directory containing the source files.</p> required <code>cloud_provider</code> <code>Optional[str]</code> <p>The destination cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers. If None (default value), then aws  will be used as the cloud storage provider.</p> <code>None</code> <code>region</code> <code>Optional[str]</code> <p>The destination cloud provider's region to store the datablob. If None (default value) then the default region will be assigned based on the cloud provider. In the case of aws, eu-west-1 will be used and in the case of azure, westeurope will be used. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</p> <code>None</code> <code>tag</code> <code>Optional[str]</code> <p>A string to tag the datablob. If not passed, then the tag latest will be assigned to the datablob.</p> <code>None</code> <code>show_progress</code> <code>Optional[bool]</code> <p>Flag to set the progressbar visibility. If not passed, then the default value True will be used.</p> <code>True</code> <p>Returns:</p> Type Description <code>DataBlob</code> <p>An instance of the <code>DataBlob</code> class.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If parameters to the API are invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example of how to create a Datablob from a local file:</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The region\n# is set to eu-west-3, feel free to change the cloud provider and the region\n# to suit your needs.\ndb = DataBlob.from_local(\n    path=\"{fill in path}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Print the details of the newly created datablob\n# If the upload is successful, the ready flag should be set to True\nprint(db.details())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef from_local(\n    path: Union[str, Path],\n    cloud_provider: Optional[str] = None,\n    region: Optional[str] = None,\n    tag: Optional[str] = None,\n    show_progress: Optional[bool] = True,\n) -&gt; \"DataBlob\":\n\"\"\"Create and return a datablob from local file.\n\n    The API currently allows users to create datablobs from CSV or Parquet files. We intend to support additional file formats in future releases.\n\n    Args:\n        path: The relative or absolute path to a local file or to a directory containing the source files.\n        cloud_provider: The destination cloud storage provider's name to store the datablob. Currently, the API only supports **aws** and **azure** as cloud storage providers.\n            If **None** (default value), then **aws**  will be used as the cloud storage provider.\n        region: The destination cloud provider's region to store the datablob. If **None** (default value) then the default region will be assigned based on the cloud\n            provider. In the case of **aws**, **eu-west-1** will be used and in the case of **azure**, **westeurope** will be used. The supported AWS regions\n            are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1,\n            us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast,\n            brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast,\n            japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia,\n            switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.\n        tag: A string to tag the datablob. If not passed, then the tag **latest** will be assigned to the datablob.\n        show_progress: Flag to set the progressbar visibility. If not passed, then the default value **True** will be used.\n\n    Returns:\n       An instance of the `DataBlob` class.\n\n    Raises:\n        ValueError: If parameters to the API are invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example of how to create a Datablob from a local file:\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, DataBlob\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a datablob\n        # In this example, the datablob will be stored in an AWS S3 bucket. The region\n        # is set to eu-west-3, feel free to change the cloud provider and the region\n        # to suit your needs.\n        db = DataBlob.from_local(\n            path=\"{fill in path}\",\n            cloud_provider=\"aws\",\n            region=\"eu-west-3\"\n        )\n\n        # Display the status in a progress bar\n        db.progress_bar()\n\n        # Print the details of the newly created datablob\n        # If the upload is successful, the ready flag should be set to True\n        print(db.details())\n\n        ```\n    \"\"\"\n    path = Path(path)\n    cloud_provider, region = DataBlob._get_cloud_provider_and_region(cloud_provider, region)  # type: ignore\n\n    # Step 1: get presigned URL\n    _path = f\"local:{str(path)}\"\n\n    response = Client._post_data(\n        relative_url=f\"/datablob/from_local/start\",\n        json=dict(\n            path=_path, region=region, cloud_provider=cloud_provider, tag=tag\n        ),\n    )\n\n    # Step 2: download the csv to the s3 bucket\n    files = list(path.glob(\"*\")) if path.is_dir() else [path]\n\n    # Initiate progress bar\n    t = tqdm(total=len(files), disable=not show_progress)\n\n    for file_to_upload in files:\n        DataBlob._upload_to_s3_with_retry(\n            file_to_upload=file_to_upload,\n            presigned_url=response[\"presigned\"][\"url\"],\n            presigned_fields=response[\"presigned\"][\"fields\"],\n        )\n        t.update()\n\n    t.close()\n    return DataBlob(uuid=response[\"uuid\"], type=response[\"type\"])\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataBlob.from_mysql","title":"<code>from_mysql(*, host, database, table, port=3306, cloud_provider=None, region=None, username=None, password=None, tag=None)</code>  <code>staticmethod</code>","text":"<p>Create and return a datablob that encapsulates the data from a mysql database.</p> <p>If the database requires authentication, pass the username/password as parameters or store it in the CAPTN_CLIENT_DB_USERNAME and CAPTN_CLIENT_DB_PASSWORD environment variables.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>Remote database host name.</p> required <code>database</code> <code>str</code> <p>Database name.</p> required <code>table</code> <code>str</code> <p>Table name.</p> required <code>port</code> <code>int</code> <p>Host port number. If not passed, then the default value 3306 will be used.</p> <code>3306</code> <code>cloud_provider</code> <code>Optional[str]</code> <p>The destination cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers. If None (default value), then aws  will be used as the cloud storage provider.</p> <code>None</code> <code>region</code> <code>Optional[str]</code> <p>The destination cloud provider's region to store the datablob. If None (default value) then the default region will be assigned based on the cloud provider. In the case of aws, eu-west-1 will be used and in the case of azure, westeurope will be used. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</p> <code>None</code> <code>username</code> <code>Optional[str]</code> <p>Database username. If not passed, the default value \"root\" will be used unless the value is explicitly set in the environment variable CAPTN_CLIENT_DB_USERNAME.</p> <code>None</code> <code>password</code> <code>Optional[str]</code> <p>Database password. If not passed, the default value \"\" will be used unless the value is explicitly set in the environment variable CAPTN_CLIENT_DB_PASSWORD.</p> <code>None</code> <code>tag</code> <code>Optional[str]</code> <p>A string to tag the datablob. If not passed, then the tag latest will be assigned to the datablob.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataBlob</code> <p>An instance of the <code>DataBlob</code> class.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If parameters to the API are invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example of how to create a Datablob from a MySQL database:</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The region\n# is set to eu-west-3, feel free to change the cloud provider and the region\n# to suit your needs.\ndb = DataBlob.from_mysql(\n    username=\"{fill in database_username}\",\n    password=\"{fill in database_password}\",\n    host=\"{fill in host}\",\n    database=\"{fill in database}\",\n    table=\"{fill in table}\",\n    port=\"{fill in port}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Print the details of the newly created datablob\n# If the upload is successful, the ready flag should be set to True\nprint(db.details())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef from_mysql(\n    *,\n    host: str,\n    database: str,\n    table: str,\n    port: int = 3306,\n    cloud_provider: Optional[str] = None,\n    region: Optional[str] = None,\n    username: Optional[str] = None,\n    password: Optional[str] = None,\n    tag: Optional[str] = None,\n) -&gt; \"DataBlob\":\n\"\"\"Create and return a datablob that encapsulates the data from a mysql database.\n\n    If the database requires authentication, pass the username/password as parameters or store it in\n    the **AIRT_CLIENT_DB_USERNAME** and **AIRT_CLIENT_DB_PASSWORD** environment variables.\n\n    Args:\n        host: Remote database host name.\n        database: Database name.\n        table: Table name.\n        port: Host port number. If not passed, then the default value **3306** will be used.\n        cloud_provider: The destination cloud storage provider's name to store the datablob. Currently, the API only supports **aws** and **azure** as cloud storage providers.\n            If **None** (default value), then **aws**  will be used as the cloud storage provider.\n        region: The destination cloud provider's region to store the datablob. If **None** (default value) then the default region will be assigned based on the cloud\n            provider. In the case of **aws**, **eu-west-1** will be used and in the case of **azure**, **westeurope** will be used. The supported AWS regions\n            are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1,\n            us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast,\n            brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast,\n            japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia,\n            switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.\n        username: Database username. If not passed, the default value **\"root\"** will be used unless the value is explicitly set in the environment variable\n            **AIRT_CLIENT_DB_USERNAME**.\n        password: Database password. If not passed, the default value **\"\"** will be used unless the value is explicitly set in the environment variable\n            **AIRT_CLIENT_DB_PASSWORD**.\n        tag: A string to tag the datablob. If not passed, then the tag **latest** will be assigned to the datablob.\n\n    Returns:\n       An instance of the `DataBlob` class.\n\n    Raises:\n        ValueError: If parameters to the API are invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example of how to create a Datablob from a MySQL database:\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, DataBlob\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a datablob\n        # In this example, the datablob will be stored in an AWS S3 bucket. The region\n        # is set to eu-west-3, feel free to change the cloud provider and the region\n        # to suit your needs.\n        db = DataBlob.from_mysql(\n            username=\"{fill in database_username}\",\n            password=\"{fill in database_password}\",\n            host=\"{fill in host}\",\n            database=\"{fill in database}\",\n            table=\"{fill in table}\",\n            port=\"{fill in port}\",\n            cloud_provider=\"aws\",\n            region=\"eu-west-3\"\n        )\n\n        # Display the status in a progress bar\n        db.progress_bar()\n\n        # Print the details of the newly created datablob\n        # If the upload is successful, the ready flag should be set to True\n        print(db.details())\n        ```\n    \"\"\"\n    username = (\n        username\n        if username is not None\n        else os.environ.get(CLIENT_DB_USERNAME, \"root\")\n    )\n\n    password = (\n        password if password is not None else os.environ.get(CLIENT_DB_PASSWORD, \"\")\n    )\n\n    cloud_provider, region = DataBlob._get_cloud_provider_and_region(cloud_provider, region)  # type: ignore\n\n    json_req = dict(\n        host=host,\n        port=port,\n        username=username,\n        password=password,\n        database=database,\n        table=table,\n        region=region,\n        cloud_provider=cloud_provider,\n        tag=tag,\n    )\n\n    response = Client._post_data(\n        relative_url=f\"/datablob/from_mysql\", json=json_req\n    )\n\n    return DataBlob(\n        uuid=response[\"uuid\"], type=response[\"type\"], source=response[\"source\"]\n    )\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataBlob.from_s3","title":"<code>from_s3(*, uri, access_key=None, secret_key=None, cloud_provider=None, region=None, tag=None)</code>  <code>staticmethod</code>","text":"<p>Create and return a datablob that encapsulates the data from an AWS S3 bucket.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>AWS S3 bucket uri.</p> required <code>access_key</code> <code>Optional[str]</code> <p>Access key for the S3 bucket. If None (default value), then the value from AWS_ACCESS_KEY_ID environment variable will be used.</p> <code>None</code> <code>secret_key</code> <code>Optional[str]</code> <p>Secret key for the S3 bucket. If None (default value), then the value from AWS_SECRET_ACCESS_KEY environment variable will be used.</p> <code>None</code> <code>cloud_provider</code> <code>Optional[str]</code> <p>The destination cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers. If None (default value), then aws  will be used as the cloud storage provider.</p> <code>None</code> <code>region</code> <code>Optional[str]</code> <p>The region of the destination cloud provider where the datablob will be stored. If None (default value) then the default region will be assigned based on the cloud provider. In the case of aws, the datablob's source bucket region will be used, whereas azure will use westeurope. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</p> <code>None</code> <code>tag</code> <code>Optional[str]</code> <p>A string to tag the datablob. If not passed, then the tag latest will be assigned to the datablob.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataBlob</code> <p>An instance of the <code>DataBlob</code> class.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If parameters to the API are invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example of how to create a Datablob from an AWS S3 bucket:</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the access_key and the secret_key are set in the\n# AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables. The region\n# is set to eu-west-3, feel free to change the cloud provider and the region\n# to suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Print the details of the newly created datablob\n# If the upload is successful, the ready flag should be set to True\nprint(db.details())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef from_s3(\n    *,\n    uri: str,\n    access_key: Optional[str] = None,\n    secret_key: Optional[str] = None,\n    cloud_provider: Optional[str] = None,\n    region: Optional[str] = None,\n    tag: Optional[str] = None,\n) -&gt; \"DataBlob\":\n\"\"\"Create and return a datablob that encapsulates the data from an AWS S3 bucket.\n\n    Args:\n        uri: AWS S3 bucket uri.\n        access_key: Access key for the S3 bucket. If **None** (default value), then the value\n            from **AWS_ACCESS_KEY_ID** environment variable will be used.\n        secret_key: Secret key for the S3 bucket. If **None** (default value), then the value\n            from **AWS_SECRET_ACCESS_KEY** environment variable will be used.\n        cloud_provider: The destination cloud storage provider's name to store the datablob. Currently, the API only supports **aws** and **azure** as cloud storage providers.\n            If **None** (default value), then **aws**  will be used as the cloud storage provider.\n        region: The region of the destination cloud provider where the datablob will be stored. If **None** (default value) then the default region will be assigned based on\n            the cloud provider. In the case of **aws**, the datablob's source bucket region will be used, whereas **azure** will use **westeurope**. The supported AWS regions\n            are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1,\n            us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast,\n            brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast,\n            japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia,\n            switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.\n        tag: A string to tag the datablob. If not passed, then the tag **latest** will be assigned to the datablob.\n\n    Returns:\n        An instance of the `DataBlob` class.\n\n    Raises:\n        ValueError: If parameters to the API are invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example of how to create a Datablob from an AWS S3 bucket:\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, DataBlob\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a datablob\n        # In this example, the access_key and the secret_key are set in the\n        # AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables. The region\n        # is set to eu-west-3, feel free to change the cloud provider and the region\n        # to suit your needs.\n        db = DataBlob.from_s3(\n            uri=\"{fill in uri}\",\n            cloud_provider=\"aws\",\n            region=\"eu-west-3\"\n        )\n\n        # Display the status in a progress bar\n        db.progress_bar()\n\n        # Print the details of the newly created datablob\n        # If the upload is successful, the ready flag should be set to True\n        print(db.details())\n        ```\n    \"\"\"\n    access_key = (\n        access_key if access_key is not None else os.environ[\"AWS_ACCESS_KEY_ID\"]\n    )\n    secret_key = (\n        secret_key\n        if secret_key is not None\n        else os.environ[\"AWS_SECRET_ACCESS_KEY\"]\n    )\n\n    cloud_provider, region = DataBlob._get_cloud_provider_and_region(cloud_provider=cloud_provider, region=region, set_source_region=True)  # type: ignore\n\n    response = Client._post_data(\n        relative_url=\"/datablob/from_s3\",\n        json=dict(\n            uri=uri,\n            access_key=access_key,\n            secret_key=secret_key,\n            region=region,\n            cloud_provider=cloud_provider,\n            tag=tag,\n        ),\n    )\n\n    return DataBlob(\n        uuid=response[\"uuid\"], type=response[\"type\"], source=response[\"source\"]\n    )\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataBlob.is_ready","title":"<code>is_ready(self)</code>","text":"<p>Check if the method's progress is complete.</p> <p>Info</p> <p>This method will return <code>True</code> immediately and will not wait for the progress to finish if the datablob is created using the <code>from_local</code> method.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the upload progress is completed, else False.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\ndb.progress_bar()\n\n# Display the ready status\n# If the datablob is successfully uploaded, True will be returned.\nprint(db.is_ready())\n\n# Print the details of the newly created datablob\nprint(db.details())\n\n# Display the details of all datablob created by the currently\n# logged-in user\nprint(DataBlob.as_df(DataBlob.ls()))\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Display the head of the data to ensure everything is fine.\nprint(ds.head())\n\n# Tag the datablob\nprint(db.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datablob\nprint(db.delete())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>def is_ready(self) -&gt; bool:\n\"\"\"Check if the method's progress is complete.\n\n    !!! info\n\n        This method will return `True` immediately and will not wait for the progress to finish\n        if the datablob is created using the `from_local` method.\n\n    Returns:\n        **True** if the upload progress is completed, else **False**.\n    \"\"\"\n    if self.type in [\"local\"]:\n        return True\n\n    progress_status = ProgressStatus(relative_url=f\"/datablob/{self.uuid}\")\n\n    return progress_status.is_ready()\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataBlob.ls","title":"<code>ls(offset=0, limit=100, disabled=False, completed=False)</code>  <code>staticmethod</code>","text":"<p>Return the list of DataBlob instances</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The number of datablobs to offset at the beginning. If None, then the default value 0 will be used.</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of datablobs to return from the server. If None, then the default value 100 will be used.</p> <code>100</code> <code>disabled</code> <code>bool</code> <p>If set to True, then only the deleted datablobs will be returned. Else, the default value False will be used to return only the list of active datablobs.</p> <code>False</code> <code>completed</code> <code>bool</code> <p>If set to True, then only the datablobs that are successfully downloaded to the server will be returned. Else, the default value False will be used to return all the datablobs.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[DataBlob]</code> <p>A list of DataBlob instances available in the server.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\ndb.progress_bar()\n\n# Display the ready status\n# If the datablob is successfully uploaded, True will be returned.\nprint(db.is_ready())\n\n# Print the details of the newly created datablob\nprint(db.details())\n\n# Display the details of all datablob created by the currently\n# logged-in user\nprint(DataBlob.as_df(DataBlob.ls()))\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Display the head of the data to ensure everything is fine.\nprint(ds.head())\n\n# Tag the datablob\nprint(db.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datablob\nprint(db.delete())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef ls(\n    offset: int = 0,\n    limit: int = 100,\n    disabled: bool = False,\n    completed: bool = False,\n) -&gt; List[\"DataBlob\"]:\n\"\"\"Return the list of DataBlob instances\n\n    Args:\n        offset: The number of datablobs to offset at the beginning. If **None**,\n            then the default value **0** will be used.\n        limit: The maximum number of datablobs to return from the server. If **None**,\n            then the default value **100** will be used.\n        disabled: If set to **True**, then only the deleted datablobs will be returned.\n            Else, the default value **False** will be used to return only the list\n            of active datablobs.\n        completed: If set to **True**, then only the datablobs that are successfully downloaded\n            to the server will be returned. Else, the default value **False** will be used to\n            return all the datablobs.\n\n    Returns:\n        A list of DataBlob instances available in the server.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    lists = Client._get_data(\n        relative_url=f\"/datablob/?disabled={disabled}&amp;completed={completed}&amp;offset={offset}&amp;limit={limit}\"\n    )\n\n    dbx = [\n        DataBlob(\n            uuid=db[\"uuid\"],\n            type=db[\"type\"],\n            source=db[\"source\"],\n            region=db[\"region\"],\n            cloud_provider=db[\"cloud_provider\"],\n            datasources=db[\"datasources\"],\n            total_steps=db[\"total_steps\"],\n            completed_steps=db[\"completed_steps\"],\n            folder_size=db[\"folder_size\"],\n            disabled=db[\"disabled\"],\n            pulled_on=db[\"pulled_on\"],\n            user=db[\"user\"],\n            tags=db[\"tags\"],\n            error=db[\"error\"],\n        )\n        for db in lists\n    ]\n\n    return dbx\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataBlob.progress_bar","title":"<code>progress_bar(self, sleep_for=5, timeout=0)</code>","text":"<p>Blocks the execution and displays a progress bar showing the remote action progress.</p> <p>Info</p> <p>This method will not check the progress if the datablob is created using the <code>from_local</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>sleep_for</code> <code>Union[int, float]</code> <p>The time interval in seconds between successive API calls.</p> <code>5</code> <code>timeout</code> <code>int</code> <p>The maximum time allowed in seconds for the asynchronous call to complete. If not the progressbar will be terminated.</p> <code>0</code> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <code>TimeoutError</code> <p>in case of connection timeout.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\ndb.progress_bar()\n\n# Display the ready status\n# If the datablob is successfully uploaded, True will be returned.\nprint(db.is_ready())\n\n# Print the details of the newly created datablob\nprint(db.details())\n\n# Display the details of all datablob created by the currently\n# logged-in user\nprint(DataBlob.as_df(DataBlob.ls()))\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Display the head of the data to ensure everything is fine.\nprint(ds.head())\n\n# Tag the datablob\nprint(db.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datablob\nprint(db.delete())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>def progress_bar(self, sleep_for: Union[int, float] = 5, timeout: int = 0):\n\"\"\"Blocks the execution and displays a progress bar showing the remote action progress.\n\n    !!! info\n\n        This method will not check the progress if the datablob is created using the\n        `from_local` method.\n\n    Args:\n        sleep_for: The time interval in seconds between successive API calls.\n        timeout: The maximum time allowed in seconds for the asynchronous call to complete. If not the\n            progressbar will be terminated.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n        TimeoutError: in case of connection timeout.\n    \"\"\"\n    if self.type not in [\"local\"]:\n        progress_status = ProgressStatus(\n            relative_url=f\"/datablob/{self.uuid}\",\n            sleep_for=sleep_for,\n            timeout=timeout,\n        )\n\n        progress_status.progress_bar()\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataBlob.set_default_cloud_provider","title":"<code>set_default_cloud_provider(cls, cloud_provider, region=None)</code>","text":"<p>Sets the default destination value for the cloud_provider and the region.</p> <p>Whenever you call the from_* methods of the <code>DataBlob</code> class inside this context manager, the destination cloud_provider and region set in this context will be passed to the from_* methods, unless you explicitely override it in the parameter.</p> <p>Parameters:</p> Name Type Description Default <code>cloud_provider</code> <code>str</code> <p>The destination cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers.</p> required <code>region</code> <code>Optional[str]</code> <p>The destination cloud provider's region to store the datablob. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[NoneType]</code> <p>A context manager that specifies the cloud provider and region to use.</p> <p>Here's an example of creating a datablob from Azure Blob Storage and storing it in AWS S3:</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nimport os\n\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.storage import StorageManagementClient\n\nfrom  captn.client import Client, DataBlob\n\n# Create a credential for accessing Azure Blob Storage\n# Setting the required environment variables\nos.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"\nos.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"\nos.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"\nos.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"\n\n# Setting the resource group name and storage account name\nazure_group_name = \"{fill in azure_group_name}\"\nazure_storage_account_name = \"{fill in azure_storage_account_name}\"\n\n# Retrieving the credential\nazure_storage_client = StorageManagementClient(\n    DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n)\nazure_storage_keys = azure_storage_client.storage_accounts.list_keys(\n    azure_group_name, azure_storage_account_name\n)\nazure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}\ncredential = azure_storage_keys['key1']\n\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablobs created inside the context manager will be\n# stored in an AWS S3 bucket with the region set to eu-west-3.\nwith DataBlob.set_default_cloud_provider(\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n):\n    db = DataBlob.from_azure_blob_storage(\n        uri=\"{fill in uri}\",\n        credential=credential\n    )\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Print the details of the newly created datablob\n# If the upload is successful, the ready flag should be set to True\nprint(db.details())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@patch(cls_method=True)\n@contextmanager\ndef set_default_cloud_provider(\n    cls: DataBlob, cloud_provider: str, region: Optional[str] = None\n) -&gt; Iterator[None]:\n\"\"\"Sets the default destination value for the cloud_provider and the region.\n\n    Whenever you call the from_\\* methods of the `DataBlob` class inside this context manager, the destination cloud_provider and region set in this context\n    will be passed to the from_\\* methods, unless you explicitely override it in the parameter.\n\n    Args:\n        cloud_provider: The destination cloud storage provider's name to store the datablob. Currently, the API only supports **aws** and **azure** as cloud storage providers.\n        region: The destination cloud provider's region to store the datablob. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1,\n            ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported\n            Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia,\n            centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth,\n            northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth,\n            switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.\n\n    Returns:\n        A context manager that specifies the cloud provider and region to use.\n\n    Here's an example of creating a datablob from Azure Blob Storage and storing it in AWS S3:\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        import os\n\n        from azure.identity import DefaultAzureCredential\n        from azure.mgmt.storage import StorageManagementClient\n\n        from  airt.client import Client, DataBlob\n\n        # Create a credential for accessing Azure Blob Storage\n        # Setting the required environment variables\n        os.environ[\"AZURE_SUBSCRIPTION_ID\"] = \"{fill in azure_subscription_id}\"\n        os.environ[\"AZURE_CLIENT_ID\"] = \"{fill in azure_client_id}\"\n        os.environ[\"AZURE_CLIENT_SECRET\"] = \"{fill in azure_client_secret}\"\n        os.environ[\"AZURE_TENANT_ID\"]= \"{fill in azure_tenant_id}\"\n\n        # Setting the resource group name and storage account name\n        azure_group_name = \"{fill in azure_group_name}\"\n        azure_storage_account_name = \"{fill in azure_storage_account_name}\"\n\n        # Retrieving the credential\n        azure_storage_client = StorageManagementClient(\n            DefaultAzureCredential(), os.environ[\"AZURE_SUBSCRIPTION_ID\"]\n        )\n        azure_storage_keys = azure_storage_client.storage_accounts.list_keys(\n            azure_group_name, azure_storage_account_name\n        )\n        azure_storage_keys = {v.key_name: v.value for v in azure_storage_keys.keys}\n        credential = azure_storage_keys['key1']\n\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a datablob\n        # In this example, the datablobs created inside the context manager will be\n        # stored in an AWS S3 bucket with the region set to eu-west-3.\n        with DataBlob.set_default_cloud_provider(\n            cloud_provider=\"aws\",\n            region=\"eu-west-3\"\n        ):\n            db = DataBlob.from_azure_blob_storage(\n                uri=\"{fill in uri}\",\n                credential=credential\n            )\n\n        # Display the status in a progress bar\n        db.progress_bar()\n\n        # Print the details of the newly created datablob\n        # If the upload is successful, the ready flag should be set to True\n        print(db.details())\n        ```\n    \"\"\"\n\n    cls._default_provider_and_regions.append((cloud_provider, region))  # type: ignore\n\n    yield\n\n    cls._default_provider_and_regions.pop()\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataBlob.tag","title":"<code>tag(self, name)</code>","text":"<p>Tag an existing datablob in the server.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>A string to tag the datablob.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas dataframe with the details of the tagged datablob.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\ndb.progress_bar()\n\n# Display the ready status\n# If the datablob is successfully uploaded, True will be returned.\nprint(db.is_ready())\n\n# Print the details of the newly created datablob\nprint(db.details())\n\n# Display the details of all datablob created by the currently\n# logged-in user\nprint(DataBlob.as_df(DataBlob.ls()))\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Display the head of the data to ensure everything is fine.\nprint(ds.head())\n\n# Tag the datablob\nprint(db.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datablob\nprint(db.delete())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@patch\ndef tag(self: DataBlob, name: str) -&gt; pd.DataFrame:\n\"\"\"Tag an existing datablob in the server.\n\n    Args:\n        name: A string to tag the datablob.\n\n    Returns:\n        A pandas dataframe with the details of the tagged datablob.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    response = Client._post_data(\n        relative_url=f\"/datablob/{self.uuid}/tag\", json=dict(name=name)\n    )\n\n    response = DataBlob._get_tag_name_and_datasource_id(response)\n\n    df = pd.DataFrame([response])[DataBlob.BASIC_DB_COLS]\n\n    df = df.rename(columns=DataBlob.COLS_TO_RENAME)\n\n    return add_ready_column(df)\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataBlob.to_datasource","title":"<code>to_datasource(self, *, file_type, index_column, sort_by, deduplicate_data=False, blocksize='256MB', **kwargs)</code>","text":"<p>Process the datablob and return a datasource object.</p> <p>Parameters:</p> Name Type Description Default <code>file_type</code> <code>str</code> <p>The file type of the datablob. Currently, the API only supports \"csv\" and \"parquet\" as file types.</p> required <code>index_column</code> <code>str</code> <p>The column to use as index (row labels).</p> required <code>sort_by</code> <code>Union[str, List[str]]</code> <p>The column(s) to sort the data. Can either be a string or a list of strings.</p> required <code>deduplicate_data</code> <code>bool</code> <p>If set to True (default value False), the datasource will be created with duplicate rows removed.</p> <code>False</code> <code>blocksize</code> <code>str</code> <p>The number of bytes used to split larger files. If None, then the default value 256MB will be used.</p> <code>'256MB'</code> <code>kwargs</code> <p>Additional keyword arguments to use while processing the data.e.g: To skip 100 lines from the bottom of file, pass **{\"skipfooter\": 100}</p> <code>{}</code> <p>Returns:</p> Type Description <code>DataSource</code> <p>An instance of the <code>DataSource</code> class.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the CSV file processing fails.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\ndb.progress_bar()\n\n# Display the ready status\n# If the datablob is successfully uploaded, True will be returned.\nprint(db.is_ready())\n\n# Print the details of the newly created datablob\nprint(db.details())\n\n# Display the details of all datablob created by the currently\n# logged-in user\nprint(DataBlob.as_df(DataBlob.ls()))\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Display the head of the data to ensure everything is fine.\nprint(ds.head())\n\n# Tag the datablob\nprint(db.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datablob\nprint(db.delete())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@patch\ndef to_datasource(\n    self: DataBlob,\n    *,\n    file_type: str,\n    index_column: str,\n    sort_by: Union[str, List[str]],\n    deduplicate_data: bool = False,\n    blocksize: str = \"256MB\",\n    **kwargs,\n) -&gt; DataSource:\n\"\"\"Process the datablob and return a datasource object.\n\n    Args:\n        file_type: The file type of the datablob. Currently, the API only supports **\"csv\"** and **\"parquet\"** as file types.\n        index_column: The column to use as index (row labels).\n        sort_by: The column(s) to sort the data. Can either be a string or a list of strings.\n        deduplicate_data: If set to **True** (default value **False**), the datasource will be created with duplicate rows removed.\n        blocksize: The number of bytes used to split larger files. If None, then the default value **256MB** will be used.\n        kwargs: Additional keyword arguments to use while processing the data.e.g: To skip 100 lines from the bottom of file,\n            pass **{\"skipfooter\": 100}\n\n    Returns:\n        An instance of the `DataSource` class.\n\n    Raises:\n        ValueError: If the CSV file processing fails.\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    json_req = dict(\n        file_type=file_type,\n        deduplicate_data=deduplicate_data,\n        index_column=index_column,\n        sort_by=sort_by,\n        blocksize=blocksize,\n        kwargs=kwargs,\n    )\n    response = Client._post_data(\n        relative_url=f\"/datablob/{self.uuid}/to_datasource\", json=json_req\n    )\n\n    return DataSource(uuid=response[\"uuid\"])\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataBlob.wait","title":"<code>wait(self, sleep_for=1, timeout=0)</code>","text":"<p>Blocks execution while waiting for the remote action to complete.</p> <p>Info</p> <p>This method will not check the progress if the datablob is created using the <code>from_local</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>sleep_for</code> <code>Union[int, float]</code> <p>The time interval in seconds between successive API calls.</p> <code>1</code> <code>timeout</code> <code>int</code> <p>The maximum time allowed in seconds for the asynchronous call to complete. If not the progressbar will be terminated.</p> <code>0</code> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <code>TimeoutError</code> <p>in case of timeout.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, DataBlob\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\ndb.progress_bar()\n\n# Display the ready status\n# If the datablob is successfully uploaded, True will be returned.\nprint(db.is_ready())\n\n# Print the details of the newly created datablob\nprint(db.details())\n\n# Display the details of all datablob created by the currently\n# logged-in user\nprint(DataBlob.as_df(DataBlob.ls()))\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\nds.progress_bar()\n\n# Display the head of the data to ensure everything is fine.\nprint(ds.head())\n\n# Tag the datablob\nprint(db.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datablob\nprint(db.delete())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>def wait(self, sleep_for: Union[int, float] = 1, timeout: int = 0):\n\"\"\"Blocks execution while waiting for the remote action to complete.\n\n    !!! info\n\n        This method will not check the progress if the datablob is created using the\n        `from_local` method.\n\n    Args:\n        sleep_for: The time interval in seconds between successive API calls.\n        timeout: The maximum time allowed in seconds for the asynchronous call to complete. If not the\n            progressbar will be terminated.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n        TimeoutError: in case of timeout.\n    \"\"\"\n    if self.type not in [\"local\"]:\n        progress_status = ProgressStatus(\n            relative_url=f\"/datablob/{self.uuid}\",\n            sleep_for=sleep_for,\n            timeout=timeout,\n        )\n\n        progress_status.wait()\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataSource","title":"<code> DataSource        </code>","text":"<p>A class for managing datasources and training ML models on them.</p> <p>To instantiate the DataSource class, please call <code>DataBlob.to_datasource</code> method of the <code>DataBlob</code> class.</p> <p>The DataSource class has two categories of methods,</p> <ul> <li>Methods for managing the datasources.</li> <li>Method for training a model against a datasource.</li> </ul> <p>Methods such as <code>delete</code>, <code>ls</code>, <code>details</code>, <code>head</code>, etc., can be used to manage and obtain additional information from a datasource instance.</p> <p>And, the <code>train</code> method can be used to train a new model against a datasource instance.</p> <p>All the function calls to the library are asynchronous and they return immediately. To manage completion, methods inside the returned object will return a status object indicating the completion status and a method to display an interactive progress bar that can be called to check the progress.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  captn.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataSource.dtypes","title":"<code>dtypes: DataFrame</code>  <code>property</code> <code>readonly</code>","text":"<p>Return the dtypes of the datasource.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame containing the data type of each column.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  captn.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataSource.__init__","title":"<code>__init__(self, uuid, datablob=None, folder_size=None, no_of_rows=None, error=None, disabled=None, created=None, pulled_on=None, user=None, hash=None, region=None, cloud_provider=None, tags=None, total_steps=None, completed_steps=None)</code>  <code>special</code>","text":"<p>Constructs a new <code>DataSource</code> instance.</p> <p>Warning</p> <p>Do not construct this object directly by calling the constructor, please use <code>DataBlob.to_datasource</code> method instead.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>str</code> <p>DataSource uuid.</p> required <code>datablob</code> <code>Optional[str]</code> <p>Datablob uuid.</p> <code>None</code> <code>folder_size</code> <code>Optional[int]</code> <p>The uploaded datasource's size in bytes.</p> <code>None</code> <code>no_of_rows</code> <code>Optional[int]</code> <p>The number of records in the datasource.</p> <code>None</code> <code>error</code> <code>Optional[str]</code> <p>Contains the error message if the processing of the datasource fails.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>A flag that indicates the datasource's status. If the datasource is deleted, then False will be set.</p> <code>None</code> <code>created</code> <code>Optional[str]</code> <p>The datasource creation date.</p> <code>None</code> <code>pulled_on</code> <code>Optional[str]</code> <p>The most recent date the datasource was uploaded.</p> <code>None</code> <code>user</code> <code>Optional[str]</code> <p>The uuid of the user who created the datasource.</p> <code>None</code> <code>hash</code> <code>Optional[str]</code> <p>The datasource hash.</p> <code>None</code> <code>region</code> <code>Optional[str]</code> <p>The region name of the cloud provider where the datasource is stored</p> <code>None</code> <code>cloud_provider</code> <code>Optional[str]</code> <p>The name of the cloud storage provider where the datasource is stored.</p> <code>None</code> <code>tags</code> <code>Optional[List[Dict[str, str]]]</code> <p>Tag names associated with the datasource.</p> <code>None</code> <code>total_steps</code> <code>Optional[int]</code> <p>The number of steps required to upload the datasource to the server.</p> <code>None</code> <code>completed_steps</code> <code>Optional[int]</code> <p>The number of steps completed during the datasource's upload to the server.</p> <code>None</code> Source code in <code>captn/client.py</code> <pre><code>def __init__(\n    self,\n    uuid: str,\n    datablob: Optional[str] = None,\n    folder_size: Optional[int] = None,\n    no_of_rows: Optional[int] = None,\n    error: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    created: Optional[str] = None,\n    pulled_on: Optional[str] = None,\n    user: Optional[str] = None,\n    hash: Optional[str] = None,\n    region: Optional[str] = None,\n    cloud_provider: Optional[str] = None,\n    tags: Optional[List[Dict[str, str]]] = None,\n    total_steps: Optional[int] = None,\n    completed_steps: Optional[int] = None,\n):\n\"\"\"Constructs a new `DataSource` instance.\n\n    Warning:\n        Do not construct this object directly by calling the constructor, please use `DataBlob.to_datasource` method instead.\n\n    Args:\n        uuid: DataSource uuid.\n        datablob: Datablob uuid.\n        folder_size: The uploaded datasource's size in bytes.\n        no_of_rows: The number of records in the datasource.\n        error: Contains the error message if the processing of the datasource fails.\n        disabled: A flag that indicates the datasource's status. If the datasource is deleted, then **False** will be set.\n        created: The datasource creation date.\n        pulled_on: The most recent date the datasource was uploaded.\n        user: The uuid of the user who created the datasource.\n        hash: The datasource hash.\n        region: The region name of the cloud provider where the datasource is stored\n        cloud_provider: The name of the cloud storage provider where the datasource is stored.\n        tags: Tag names associated with the datasource.\n        total_steps: The number of steps required to upload the datasource to the server.\n        completed_steps: The number of steps completed during the datasource's upload to the server.\n    \"\"\"\n    self.uuid = uuid\n    self.datablob = datablob\n    self.folder_size = folder_size\n    self.no_of_rows = no_of_rows\n    self.error = error\n    self.disabled = disabled\n    self.created = created\n    self.pulled_on = pulled_on\n    self.user = user\n    self.hash = hash\n    self.region = region\n    self.cloud_provider = cloud_provider\n    self.tags = tags\n    self.total_steps = total_steps\n    self.completed_steps = completed_steps\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataSource.as_df","title":"<code>as_df(dsx)</code>  <code>staticmethod</code>","text":"<p>Return the details of <code>DataSource</code> instances as a pandas dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>dsx</code> <code>List[DataSource]</code> <p>List of <code>DataSource</code> instances.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Details of the datasources in a dataframe.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  captn.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef as_df(dsx: List[\"DataSource\"]) -&gt; pd.DataFrame:\n\"\"\"Return the details of `DataSource` instances as a pandas dataframe.\n\n    Args:\n        dsx: List of `DataSource` instances.\n\n    Returns:\n        Details of the datasources in a dataframe.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n\n    ds_lists = [{i: getattr(ds, i) for i in DataSource.ALL_DS_COLS} for ds in dsx]\n\n    for ds in ds_lists:\n        ds[\"tags\"] = get_values_from_item(ds[\"tags\"], \"name\")\n\n    lists_df = generate_df(ds_lists, DataSource.BASIC_DS_COLS)\n    df = add_ready_column(lists_df)\n\n    df = df.rename(columns=DataSource.COLS_TO_RENAME)\n\n    return df\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataSource.delete","title":"<code>delete(self)</code>","text":"<p>Delete a datasource from the server.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame encapsulating the details of the deleted datasource.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  captn.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@patch\ndef delete(self: DataSource) -&gt; pd.DataFrame:\n\"\"\"Delete a datasource from the server.\n\n    Returns:\n        A pandas DataFrame encapsulating the details of the deleted datasource.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n\n    response = Client._delete_data(relative_url=f\"/datasource/{self.uuid}\")\n\n    response[\"tags\"] = get_values_from_item(response[\"tags\"], \"name\")\n\n    df = pd.DataFrame([response])[DataSource.BASIC_DS_COLS]\n\n    df = df.rename(columns=DataSource.COLS_TO_RENAME)\n\n    return add_ready_column(df)\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataSource.details","title":"<code>details(self)</code>","text":"<p>Return details of a datasource.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The datasource details as a pandas dataframe.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  captn.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@patch\ndef details(self: DataSource) -&gt; pd.DataFrame:\n\"\"\"Return details of a datasource.\n\n    Returns:\n        The datasource details as a pandas dataframe.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n\n    response = Client._get_data(relative_url=f\"/datasource/{self.uuid}\")\n\n    response[\"tags\"] = get_values_from_item(response[\"tags\"], \"name\")\n\n    df = pd.DataFrame([response])[DataSource.ALL_DS_COLS]\n\n    df = df.rename(columns=DataSource.COLS_TO_RENAME)\n\n    return add_ready_column(df)\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataSource.head","title":"<code>head(self)</code>","text":"<p>Return the first few rows of the datasource.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The first few rows of the datasource as a pandas dataframe.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  captn.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@patch\ndef head(self: DataSource) -&gt; pd.DataFrame:\n\"\"\"Return the first few rows of the datasource.\n\n    Returns:\n        The first few rows of the datasource as a pandas dataframe.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    response = Client._get_data(relative_url=f\"/datasource/{self.uuid}/head\")\n    df = dict_to_df(response)\n\n    return df\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataSource.is_ready","title":"<code>is_ready(self)</code>","text":"<p>Check if the method's progress is complete.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the progress is completed, else False.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  captn.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@patch\ndef is_ready(\n    self: DataSource,\n) -&gt; bool:\n\"\"\"Check if the method's progress is complete.\n\n    Returns:\n        **True** if the progress is completed, else **False**.\n    \"\"\"\n    progress_status = ProgressStatus(relative_url=f\"/datasource/{self.uuid}\")\n\n    return progress_status.is_ready()\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataSource.ls","title":"<code>ls(offset=0, limit=100, disabled=False, completed=False)</code>  <code>staticmethod</code>","text":"<p>Return the list of <code>DataSource</code> instances available in server.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The number of datasources to offset at the beginning. If None, then the default value 0 will be used.</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of datasources to return from the server. If None, then the default value 100 will be used.</p> <code>100</code> <code>disabled</code> <code>bool</code> <p>If set to True, then only the deleted datasources will be returned. Else, the default value False will be used to return only the list of active datasources.</p> <code>False</code> <code>completed</code> <code>bool</code> <p>If set to True, then only the datasources that are successfully processed in server will be returned. Else, the default value False will be used to return all the datasources.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[DataSource]</code> <p>A list of <code>DataSource</code> instances available in server.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  captn.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef ls(\n    offset: int = 0,\n    limit: int = 100,\n    disabled: bool = False,\n    completed: bool = False,\n) -&gt; List[\"DataSource\"]:\n\"\"\"Return the list of `DataSource` instances available in server.\n\n    Args:\n        offset: The number of datasources to offset at the beginning. If **None**,\n            then the default value **0** will be used.\n        limit: The maximum number of datasources to return from the server. If **None**,\n            then the default value **100** will be used.\n        disabled: If set to **True**, then only the deleted datasources will be returned.\n            Else, the default value **False** will be used to return only the list\n            of active datasources.\n        completed: If set to **True**, then only the datasources that are successfully processed\n            in server will be returned. Else, the default value **False** will be used to\n            return all the datasources.\n\n    Returns:\n        A list of `DataSource` instances available in server.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    lists = Client._get_data(\n        relative_url=f\"/datasource/?disabled={disabled}&amp;completed={completed}&amp;offset={offset}&amp;limit={limit}\"\n    )\n\n    dsx = [\n        DataSource(\n            uuid=ds[\"uuid\"],\n            datablob=ds[\"datablob\"],\n            folder_size=ds[\"folder_size\"],\n            no_of_rows=ds[\"no_of_rows\"],\n            region=ds[\"region\"],\n            cloud_provider=ds[\"cloud_provider\"],\n            error=ds[\"error\"],\n            disabled=ds[\"disabled\"],\n            created=ds[\"created\"],\n            pulled_on=ds[\"pulled_on\"],\n            user=ds[\"user\"],\n            hash=ds[\"hash\"],\n            tags=ds[\"tags\"],\n            total_steps=ds[\"total_steps\"],\n            completed_steps=ds[\"completed_steps\"],\n        )\n        for ds in lists\n    ]\n\n    return dsx\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataSource.progress_bar","title":"<code>progress_bar(self, sleep_for=5, timeout=0)</code>","text":"<p>Blocks the execution and displays a progress bar showing the remote action progress.</p> <p>Parameters:</p> Name Type Description Default <code>sleep_for</code> <code>Union[int, float]</code> <p>The time interval in seconds between successive API calls.</p> <code>5</code> <code>timeout</code> <code>int</code> <p>The maximum time allowed in seconds for the asynchronous call to complete. If not the progressbar will be terminated.</p> <code>0</code> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <code>TimeoutError</code> <p>in case of connection timeout.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  captn.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@patch\ndef progress_bar(self: DataSource, sleep_for: Union[int, float] = 5, timeout: int = 0):\n\"\"\"Blocks the execution and displays a progress bar showing the remote action progress.\n\n    Args:\n        sleep_for: The time interval in seconds between successive API calls.\n        timeout: The maximum time allowed in seconds for the asynchronous call to complete. If not the\n            progressbar will be terminated.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n        TimeoutError: in case of connection timeout.\n    \"\"\"\n    progress_status = ProgressStatus(\n        relative_url=f\"/datasource/{self.uuid}\", sleep_for=sleep_for, timeout=timeout\n    )\n\n    progress_status.progress_bar()\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataSource.tag","title":"<code>tag(self, name)</code>","text":"<p>Tag an existing datasource in server.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>A string to tag the datasource.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas dataframe with the details of the tagged datasource.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  captn.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@patch\ndef tag(self: DataSource, name: str) -&gt; pd.DataFrame:\n\"\"\"Tag an existing datasource in server.\n\n    Args:\n        name: A string to tag the datasource.\n\n    Returns:\n        A pandas dataframe with the details of the tagged datasource.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    response = Client._post_data(\n        relative_url=f\"/datasource/{self.uuid}/tag\", json=dict(name=name)\n    )\n\n    response[\"tags\"] = get_values_from_item(response[\"tags\"], \"name\")\n\n    df = pd.DataFrame([response])[DataSource.BASIC_DS_COLS]\n    df = df.rename(columns=DataSource.COLS_TO_RENAME)\n\n    return add_ready_column(df)\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataSource.train","title":"<code>train(self, *, client_column, timestamp_column=None, target_column, target, predict_after)</code>","text":"<p>Train a model against the datasource.</p> <p>This method trains the model for predicting which clients are most likely to have a specified event in the future.</p> <p>The call to this method is asynchronous and the progress can be checked using the progress bar method or the status flag attribute available in the <code>DataSource</code> class.</p> <p>For more model specific information, please check the documentation of <code>Model</code> class.</p> <p>Parameters:</p> Name Type Description Default <code>client_column</code> <code>str</code> <p>The column name that uniquely identifies the users/clients.</p> required <code>timestamp_column</code> <code>Optional[str]</code> <p>The timestamp column indicating the time of an event. If not passed, then the default value None will be used.</p> <code>None</code> <code>target_column</code> <code>str</code> <p>Target column name that indicates the type of the event.</p> required <code>target</code> <code>str</code> <p>Target event name to train and make predictions. You can pass the target event as a string or as a regular expression for predicting more than one event. For example, passing *checkout will train a model to predict any checkout event.</p> required <code>predict_after</code> <code>timedelta</code> <p>Time delta in hours of the expected target event.</p> required <p>Returns:</p> Type Description <code>Model</code> <p>An instance of the <code>Model</code> class.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the input parameters to the API are invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  captn.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@patch\ndef train(\n    self: DataSource,\n    *,\n    client_column: str,\n    timestamp_column: Optional[str] = None,\n    target_column: str,\n    target: str,\n    predict_after: timedelta,\n) -&gt; Model:\n\"\"\"Train a model against the datasource.\n\n    This method trains the model for predicting which clients are most likely to have a specified\n    event in the future.\n\n    The call to this method is asynchronous and the progress can be checked using the progress bar method\n    or the status flag attribute available in the `DataSource` class.\n\n    For more model specific information, please check the documentation of `Model` class.\n\n    Args:\n        client_column: The column name that uniquely identifies the users/clients.\n        timestamp_column: The timestamp column indicating the time of an event. If not passed,\n            then the default value **None** will be used.\n        target_column: Target column name that indicates the type of the event.\n        target: Target event name to train and make predictions. You can pass the target event as a string or as a\n            regular expression for predicting more than one event. For example, passing ***checkout** will\n            train a model to predict any checkout event.\n        predict_after: Time delta in hours of the expected target event.\n\n    Returns:\n        An instance of the `Model` class.\n\n    Raises:\n        ValueError: If the input parameters to the API are invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n    \"\"\"\n    response = Client._post_data(\n        relative_url=f\"/model/train\",\n        json=dict(\n            data_uuid=self.uuid,\n            client_column=client_column,\n            target_column=target_column,\n            target=target,\n            predict_after=int(predict_after.total_seconds()),\n        ),\n    )\n\n    return Model(uuid=response[\"uuid\"])\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.DataSource.wait","title":"<code>wait(self, sleep_for=1, timeout=0)</code>","text":"<p>Blocks execution while waiting for the remote action to complete.</p> <p>Parameters:</p> Name Type Description Default <code>sleep_for</code> <code>Union[int, float]</code> <p>The time interval in seconds between successive API calls.</p> <code>1</code> <code>timeout</code> <code>int</code> <p>The maximum time allowed in seconds for the asynchronous call to complete. If not the progressbar will be terminated.</p> <code>0</code> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <code>TimeoutError</code> <p>in case of timeout.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom datetime import timedelta\n\nfrom  captn.client import Client, DataBlob, DataSource\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a datablob\n# In this example, the datablob will be stored in an AWS S3 bucket. The\n# access_key and the secret_key are set in the AWS_ACCESS_KEY_ID and\n# AWS_SECRET_ACCESS_KEY environment variables, and the region is set to\n# eu-west-3; feel free to change the cloud provider and the region to\n# suit your needs.\ndb = DataBlob.from_s3(\n    uri=\"{fill in uri}\",\n    cloud_provider=\"aws\",\n    region=\"eu-west-3\"\n)\n\n# Display the status in a progress bar\ndb.progress_bar()\n\n# Create a datasource\nds = db.to_datasource(\n    file_type=\"{fill in file_type}\",\n    index_column=\"{fill in index_column}\",\n    sort_by=\"{fill in sort_by}\",\n)\n\n# Display the status in a progress bar\n# Call the wait method to wait for the progress to finish but\n# without displaying an interactive progress bar.\nds.progress_bar()\n\n# Display the ready status\nprint(ds.is_ready())\n\n# Display the data types of the datasource's columns.\nprint(ds.dtypes)\n\n# Display the details of the datasource\nprint(ds.details())\n\n# Display the details of all datasource created by the currently\n# logged-in user\nprint(DataSource.as_df(DataSource.ls()))\n\n# Display the first few records of the datasource\nprint(ds.head())\n\n# Train a model against the datasource.\n# This example predicts which users will perform a purchase\n# event (\"*purchase\") three hours before they actually do it.\nmodel = ds.train(\n    client_column=\"{fill in client_column}\",\n    target_column=\"{fill in target_column}\",\n    target=\"*purchase\",\n    predict_after=timedelta(hours=3)\n)\n\n# Display the training status in a progress bar\nmodel.progress_bar()\n\n# Display the details of the newly created model\nprint(model.details())\n\n# Tag the datasource\nprint(ds.tag(name=\"{fill in tag_name}\"))\n\n# Delete the datasource\nprint(ds.delete())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@patch\ndef wait(self: DataSource, sleep_for: Union[int, float] = 1, timeout: int = 0):\n\"\"\"Blocks execution while waiting for the remote action to complete.\n\n    Args:\n        sleep_for: The time interval in seconds between successive API calls.\n        timeout: The maximum time allowed in seconds for the asynchronous call to complete. If not the\n            progressbar will be terminated.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n        TimeoutError: in case of timeout.\n    \"\"\"\n\n    progress_status = ProgressStatus(\n        relative_url=f\"/datasource/{self.uuid}\", sleep_for=sleep_for, timeout=timeout\n    )\n\n    progress_status.wait()\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.User","title":"<code> User        </code>","text":"<p>A class for creating, managing, and updating users on the server.</p> <p>The User class has two types of methods:</p> <ul> <li>Methods for creating and managing users.</li> <li>Method for updating and adding additional security to user accounts.</li> </ul> <p>Methods such as <code>create</code>, <code>enable</code>, <code>disable</code>, and <code>ls</code> can be used to manage user accounts on the server, but access to them requires super user privileges.</p> <p>The remaining methods do not require super user privileges and are used to update/additionally secure user accounts.</p> <p>In addition to the regular authentication with credentials, the users can enable multi-factor authentication (MFA) and single sign-on (SSO) for their accounts.</p> <p>To help protect your account, we recommend that you enable multi-factor authentication (MFA). MFA provides additional security by requiring you to provide unique verification code (OTP) in addition to your regular sign-in credentials when performing critical operations.</p> <p>Your account can be configured for MFA in just two easy steps:</p> <ul> <li> <p>To begin, you need to enable MFA for your account by calling the <code>enable_mfa</code> method, which will generate a QR code. You can then scan the QR code with an authenticator app, such as Google Authenticator and follow the on-device instructions to finish the setup in your smartphone.</p> </li> <li> <p>Finally, activate MFA for your account by calling <code>activate_mfa</code> and passing the dynamically generated six-digit verification code from your smartphone's authenticator app.</p> </li> </ul> <p>Single sign-on (SSO) can be enabled for your account in three simple steps:</p> <ul> <li> <p>Enable the SSO for a provider by calling the <code>enable_sso</code> method with the SSO provider name and an email address. At the moment, we only support \"google\" and \"github\" as SSO providers. We intend to support additional SSO providers in future releases.</p> </li> <li> <p>Before you can start generating new tokens with SSO, you must first authenticate with the SSO provider. Call the get_token with the same SSO provider you have enabled in the step above to generate an SSO authorization URL. Please copy and paste it into your preferred browser and complete the authentication process with the SSO provider.</p> </li> <li> <p>After successfully authenticating with the SSO provider, call the <code>Client.set_sso_token</code> method to generate a new token and use it automatically in all future interactions with the captn server.</p> </li> </ul> <p>Here's an example of using the User class's methods to display the logged-in user's uuid</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import User, Client\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Display the uuid of logged-in user\nuser_details = User.details()\nprint(user_details[\"uuid\"])\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.User.__init__","title":"<code>__init__(self, uuid, username=None, first_name=None, last_name=None, email=None, subscription_type=None, super_user=None, disabled=None, created=None, is_mfa_active=None, phone_number=None, is_phone_number_verified=None)</code>  <code>special</code>","text":"<p>Constructs a new User instance.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>str</code> <p>User uuid.</p> required <code>username</code> <code>Optional[str]</code> <p>The username of the user.</p> <code>None</code> <code>first_name</code> <code>Optional[str]</code> <p>The first name of the user.</p> <code>None</code> <code>last_name</code> <code>Optional[str]</code> <p>The last name of the user.</p> <code>None</code> <code>email</code> <code>Optional[str]</code> <p>The email address of the user.</p> <code>None</code> <code>subscription_type</code> <code>Optional[str]</code> <p>User subscription type. Currently, the API supports only the following subscription types small, medium and large.</p> <code>None</code> <code>super_user</code> <code>Optional[bool]</code> <p>Flag to indicate the user type.</p> <code>None</code> <code>disabled</code> <code>Optional[str]</code> <p>Flag to indicate the status of the user.</p> <code>None</code> <code>created</code> <code>Optional[str]</code> <p>User creation date.</p> <code>None</code> <code>is_mfa_active</code> <code>Optional[bool]</code> <p>Flag to indicate the user's MFA status.</p> <code>None</code> <code>phone_number</code> <code>Optional[str]</code> <p>The registered phone number of the user. The phone number should follow the pattern of country code followed by your phone number. For example, 440123456789, +440123456789, 00440123456789, +44 0123456789, and (+44) 012 345 6789 are all valid formats for registering a UK phone number.</p> <code>None</code> <code>is_phone_number_verified</code> <code>Optional[bool]</code> <p>Flag to indicate the phone number registration status.</p> <code>None</code> Source code in <code>captn/client.py</code> <pre><code>def __init__(\n    self,\n    uuid: str,\n    username: Optional[str] = None,\n    first_name: Optional[str] = None,\n    last_name: Optional[str] = None,\n    email: Optional[str] = None,\n    subscription_type: Optional[str] = None,\n    super_user: Optional[bool] = None,\n    disabled: Optional[str] = None,\n    created: Optional[str] = None,\n    is_mfa_active: Optional[bool] = None,\n    phone_number: Optional[str] = None,\n    is_phone_number_verified: Optional[bool] = None,\n):\n\"\"\"Constructs a new User instance.\n\n    Args:\n        uuid: User uuid.\n        username: The username of the user.\n        first_name: The first name of the user.\n        last_name: The last name of the user.\n        email: The email address of the user.\n        subscription_type: User subscription type. Currently, the API supports only the following subscription\n            types **small**, **medium** and **large**.\n        super_user: Flag to indicate the user type.\n        disabled: Flag to indicate the status of the user.\n        created: User creation date.\n        is_mfa_active: Flag to indicate the user's MFA status.\n        phone_number: The registered phone number of the user. The phone number should follow the pattern of country\n            code followed by your phone number. For example, **440123456789, +440123456789, 00440123456789, +44 0123456789,\n            and (+44) 012 345 6789** are all valid formats for registering a UK phone number.\n        is_phone_number_verified: Flag to indicate the phone number registration status.\n    \"\"\"\n\n    self.uuid = uuid\n    self.username = username\n    self.first_name = first_name\n    self.last_name = last_name\n    self.email = email\n    self.subscription_type = subscription_type\n    self.super_user = super_user\n    self.disabled = disabled\n    self.created = created\n    self.is_mfa_active = is_mfa_active\n    self.phone_number = phone_number\n    self.is_phone_number_verified = is_phone_number_verified\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.User.activate_mfa","title":"<code>activate_mfa(otp)</code>  <code>staticmethod</code>","text":"<p>Activate MFA for the user</p> <p>Adding MFA to your account is a two-step process. To begin, you must enable MFA for your account by calling the <code>enable_mfa</code> method, then call the <code>activate_mfa</code> method and pass the current OTP from the authenticator application to verify and activate MFA for your account.</p> <p>Parameters:</p> Name Type Description Default <code>otp</code> <code>int</code> <p>Dynamically generated six-digit verification code from the authenticator app</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame encapsulating the MFA activated user details</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the user entered six-digit verification code is invalid</p> <p>Here's an example to enable and activate MFA for the user</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import User, Client\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Check the current MFA status\nprint(User.details()[\"is_mfa_active\"])\n\n# Enable MFA for the user\n# The line below will generate a QR code. To finish the setup on your smartphone,\n# scan the QR code with an authenticator app like Google Authenticator and\n# follow the on-device instructions\nUser.enable_mfa()\n\n# After you've completed the setup, enter the current OTP from the authenticator\n# app to verify and enable MFA for your account\nUser.activate_mfa(otp=\"{fill in otp}\")\n\n# Check the current MFA status\n# The is_mfa_active flag should be set to True, if the setup is successful\nprint(User.details()[\"is_mfa_active\"])\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef activate_mfa(otp: int) -&gt; pd.DataFrame:\n\"\"\"Activate MFA for the user\n\n    Adding MFA to your account is a two-step process. To begin, you must enable MFA for your account\n    by calling the `enable_mfa` method, then call the `activate_mfa` method and pass the current OTP\n    from the authenticator application to verify and activate MFA for your account.\n\n    Args:\n        otp: Dynamically generated six-digit verification code from the authenticator app\n\n    Returns:\n        A pandas DataFrame encapsulating the MFA activated user details\n\n    Raises:\n        ValueError: If the user entered six-digit verification code is invalid\n\n    Here's an example to enable and activate MFA for the user\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import User, Client\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Check the current MFA status\n        print(User.details()[\"is_mfa_active\"])\n\n        # Enable MFA for the user\n        # The line below will generate a QR code. To finish the setup on your smartphone,\n        # scan the QR code with an authenticator app like Google Authenticator and\n        # follow the on-device instructions\n        User.enable_mfa()\n\n        # After you've completed the setup, enter the current OTP from the authenticator\n        # app to verify and enable MFA for your account\n        User.activate_mfa(otp=\"{fill in otp}\")\n\n        # Check the current MFA status\n        # The is_mfa_active flag should be set to True, if the setup is successful\n        print(User.details()[\"is_mfa_active\"])\n        ```\n    \"\"\"\n    response = Client._post_data(\n        relative_url=\"/user/mfa/activate\",\n        json=dict(user_otp=otp),\n    )\n\n    return pd.DataFrame(response, index=[0])\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.User.as_df","title":"<code>as_df(ux)</code>  <code>staticmethod</code>","text":"<p>Return the details of User instances as a pandas dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>ux</code> <code>List[User]</code> <p>List of user instances.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Details of all the User in a dataframe.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>An example of displaying the details of all active users</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, User\n\n# Authenticate with super user privileges\n# Only super users can get the list of available users\nClient.get_token(\n    username=\"{fill in super_user_username}\",\n    password=\"{fill in super_user_password}\"\n)\n\n# Display the details of all active users\n# Set the disabled parameter to True to display the details of inactive users\nux = User.ls()\nprint(User.as_df(ux))\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef as_df(ux: List[\"User\"]) -&gt; pd.DataFrame:\n\"\"\"Return the details of User instances as a pandas dataframe.\n\n    Args:\n        ux: List of user instances.\n\n    Returns:\n        Details of all the User in a dataframe.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n\n    An example of displaying the details of all active users\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Authenticate with super user privileges\n        # Only super users can get the list of available users\n        Client.get_token(\n            username=\"{fill in super_user_username}\",\n            password=\"{fill in super_user_password}\"\n        )\n\n        # Display the details of all active users\n        # Set the disabled parameter to True to display the details of inactive users\n        ux = User.ls()\n        print(User.as_df(ux))\n        ```\n    \"\"\"\n    lists = get_attributes_from_instances(ux, User.USER_COLS)  # type: ignore\n    return generate_df(lists, User.USER_COLS)\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.User.create","title":"<code>create(*, username, first_name, last_name, email, password, subscription_type, super_user=False, phone_number=None, otp=None)</code>  <code>staticmethod</code>","text":"<p>Create a new user in the server.</p> <p>To access this method, you must have super user privileges.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The new user's username. The username must be unique or an exception will be thrown.</p> required <code>first_name</code> <code>str</code> <p>The new user's first name.</p> required <code>last_name</code> <code>str</code> <p>The new user's last name.</p> required <code>email</code> <code>str</code> <p>The new user's email. The email must be unique or an exception will be thrown.</p> required <code>password</code> <code>str</code> <p>The new user's password.</p> required <code>subscription_type</code> <code>str</code> <p>User subscription type. Currently, the API supports only the following subscription types small, medium and large.</p> required <code>super_user</code> <code>bool</code> <p>If set to True, then the new user will have super user privilages. If None, then the default value False will be used to create a non-super user.</p> <code>False</code> <code>phone_number</code> <code>Optional[str]</code> <p>Phone number to be added to the user account. The phone number should follow the pattern of the country code followed by your phone number. For example, 440123456789, +440123456789, 00440123456789, +44 0123456789, and (+44) 012 345 6789 are all valid formats for registering a UK phone number.</p> <code>None</code> <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if you have activated the MFA for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame encapsulating the details of the newly created user.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ValueError</code> <p>If the username or email is already present in the server.</p> <p>Below is an example of creating a new user</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, User\n\n# Authenticate with super user privileges\nClient.get_token(\n    username=\"{fill in super_user_username}\",\n    password=\"{fill in super_user_password}\"\n)\n\n# Details required to create a new user\nusername = \"{fill in username}\"\nfirst_name = \"{fill in first_name}\"\nlast_name = \"{fill in last_name}\"\nemail = \"{fill in email}\"\npassword = \"{fill in password}\"\nsuper_user = \"{fill in super_user}\"\nsubscription_type = \"{fill in subscription_type}\"\n\n# Create a new user. To access this method, you must have super user privileges.\nnew_user = User.create(\n    username=username,\n    first_name=first_name,\n    last_name=last_name,\n    email=email,\n    password=password,\n    super_user=super_user,\n    subscription_type=subscription_type,\n)\n\n# Display the details of the newly created user\nprint(new_user)\n\n# An exception will be raised if you attempt to create a new user\n# with an already-used username or email address.\ntry:\n    User.create(\n        username=username,\n        first_name=first_name,\n        last_name=last_name,\n        email=email,\n        password=password,\n        super_user=super_user,\n        subscription_type=subscription_type,\n    )\n    print(\"Should not print this, the above line should raise an exception\")\n    raise RuntimeException()\n\nexcept ValueError as e:\n    print(\"Expected to fail, everything is fine\")\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef create(\n    *,\n    username: str,\n    first_name: str,\n    last_name: str,\n    email: str,\n    password: str,\n    subscription_type: str,\n    super_user: bool = False,\n    phone_number: Optional[str] = None,\n    otp: Optional[str] = None,\n) -&gt; pd.DataFrame:\n\"\"\"Create a new user in the server.\n\n    To access this method, you must have super user privileges.\n\n    Args:\n        username: The new user's username. The username must be unique or an exception will be thrown.\n        first_name: The new user's first name.\n        last_name: The new user's last name.\n        email: The new user's email. The email must be unique or an exception will be thrown.\n        password: The new user's password.\n        subscription_type: User subscription type. Currently, the API supports only the following subscription\n            types **small**, **medium** and **large**.\n        super_user: If set to **True**, then the new user will have super user privilages.\n            If **None**, then the default value **False** will be used to create a non-super user.\n        phone_number: Phone number to be added to the user account. The phone number should follow the pattern of the country\n            code followed by your phone number. For example, **440123456789, +440123456789, 00440123456789, +44 0123456789,\n            and (+44) 012 345 6789** are all valid formats for registering a UK phone number.\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if you have activated the MFA for your account.\n\n    Returns:\n            A pandas DataFrame encapsulating the details of the newly created user.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n        ValueError: If the OTP is invalid.\n        ValueError: If the username or email is already present in the server.\n\n    Below is an example of creating a new user\n\n    Example:\n        ```python\n\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Authenticate with super user privileges\n        Client.get_token(\n            username=\"{fill in super_user_username}\",\n            password=\"{fill in super_user_password}\"\n        )\n\n        # Details required to create a new user\n        username = \"{fill in username}\"\n        first_name = \"{fill in first_name}\"\n        last_name = \"{fill in last_name}\"\n        email = \"{fill in email}\"\n        password = \"{fill in password}\"\n        super_user = \"{fill in super_user}\"\n        subscription_type = \"{fill in subscription_type}\"\n\n        # Create a new user. To access this method, you must have super user privileges.\n        new_user = User.create(\n            username=username,\n            first_name=first_name,\n            last_name=last_name,\n            email=email,\n            password=password,\n            super_user=super_user,\n            subscription_type=subscription_type,\n        )\n\n        # Display the details of the newly created user\n        print(new_user)\n\n        # An exception will be raised if you attempt to create a new user\n        # with an already-used username or email address.\n        try:\n            User.create(\n                username=username,\n                first_name=first_name,\n                last_name=last_name,\n                email=email,\n                password=password,\n                super_user=super_user,\n                subscription_type=subscription_type,\n            )\n            print(\"Should not print this, the above line should raise an exception\")\n            raise RuntimeException()\n\n        except ValueError as e:\n            print(\"Expected to fail, everything is fine\")\n        ```\n    \"\"\"\n\n    if phone_number is not None:\n        phone_number = standardize_phone_number(phone_number)\n\n    req_json = dict(\n        username=username,\n        first_name=first_name,\n        last_name=last_name,\n        email=email,\n        subscription_type=subscription_type,\n        super_user=super_user,\n        password=password,\n        phone_number=phone_number,\n        otp=otp,\n    )\n\n    response = Client._post_data(relative_url=f\"/user/\", json=req_json)\n\n    return pd.DataFrame(response, index=[0])[User.USER_COLS]\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.User.details","title":"<code>details(user=None)</code>  <code>staticmethod</code>","text":"<p>Get user details</p> <p>Please do not pass the optional user parameter unless you are a super user. Only a super user can view details for other users.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>Optional[str]</code> <p>Account user_uuid/username to get details. If not passed, then the currently logged-in details will be returned.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Union[str, bool]]</code> <p>A dict containing the details of the user</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the user_uuid/username is invalid or the user have insufficient permission to access other user's data</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>An example of displaying the logged-in user's uuid</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import User, Client\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Display the uuid of logged-in user\n# If you are a super user, you can view the details of other users by\n# passing their uuid/username in the user parameter.\nuser_details = User.details()\nprint(user_details[\"uuid\"])\n\n# If a Non-super user tries to access other user's detail,\n# an exception will be thrown.\ntry:\n    User.details(user=\"some_other_username\")\n    print(\"Should not print this, the above line should raise an exception\")\n    raise RuntimeException()\n\nexcept ValueError as e:\n    print(\"Expected to fail, everything is fine\")\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef details(user: Optional[str] = None) -&gt; Dict[str, Union[str, bool]]:\n\"\"\"Get user details\n\n    Please do not pass the optional user parameter unless you are a super user. Only a\n    super user can view details for other users.\n\n    Args:\n        user: Account user_uuid/username to get details. If not passed, then the currently logged-in\n            details will be returned.\n\n    Returns:\n        A dict containing the details of the user\n\n    Raises:\n        ValueError: If the user_uuid/username is invalid or the user have insufficient permission to access other user's data\n        ConnectionError: If the server address is invalid or not reachable.\n\n    An example of displaying the logged-in user's uuid\n\n    Example:\n        ```python\n\n        # Importing necessary libraries\n        from  airt.client import User, Client\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Display the uuid of logged-in user\n        # If you are a super user, you can view the details of other users by\n        # passing their uuid/username in the user parameter.\n        user_details = User.details()\n        print(user_details[\"uuid\"])\n\n        # If a Non-super user tries to access other user's detail,\n        # an exception will be thrown.\n        try:\n            User.details(user=\"some_other_username\")\n            print(\"Should not print this, the above line should raise an exception\")\n            raise RuntimeException()\n\n        except ValueError as e:\n            print(\"Expected to fail, everything is fine\")\n        ```\n    \"\"\"\n    relative_url = (\n        f\"/user/details?user_uuid_or_name={user}\"\n        if user is not None\n        else f\"/user/details\"\n    )\n    return Client._get_data(relative_url=relative_url)\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.User.disable","title":"<code>disable(user, otp=None)</code>  <code>staticmethod</code>","text":"<p>Disable one or more users.</p> <p>To access this method, you must have super user privileges.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>Union[str, List[str]]</code> <p>user_uuid/username to disabled. To disable multiple users, please pass the uuids/names as a list.</p> required <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if you have activated the MFA for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame encapsulating the details of the disabled user.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example to disable a user</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, User\n\n# Authenticate with super user privileges\nClient.get_token(\n    username=\"{fill in super_user_username}\",\n    password=\"{fill in super_user_password}\"\n)\n\n# Optional Step: For demonstration purpose, create a new user\nusername = \"{fill in username}\"\nUser.create(\n    username=username,\n    first_name=\"{fill in first_name}\",\n    last_name=\"{fill in last_name}\",\n    email=\"{fill in email}\",\n    password=\"{fill in password}\",\n    subscription_type=\"{fill in subscription_type}\",\n)\n\n# Display the details of the user you want to disable using their username/uuid\nprint(User.details(username))\n\n# Disable the user\n# To disable multiple users, pass a list of username/uuid\nUser.disable(user=username)\n\n# Check whether the user has been disabled\n# The disabled flag should be set to True, if the disable was sucessful\nprint(User.details(username))\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef disable(user: Union[str, List[str]], otp: Optional[str] = None) -&gt; pd.DataFrame:\n\"\"\"Disable one or more users.\n\n    To access this method, you must have super user privileges.\n\n    Args:\n        user: user_uuid/username to disabled. To disable multiple users, please pass the uuids/names as a list.\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if you have activated the MFA for your account.\n\n    Returns:\n        A pandas DataFrame encapsulating the details of the disabled user.\n\n    Raises:\n        ValueError: If the OTP is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example to disable a user\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Authenticate with super user privileges\n        Client.get_token(\n            username=\"{fill in super_user_username}\",\n            password=\"{fill in super_user_password}\"\n        )\n\n        # Optional Step: For demonstration purpose, create a new user\n        username = \"{fill in username}\"\n        User.create(\n            username=username,\n            first_name=\"{fill in first_name}\",\n            last_name=\"{fill in last_name}\",\n            email=\"{fill in email}\",\n            password=\"{fill in password}\",\n            subscription_type=\"{fill in subscription_type}\",\n        )\n\n        # Display the details of the user you want to disable using their username/uuid\n        print(User.details(username))\n\n        # Disable the user\n        # To disable multiple users, pass a list of username/uuid\n        User.disable(user=username)\n\n        # Check whether the user has been disabled\n        # The disabled flag should be set to True, if the disable was sucessful\n        print(User.details(username))\n        ```\n    \"\"\"\n    _users = user if isinstance(user, list) else [user]\n    response_list = []\n    for user in _users:\n        user_uuid = User.details(user=user)[\"uuid\"]\n        url = f\"/user/{user_uuid}\"\n        response = Client._delete_data(\n            relative_url=check_and_append_otp_query_param(url, otp)\n        )\n        response_list.append(response)\n\n    return pd.DataFrame(response_list)[User.USER_COLS]\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.User.disable_mfa","title":"<code>disable_mfa(user=None, otp=None)</code>  <code>staticmethod</code>","text":"<p>Disable MFA for the user</p> <p>We currently support two types of OTPs for disabling multi-factor authentication on your account.</p> <p>If you have access to the authenticator app, enter the app's dynamically generated six-digit verification code(OTP). If you don't have access to the authentication app, you can have an OTP sent to your registered phone number via SMS.</p> <p>To receive OTP via SMS, first call the <code>send_sms_otp</code> method, which will send the OTP to your registered phone number. Once you have the OTP, call the <code>disable_mfa</code> method to deactivate MFA for your account.</p> <p>Currently, we only support the above two methods for disabling MFA. If you do not have access to the authenticator app or your registered phone number, please contact your administrator.</p> <p>Note</p> <p>Please do not pass the user parameter unless you are a super user. Only a super user can disable MFA for other users.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>Optional[str]</code> <p>Account user_uuid/username to disable MFA. If not passed, then the default value None will be used to disable MFA for the currently logged-in user.</p> <code>None</code> <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app or the OTP you have received via SMS.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame encapsulating the MFA disabled user details</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If a non-super user tries to disable MFA for other users</p> <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ValueError</code> <p>If the user_uuid/username is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example of disabling MFA for the currently logged in user using the verification code generated by the authentication application. The example assumes that you have already activated the MFA on your account and have access to the authentication application.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, User\n\n# Optional Step: Skip this step if you've already logged-in\n# Authenticate. Pass the current OTP from the authenticator app below\notp=\"{fill in otp}\"\nClient.get_token(\n    username=\"{fill in username}\",\n    password=\"{fill in password}\",\n    otp=otp\n)\n\n# Check the current MFA status\nprint(User.details()[\"is_mfa_active\"])\n\n# Disable MFA for the user\nUser.disable_mfa(otp=otp)\n\n# Check the current MFA status\n# The is_mfa_active flag should be set to False, if the disable was successful\nprint(User.details()[\"is_mfa_active\"])\n</code></pre> <p>Here's an example of disabling MFA for the currently logged in user using the SMS OTP. The example assumes that you have already registered and validated your phone number on our servers.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, User\n\n# Optional Step: Request OTP via SMS to authenticate\n# If you've already logged in, you can skip the two optional steps\n# If you've already have a valid token, skip the below optional step\n# and call Client.set_token instead of Client.get_token\nusername=\"{fill in username}\"\nUser.send_sms_otp(\n    username=username,\n    message_template_name=\"get_token\" # Don't change the message_template_name\n)\n\n# Optional Step: Authenticate using SMS OTP\n# The send_sms_otp method will send the OTP via SMS to the registered\n# phone number, which you must fill below\npassword=\"{fill in password}\"\notp=\"{fill in otp}\"\nClient.get_token(username=username, password=password, otp=otp)\n\n# Check the current MFA status\nprint(User.details()[\"is_mfa_active\"])\n\n# Request OTP via SMS to disable MFA\nUser.send_sms_otp(\n    username=username,\n    message_template_name=\"disable_mfa\" # Don't change the message_template_name\n)\n\n# The send_sms_otp method will send the OTP via SMS to the registered\n# phone number, which you must fill below\nUser.disable_mfa(otp=\"{fill in otp}\")\n\n# Check the current MFA status\n# The is_mfa_active flag should be set to False, if the disable was successful\nprint(User.details()[\"is_mfa_active\"])\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef disable_mfa(\n    user: Optional[str] = None, otp: Optional[str] = None\n) -&gt; pd.DataFrame:\n\"\"\"Disable MFA for the user\n\n    We currently support two types of OTPs for disabling multi-factor authentication on your account.\n\n    If you have access to the authenticator app, enter the app's dynamically generated six-digit verification\n    code(OTP). If you don't have access to the authentication app, you can have an OTP sent to your registered\n    phone number via SMS.\n\n    To receive OTP via SMS, first call the `send_sms_otp` method, which will send the OTP to your registered\n    phone number. Once you have the OTP, call the `disable_mfa` method to deactivate MFA for your account.\n\n    Currently, we only support the above two methods for disabling MFA. If you do not have access to the authenticator\n    app or your registered phone number, please contact your administrator.\n\n    !!! note\n\n        Please do not pass the user parameter unless you are a super user. Only\n        a super user can disable MFA for other users.\n\n    Args:\n        user: Account user_uuid/username to disable MFA. If not passed, then the default\n            value **None** will be used to disable MFA for the currently logged-in user.\n        otp: Dynamically generated six-digit verification code from the authenticator app or\n            the OTP you have received via SMS.\n\n    Returns:\n        A pandas DataFrame encapsulating the MFA disabled user details\n\n    Raises:\n        ValueError: If a non-super user tries to disable MFA for other users\n        ValueError: If the OTP is invalid.\n        ValueError: If the user_uuid/username is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example of disabling MFA for the currently logged in user using the verification code generated by the authentication application.\n    The example assumes that you have already activated the MFA on your account and have access to the authentication application.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Optional Step: Skip this step if you've already logged-in\n        # Authenticate. Pass the current OTP from the authenticator app below\n        otp=\"{fill in otp}\"\n        Client.get_token(\n            username=\"{fill in username}\",\n            password=\"{fill in password}\",\n            otp=otp\n        )\n\n        # Check the current MFA status\n        print(User.details()[\"is_mfa_active\"])\n\n        # Disable MFA for the user\n        User.disable_mfa(otp=otp)\n\n        # Check the current MFA status\n        # The is_mfa_active flag should be set to False, if the disable was successful\n        print(User.details()[\"is_mfa_active\"])\n        ```\n\n    Here's an example of disabling MFA for the currently logged in user using the SMS OTP. The example assumes that you have\n    already registered and validated your phone number on our servers.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Optional Step: Request OTP via SMS to authenticate\n        # If you've already logged in, you can skip the two optional steps\n        # If you've already have a valid token, skip the below optional step\n        # and call Client.set_token instead of Client.get_token\n        username=\"{fill in username}\"\n        User.send_sms_otp(\n            username=username,\n            message_template_name=\"get_token\" # Don't change the message_template_name\n        )\n\n        # Optional Step: Authenticate using SMS OTP\n        # The send_sms_otp method will send the OTP via SMS to the registered\n        # phone number, which you must fill below\n        password=\"{fill in password}\"\n        otp=\"{fill in otp}\"\n        Client.get_token(username=username, password=password, otp=otp)\n\n        # Check the current MFA status\n        print(User.details()[\"is_mfa_active\"])\n\n        # Request OTP via SMS to disable MFA\n        User.send_sms_otp(\n            username=username,\n            message_template_name=\"disable_mfa\" # Don't change the message_template_name\n        )\n\n        # The send_sms_otp method will send the OTP via SMS to the registered\n        # phone number, which you must fill below\n        User.disable_mfa(otp=\"{fill in otp}\")\n\n        # Check the current MFA status\n        # The is_mfa_active flag should be set to False, if the disable was successful\n        print(User.details()[\"is_mfa_active\"])\n        ```\n    \"\"\"\n\n    user_uuid = User.details(user=user)[\"uuid\"]\n    url = f\"/user/mfa/{user_uuid}/disable\"\n    response = Client._delete_data(\n        relative_url=check_and_append_otp_query_param(url, otp)\n    )\n\n    return pd.DataFrame(response, index=[0])\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.User.disable_sso","title":"<code>disable_sso(sso_provider, user=None, otp=None)</code>  <code>staticmethod</code>","text":"<p>Disable Single sign-on (SSO) for the user</p> <p>Please do not pass the user parameter unless you are a super user. Only a super user can disable SSO for other users.</p> <p>Parameters:</p> Name Type Description Default <code>sso_provider</code> <code>str</code> <p>The name of the Single sign-on (SSO) provider you want to disable. At present, the API only supports \"google\" and \"github\" as valid SSO identity providers.</p> required <code>user</code> <code>Optional[str]</code> <p>Account user_uuid/username to disable SSO. If not passed, then the default value None will be used to disable SSO for the currently logged-in user.</p> <code>None</code> <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if you have activated the MFA for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>A pandas DataFrame encapsulating the SSO disabled user details</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If a non-super user tries to disable SSO for other users</p> <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example to disable the Single sign-on (SSO)</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import User, Client\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Optional Step: For demonstration purpose, enable Single sign-on (SSO)\n# for the user\nsso_provider=\"{fill in sso_provider}\"\nsso_email=\"{fill in sso_email}\"\nUser.enable_sso(sso_provider=sso_provider, sso_email=sso_email)\nsso_url = Client.get_token(sso_provider=sso_provider) # Authenticate using SSO\nprint(sso_url)\nClient.set_sso_token() # Set SSO token\n\n# Disable the Single sign-on (SSO) for the provider\nprint(User.disable_sso(sso_provider=sso_provider))\n\n# If you try to disable an already disabled SSO provider, an exception\n# will be raised\ntry:\n    User.disable_sso(sso_provider=sso_provider)\n    print(\"Should not print this, the above line should raise an exception\")\n    raise RuntimeException()\n\nexcept ValueError as e:\n    print(\"Expected to fail, everything is fine\")\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef disable_sso(\n    sso_provider: str,\n    user: Optional[str] = None,\n    otp: Optional[str] = None,\n) -&gt; str:\n\"\"\"Disable Single sign-on (SSO) for the user\n\n    Please do not pass the user parameter unless you are a super user. Only\n    a super user can disable SSO for other users.\n\n    Args:\n        sso_provider: The name of the Single sign-on (SSO) provider you want to disable.\n            At present, the API only supports **\"google\"** and **\"github\"** as valid SSO identity providers.\n        user: Account user_uuid/username to disable SSO. If not passed, then the default\n            value **None** will be used to disable SSO for the currently logged-in user.\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if you have activated the MFA for your account.\n\n    Returns:\n        A pandas DataFrame encapsulating the SSO disabled user details\n\n    Raises:\n        ValueError: If a non-super user tries to disable SSO for other users\n        ValueError: If the OTP is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example to disable the Single sign-on (SSO)\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import User, Client\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Optional Step: For demonstration purpose, enable Single sign-on (SSO)\n        # for the user\n        sso_provider=\"{fill in sso_provider}\"\n        sso_email=\"{fill in sso_email}\"\n        User.enable_sso(sso_provider=sso_provider, sso_email=sso_email)\n        sso_url = Client.get_token(sso_provider=sso_provider) # Authenticate using SSO\n        print(sso_url)\n        Client.set_sso_token() # Set SSO token\n\n        # Disable the Single sign-on (SSO) for the provider\n        print(User.disable_sso(sso_provider=sso_provider))\n\n        # If you try to disable an already disabled SSO provider, an exception\n        # will be raised\n        try:\n            User.disable_sso(sso_provider=sso_provider)\n            print(\"Should not print this, the above line should raise an exception\")\n            raise RuntimeException()\n\n        except ValueError as e:\n            print(\"Expected to fail, everything is fine\")\n        ```\n    \"\"\"\n\n    user_uuid = User.details(user=user)[\"uuid\"]\n    url = f\"/user/sso/{user_uuid}/disable/{sso_provider}\"\n    response = Client._delete_data(\n        relative_url=check_and_append_otp_query_param(url, otp)\n    )\n\n    success_msg = f\"Single sign-on (SSO) is successfully disabled for {response['sso_provider']}.\"\n\n    return success_msg\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.User.enable","title":"<code>enable(user, otp=None)</code>  <code>staticmethod</code>","text":"<p>Enable one or more disabled users.</p> <p>To access this method, you must have super user privileges.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>Union[str, List[str]]</code> <p>user_uuid/username to enable. To enable multiple users, please pass the uuids/names as a list.</p> required <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if you have activated the MFA for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame encapsulating the details of the enabled user.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example to enable a user</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, User\n\n# Authenticate with super user privileges\nClient.get_token(\n    username=\"{fill in super_user_username}\",\n    password=\"{fill in super_user_password}\"\n)\n\n# Optional Step: For demonstration purpose, create a new user and disable them\nusername = \"{fill in username}\"\nUser.create(\n    username=username,\n    first_name=\"{fill in first_name}\",\n    last_name=\"{fill in last_name}\",\n    email=\"{fill in email}\",\n    password=\"{fill in password}\",\n    subscription_type=\"{fill in subscription_type}\",\n)\nUser.disable(user=username)\n\n# Display the details of the user you want to enable using their username/uuid\nprint(User.details(username))\n\n# Enable the user\n# To enable multiple users, pass a list of username/uuid\nUser.enable(user=username)\n\n# Check whether the user has been enabled\n# The disabled flag should be set to False, if the enable was sucessful\nprint(User.details(username))\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef enable(user: Union[str, List[str]], otp: Optional[str] = None) -&gt; pd.DataFrame:\n\"\"\"Enable one or more disabled users.\n\n    To access this method, you must have super user privileges.\n\n    Args:\n        user: user_uuid/username to enable. To enable multiple users, please pass the uuids/names as a list.\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if you have activated the MFA for your account.\n\n    Returns:\n        A pandas DataFrame encapsulating the details of the enabled user.\n\n    Raises:\n        ValueError: If the OTP is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example to enable a user\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Authenticate with super user privileges\n        Client.get_token(\n            username=\"{fill in super_user_username}\",\n            password=\"{fill in super_user_password}\"\n        )\n\n        # Optional Step: For demonstration purpose, create a new user and disable them\n        username = \"{fill in username}\"\n        User.create(\n            username=username,\n            first_name=\"{fill in first_name}\",\n            last_name=\"{fill in last_name}\",\n            email=\"{fill in email}\",\n            password=\"{fill in password}\",\n            subscription_type=\"{fill in subscription_type}\",\n        )\n        User.disable(user=username)\n\n        # Display the details of the user you want to enable using their username/uuid\n        print(User.details(username))\n\n        # Enable the user\n        # To enable multiple users, pass a list of username/uuid\n        User.enable(user=username)\n\n        # Check whether the user has been enabled\n        # The disabled flag should be set to False, if the enable was sucessful\n        print(User.details(username))\n\n        ```\n    \"\"\"\n\n    _users = user if isinstance(user, list) else [user]\n    response_list = []\n    for user in _users:\n        user_uuid = User.details(user=user)[\"uuid\"]\n        url = f\"/user/{user_uuid}/enable\"\n        response = Client._get_data(\n            relative_url=check_and_append_otp_query_param(url, otp)\n        )\n        response_list.append(response)\n\n    return pd.DataFrame(response_list)[User.USER_COLS]\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.User.enable_mfa","title":"<code>enable_mfa(otp=None)</code>  <code>staticmethod</code>","text":"<p>Enable MFA for the user</p> <p>This method will generate a QR code. To finish the setup on your smartphone, scan the QR code with an authenticator app such as Google Authenticator and follow the on-device instructions. After you've completed the setup, call the <code>activate_mfa</code> method and pass the current OTP from the authenticator application to verify and enable MFA for your account</p> <p>Parameters:</p> Name Type Description Default <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if you have activated the MFA for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>PilImage</code> <p>The generated QR code</p> <p>Here's an example to enable and activate MFA for the user</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import User, Client\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Check the current MFA status\nprint(User.details()[\"is_mfa_active\"])\n\n# Enable MFA for the user\n# The line below will generate a QR code. To finish the setup on your smartphone,\n# scan the QR code with an authenticator app like Google Authenticator and\n# follow the on-device instructions\nUser.enable_mfa()\n\n# After you've completed the setup, enter the current OTP from the authenticator\n# app to verify and enable MFA for your account\nUser.activate_mfa(otp=\"{fill in otp}\")\n\n# Check the current MFA status\n# The is_mfa_active flag should be set to True, if the setup is successful\nprint(User.details()[\"is_mfa_active\"])\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef enable_mfa(otp: Optional[str] = None) -&gt; PilImage:\n\"\"\"Enable MFA for the user\n\n    This method will generate a QR code. To finish the setup on your smartphone, scan the\n    QR code with an authenticator app such as Google Authenticator and follow the on-device\n    instructions. After you've completed the setup, call the `activate_mfa` method and pass the\n    current OTP from the authenticator application to verify and enable MFA for your account\n\n    Args:\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if you have activated the MFA for your account.\n\n    Returns:\n        The generated QR code\n\n    Here's an example to enable and activate MFA for the user\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import User, Client\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Check the current MFA status\n        print(User.details()[\"is_mfa_active\"])\n\n        # Enable MFA for the user\n        # The line below will generate a QR code. To finish the setup on your smartphone,\n        # scan the QR code with an authenticator app like Google Authenticator and\n        # follow the on-device instructions\n        User.enable_mfa()\n\n        # After you've completed the setup, enter the current OTP from the authenticator\n        # app to verify and enable MFA for your account\n        User.activate_mfa(otp=\"{fill in otp}\")\n\n        # Check the current MFA status\n        # The is_mfa_active flag should be set to True, if the setup is successful\n        print(User.details()[\"is_mfa_active\"])\n        ```\n    \"\"\"\n    qr_code = qrcode.make(User._get_mfa_provision_url(otp))\n\n    return qr_code\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.User.enable_sso","title":"<code>enable_sso(sso_provider, sso_email, otp=None)</code>  <code>staticmethod</code>","text":"<p>Enable Single sign-on (SSO) for the user</p> <p>Parameters:</p> Name Type Description Default <code>sso_provider</code> <code>str</code> <p>Name of the Single sign-on (SSO) identity provider. At present, the API only supports \"google\" and \"github\" as valid SSO identity providers.</p> required <code>sso_email</code> <code>str</code> <p>Email id to be used for SSO authentication</p> required <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if you have activated the MFA for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>A pandas DataFrame encapsulating the user details</p> <p>Here's an example of authenticating with Single sign-on (SSO) using google and setting the newly generated token to interact with the captn service.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import User, Client\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Enable single sign-on (SSO) and use google as the provider\nsso_provider=\"google\"\nsso_email=\"{fill in sso_email}\"\nUser.enable_sso(sso_provider=sso_provider, sso_email=sso_email)\n\n# Authenticate using Single sign-on (SSO)\n# To generate a token using SSO, you must first authenticate with the provider.\n# The command below will generate an authorization URL for you.\n# Please copy and paste it into your preferred browser and complete the\n# SSO provider authentication within 10 minutes. Otherwise, the SSO login\n# will time out and you will need to call the get_token method again.\nsso_url = Client.get_token(sso_provider=sso_provider)\nprint(sso_url)\n\n# Once the provider authentication is successful, call the below method to\n# set the generated token\nClient.set_sso_token()\n\n# If set_sso_token fails, the line below will throw an error.\nprint(User.details())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef enable_sso(sso_provider: str, sso_email: str, otp: Optional[str] = None) -&gt; str:\n\"\"\"Enable Single sign-on (SSO) for the user\n\n    Args:\n        sso_provider: Name of the Single sign-on (SSO) identity provider.\n            At present, the API only supports **\"google\"** and **\"github\"** as valid SSO identity providers.\n        sso_email: Email id to be used for SSO authentication\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if you have activated the MFA for your account.\n\n    Returns:\n        A pandas DataFrame encapsulating the user details\n\n    Here's an example of authenticating with Single sign-on (SSO) using google and\n    setting the newly generated token to interact with the airt service.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import User, Client\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Enable single sign-on (SSO) and use google as the provider\n        sso_provider=\"google\"\n        sso_email=\"{fill in sso_email}\"\n        User.enable_sso(sso_provider=sso_provider, sso_email=sso_email)\n\n        # Authenticate using Single sign-on (SSO)\n        # To generate a token using SSO, you must first authenticate with the provider.\n        # The command below will generate an authorization URL for you.\n        # Please copy and paste it into your preferred browser and complete the\n        # SSO provider authentication within 10 minutes. Otherwise, the SSO login\n        # will time out and you will need to call the get_token method again.\n        sso_url = Client.get_token(sso_provider=sso_provider)\n        print(sso_url)\n\n        # Once the provider authentication is successful, call the below method to\n        # set the generated token\n        Client.set_sso_token()\n\n        # If set_sso_token fails, the line below will throw an error.\n        print(User.details())\n        ```\n    \"\"\"\n    response = Client._post_data(\n        relative_url=f\"/user/sso/enable\",\n        json=dict(sso_provider=sso_provider, sso_email=sso_email, otp=otp),\n    )\n    success_msg = f\"Single sign-on (SSO) is successfully enabled for {sso_provider}. Please use {response['sso_email']} as the email address while authenticating with {sso_provider}.\"\n\n    return success_msg\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.User.ls","title":"<code>ls(offset=0, limit=100, disabled=False)</code>  <code>staticmethod</code>","text":"<p>Return the list of User instances available in the server.</p> <p>To access this method, you must have super user privileges.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>int</code> <p>The number of users to offset at the beginning. If None, then the default value 0 will be used.</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of users to return from the server. If None, then the default value 100 will be used.</p> <code>100</code> <code>disabled</code> <code>bool</code> <p>If set to True, then only the deleted users will be returned. Else, the default value False will be used to return only the list of active users.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[User]</code> <p>A list of User instances available in the server.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>An example of displaying the details of all active users</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, User\n\n# Authenticate with super user privileges\nClient.get_token(\n    username=\"{fill in super_user_username}\",\n    password=\"{fill in super_user_password}\"\n)\n\n# Display the details of all active users\n# Set the disabled parameter to True to display the details of inactive users\nux = User.ls()\nprint(User.as_df(ux))\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef ls(\n    offset: int = 0,\n    limit: int = 100,\n    disabled: bool = False,\n) -&gt; List[\"User\"]:\n\"\"\"Return the list of User instances available in the server.\n\n    To access this method, you must have super user privileges.\n\n    Args:\n        offset: The number of users to offset at the beginning. If **None**, then the default value **0** will be used.\n        limit: The maximum number of users to return from the server. If None, then the default value 100 will be used.\n        disabled: If set to **True**, then only the deleted users will be returned. Else, the default value **False** will\n            be used to return only the list of active users.\n\n    Returns:\n        A list of User instances available in the server.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n\n    An example of displaying the details of all active users\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Authenticate with super user privileges\n        Client.get_token(\n            username=\"{fill in super_user_username}\",\n            password=\"{fill in super_user_password}\"\n        )\n\n        # Display the details of all active users\n        # Set the disabled parameter to True to display the details of inactive users\n        ux = User.ls()\n        print(User.as_df(ux))\n        ```\n    \"\"\"\n    users = Client._get_data(\n        relative_url=f\"/user/?disabled={disabled}&amp;offset={offset}&amp;limit={limit}\"\n    )\n\n    ux = [\n        User(\n            uuid=user[\"uuid\"],\n            username=user[\"username\"],\n            first_name=user[\"first_name\"],\n            last_name=user[\"last_name\"],\n            email=user[\"email\"],\n            subscription_type=user[\"subscription_type\"],\n            super_user=user[\"super_user\"],\n            disabled=user[\"disabled\"],\n            created=user[\"created\"],\n            is_mfa_active=user[\"is_mfa_active\"],\n            phone_number=user[\"phone_number\"],\n            is_phone_number_verified=user[\"is_phone_number_verified\"],\n        )\n        for user in users\n    ]\n\n    return ux\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.User.register_phone_number","title":"<code>register_phone_number(phone_number=None, otp=None)</code>  <code>staticmethod</code>","text":"<p>Register a phone number</p> <p>Registering your phone number will help you to regain access in case you forget your password and cannot access your account. To receive the OTP via SMS, you need to register and validate your phone number. Calling this method will send an OTP via SMS to the phone number and you need to call the <code>validate_phone_number</code> method with the OTP you have received to complete the registration and validation process.</p> <p>Parameters:</p> Name Type Description Default <code>phone_number</code> <code>Optional[str]</code> <p>Phone number to register. The phone number should follow the pattern of the country code followed by your phone number. For example, 440123456789, +440123456789, 00440123456789, +44 0123456789, and (+44) 012 345 6789 are all valid formats for registering a UK phone number. If the phone number is not passed in the arguments, then the OTP will be sent to the phone number that was already registered to the user's account.</p> <code>None</code> <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if you have activated the MFA for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Union[str, bool]]</code> <p>A dict containing the updated user details</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example of registering and validating a new phone number for the currently logged-in user</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, User\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Display the phone number that is currently registered\n# If no phone number has been registered, None will be displayed\nprint(User.details()[\"phone_number\"])\n\n# Register a new phone number.\n# If you only want to validate an existing phone number, call the\n# method below without the phone_number parameter\nUser.register_phone_number(phone_number=\"{fill in phone_number}\")\n\n# The above method will send the OTP via SMS to the specified phone number,\n# which you must enter below to complete the registration process\nUser.validate_phone_number(otp=\"{fill in otp}\")\n\n# Check whether the phone number has been updated and verified\n# The is_phone_number_verified flag should be set to True, if the\n# registration is successful\nuser_details = User.details()\nprint(user_details[\"phone_number\"])\nprint(user_details[\"is_phone_number_verified\"])\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef register_phone_number(\n    phone_number: Optional[str] = None,\n    otp: Optional[str] = None,\n) -&gt; Dict[str, Union[str, bool]]:\n\"\"\"Register a phone number\n\n    Registering your phone number will help you to regain access in case you forget your password and cannot access\n    your account. To receive the OTP via SMS, you need to register and validate your phone number. Calling this\n    method will send an OTP via SMS to the phone number and you need to call the `validate_phone_number` method\n    with the OTP you have received to complete the registration and validation process.\n\n    Args:\n        phone_number: Phone number to register. The phone number should follow the pattern of the country\n            code followed by your phone number. For example, **440123456789, +440123456789,\n            00440123456789, +44 0123456789, and (+44) 012 345 6789** are all valid formats for registering a\n            UK phone number. If the phone number is not passed in the arguments, then the OTP will be sent to\n            the phone number that was already registered to the user's account.\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if you have activated the MFA for your account.\n\n    Returns:\n        A dict containing the updated user details\n\n    Raises:\n        ValueError: If the OTP is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example of registering and validating a new phone number for the currently logged-in user\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Display the phone number that is currently registered\n        # If no phone number has been registered, None will be displayed\n        print(User.details()[\"phone_number\"])\n\n        # Register a new phone number.\n        # If you only want to validate an existing phone number, call the\n        # method below without the phone_number parameter\n        User.register_phone_number(phone_number=\"{fill in phone_number}\")\n\n        # The above method will send the OTP via SMS to the specified phone number,\n        # which you must enter below to complete the registration process\n        User.validate_phone_number(otp=\"{fill in otp}\")\n\n        # Check whether the phone number has been updated and verified\n        # The is_phone_number_verified flag should be set to True, if the\n        # registration is successful\n        user_details = User.details()\n        print(user_details[\"phone_number\"])\n        print(user_details[\"is_phone_number_verified\"])\n        ```\n    \"\"\"\n    if phone_number is not None:\n        phone_number = standardize_phone_number(phone_number)\n\n    req_json = dict(phone_number=phone_number, otp=otp)\n    return Client._post_data(\n        relative_url=\"/user/register_phone_number\", json=req_json\n    )\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.User.reset_password","title":"<code>reset_password(username, new_password, otp)</code>  <code>staticmethod</code>","text":"<p>Resets the password of an account either using a TOTP or SMS OTP.</p> <p>We currently support two types of OTPs to reset the password for your account and you don't have to be logged in to call this method</p> <p>If you have already activated the MFA for your account, then you can either pass the dynamically generated six-digit verification code from the authenticator app (TOTP) or you can also request an OTP via SMS to your registered phone number.</p> <p>If the MFA is not activated already, then you can only request the OTP via SMS to your registered phone number.</p> <p>To get OTP by SMS, you must first call <code>send_sms_otp</code> method which will send the OTP to your registered phone number. Once you have the OTP with you, then call this method with the OTP to reset your password.</p> <p>Currently, we only support the above two methods for resetting the password. In case, you don't have MFA enabled or don't have access to your registered phone number, please contact your administrator.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>Account username to reset the password</p> required <code>new_password</code> <code>str</code> <p>New password to set for the account</p> required <code>otp</code> <code>str</code> <p>Dynamically generated six-digit verification code from the authenticator app or the OTP you have received via SMS.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The password reset status message</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the username or OTP is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example for resetting the password using the verification code generated by the authentication application. The example assumes that you have already activated the MFA on your account and have access to the authentication application.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, User\n\n# Details required to reset the password\nusername = \"{fill in username}\"\nnew_password = \"{fill in new_password}\"\notp = \"{fill in otp}\" # OTP generated by the authenticator app\n\n# Reset the password\nUser.reset_password(username=username, new_password=new_password, otp=otp)\n\n# Authenticate using the new credentials\nClient.get_token(username=username, password=new_password, otp=otp)\n\n# Check if get_token is successful\nprint(User.details())\n</code></pre> <p>Here's an example of a Non-MFA user resetting their password using the SMS OTP. The example assumes that you have already registered and validated your phone number on our servers.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, User\n\n# Request OTP via SMS to the registered phone number\n# Please do not change the message_template_name\nusername=\"{fill in username}\"\nUser.send_sms_otp(username=username, message_template_name=\"reset_password\")\n\n# The above method will send the OTP via SMS to the registered phone number,\n# which you must fill below along with your new password\nnew_password = \"{fill in new_password}\"\notp = \"{fill in otp}\" # OTP received via SMS\n\n# Reset the password\nUser.reset_password(username=username, new_password=new_password, otp=otp)\n\n# Authenticate using the new credentials\n# MFA users must pass the otp generated by the authenticator app below\nClient.get_token(username=username, password=new_password)\n\n# Check if get_token is successful\nprint(User.details())\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef reset_password(username: str, new_password: str, otp: str) -&gt; str:\n\"\"\"Resets the password of an account either using a TOTP or SMS OTP.\n\n    We currently support two types of OTPs to reset the password for your account and you don't have to be logged\n    in to call this method\n\n    If you have already activated the MFA for your account, then you can either pass the dynamically generated\n    six-digit verification code from the authenticator app (TOTP) or you can also request an OTP via SMS to your registered phone number.\n\n    If the MFA is not activated already, then you can only request the OTP via SMS to your registered phone number.\n\n    To get OTP by SMS, you must first call `send_sms_otp` method which will send the OTP to your registered\n    phone number. Once you have the OTP with you, then call this method with the OTP to reset your password.\n\n    Currently, we only support the above two methods for resetting the password. In case, you don't have MFA enabled or don't\n    have access to your registered phone number, please contact your administrator.\n\n    Args:\n        username: Account username to reset the password\n        new_password: New password to set for the account\n        otp: Dynamically generated six-digit verification code from the authenticator app or the OTP you have received\n            via SMS.\n\n    Returns:\n        The password reset status message\n\n    Raises:\n        ValueError: If the username or OTP is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example for resetting the password using the verification code generated by the authentication application.\n    The example assumes that you have already activated the MFA on your account and have access to the authentication application.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Details required to reset the password\n        username = \"{fill in username}\"\n        new_password = \"{fill in new_password}\"\n        otp = \"{fill in otp}\" # OTP generated by the authenticator app\n\n        # Reset the password\n        User.reset_password(username=username, new_password=new_password, otp=otp)\n\n        # Authenticate using the new credentials\n        Client.get_token(username=username, password=new_password, otp=otp)\n\n        # Check if get_token is successful\n        print(User.details())\n        ```\n\n    Here's an example of a Non-MFA user resetting their password using the SMS OTP. The example assumes that you have already registered\n    and validated your phone number on our servers.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Request OTP via SMS to the registered phone number\n        # Please do not change the message_template_name\n        username=\"{fill in username}\"\n        User.send_sms_otp(username=username, message_template_name=\"reset_password\")\n\n        # The above method will send the OTP via SMS to the registered phone number,\n        # which you must fill below along with your new password\n        new_password = \"{fill in new_password}\"\n        otp = \"{fill in otp}\" # OTP received via SMS\n\n        # Reset the password\n        User.reset_password(username=username, new_password=new_password, otp=otp)\n\n        # Authenticate using the new credentials\n        # MFA users must pass the otp generated by the authenticator app below\n        Client.get_token(username=username, password=new_password)\n\n        # Check if get_token is successful\n        print(User.details())\n        ```\n    \"\"\"\n    req_json = dict(username=username, new_password=new_password, otp=otp)\n    return Client._post_data(relative_url=\"/user/reset_password\", json=req_json)  # type: ignore\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.User.send_sms_otp","title":"<code>send_sms_otp(username, message_template_name)</code>  <code>staticmethod</code>","text":"<p>Send OTP via SMS to the user's registered phone number</p> <p>This method does not require a login, and you should only use it to reset your password, disable MFA, or generate a new token using SMS OTP.</p> <p>Calling this method will only send an OTP to your registered phone number via SMS. Following this method call, you should explicitly call <code>reset_password</code>, <code>disable_mfa</code>, or <code>Client.get_token</code> to complete the operation with the SMS OTP.</p> <p>Please remember to pass a valid message_template_name along with the request. At present, the API supports \"reset_password\", \"disable_mfa\" and \"get_token\" as valid message templates.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>Account username to send the OTP</p> required <code>message_template_name</code> <code>str</code> <p>The message template to use while sending the OTP via SMS. At present, the API supports \"reset_password\", \"disable_mfa\" and \"get_token\" as valid message templates</p> required <p>Returns:</p> Type Description <code>str</code> <p>The SMS status message</p> <p>Here's an example of a Non-MFA user resetting their password using the SMS OTP. The example assumes that you have already registered and validated your phone number on our servers.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, User\n\n# Request OTP via SMS to the registered phone number\n# Please do not change the message_template_name\nusername=\"{fill in username}\"\nUser.send_sms_otp(username=username, message_template_name=\"reset_password\")\n\n# The above method will send the OTP via SMS to the registered phone number,\n# which you must fill below along with your new password\nnew_password = \"{fill in new_password}\"\notp = \"{fill in otp}\" # OTP received via SMS\n\n# Reset the password\nUser.reset_password(username=username, new_password=new_password, otp=otp)\n\n# Authenticate using the new credentials\n# MFA users must pass the otp generated by the authenticator app below\nClient.get_token(username=username, password=new_password)\n\n# Check if get_token is successful\nprint(User.details())\n</code></pre> <p>Here's an example of how to disable MFA with SMS OTP, assuming you've already registered and validated your phone number on our servers but don't have a valid token.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, User\n\n# Optional Step: Request OTP via SMS to authenticate\n# If you've already logged in, you can skip the two optional steps\n# If you've already have a valid token, skip the below optional step\n# and call Client.set_token instead of Client.get_token\nusername=\"{fill in username}\"\nUser.send_sms_otp(\n    username=username,\n    message_template_name=\"get_token\" # Don't change the message_template_name\n)\n\n# Optional Step: Authenticate using SMS OTP\n# The send_sms_otp method will send the OTP via SMS to the registered\n# phone number, which you must fill below\npassword=\"{fill in password}\"\notp=\"{fill in otp}\"\nClient.get_token(username=username, password=password, otp=otp)\n\n# Check the current MFA status\nprint(User.details()[\"is_mfa_active\"])\n\n# Request OTP via SMS to disable MFA\nUser.send_sms_otp(\n    username=username,\n    message_template_name=\"disable_mfa\" # Don't change the message_template_name\n)\n\n# The send_sms_otp method will send the OTP via SMS to the registered\n# phone number, which you must fill below\nUser.disable_mfa(otp=\"{fill in otp}\")\n\n# Check the current MFA status\n# The is_mfa_active flag should be set to False, if the disable was successful\nprint(User.details()[\"is_mfa_active\"])\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef send_sms_otp(username: str, message_template_name: str) -&gt; str:\n\"\"\"Send OTP via SMS to the user's registered phone number\n\n    This method does not require a login, and you should only use it to reset your password,\n    disable MFA, or generate a new token using SMS OTP.\n\n    Calling this method will only send an OTP to your registered phone number via SMS. Following this method\n    call, you should explicitly call `reset_password`, `disable_mfa`, or `Client.get_token` to complete\n    the operation with the SMS OTP.\n\n    Please remember to pass a valid message_template_name along with the request. At present, the API\n    supports **\"reset_password\"**, **\"disable_mfa\"** and **\"get_token\"** as valid message templates.\n\n    Args:\n        username: Account username to send the OTP\n        message_template_name: The message template to use while sending the OTP via SMS. At present,\n            the API supports **\"reset_password\"**, **\"disable_mfa\"** and **\"get_token\"** as valid message templates\n\n    Returns:\n        The SMS status message\n\n    Here's an example of a Non-MFA user resetting their password using the SMS OTP. The example assumes that you have\n    already registered and validated your phone number on our servers.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Request OTP via SMS to the registered phone number\n        # Please do not change the message_template_name\n        username=\"{fill in username}\"\n        User.send_sms_otp(username=username, message_template_name=\"reset_password\")\n\n        # The above method will send the OTP via SMS to the registered phone number,\n        # which you must fill below along with your new password\n        new_password = \"{fill in new_password}\"\n        otp = \"{fill in otp}\" # OTP received via SMS\n\n        # Reset the password\n        User.reset_password(username=username, new_password=new_password, otp=otp)\n\n        # Authenticate using the new credentials\n        # MFA users must pass the otp generated by the authenticator app below\n        Client.get_token(username=username, password=new_password)\n\n        # Check if get_token is successful\n        print(User.details())\n        ```\n\n    Here's an example of how to disable MFA with SMS OTP, assuming you've already registered\n    and validated your phone number on our servers but don't have a valid token.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Optional Step: Request OTP via SMS to authenticate\n        # If you've already logged in, you can skip the two optional steps\n        # If you've already have a valid token, skip the below optional step\n        # and call Client.set_token instead of Client.get_token\n        username=\"{fill in username}\"\n        User.send_sms_otp(\n            username=username,\n            message_template_name=\"get_token\" # Don't change the message_template_name\n        )\n\n        # Optional Step: Authenticate using SMS OTP\n        # The send_sms_otp method will send the OTP via SMS to the registered\n        # phone number, which you must fill below\n        password=\"{fill in password}\"\n        otp=\"{fill in otp}\"\n        Client.get_token(username=username, password=password, otp=otp)\n\n        # Check the current MFA status\n        print(User.details()[\"is_mfa_active\"])\n\n        # Request OTP via SMS to disable MFA\n        User.send_sms_otp(\n            username=username,\n            message_template_name=\"disable_mfa\" # Don't change the message_template_name\n        )\n\n        # The send_sms_otp method will send the OTP via SMS to the registered\n        # phone number, which you must fill below\n        User.disable_mfa(otp=\"{fill in otp}\")\n\n        # Check the current MFA status\n        # The is_mfa_active flag should be set to False, if the disable was successful\n        print(User.details()[\"is_mfa_active\"])\n        ```\n    \"\"\"\n    url = f\"/user/send_sms_otp?username={username}&amp;message_template_name={message_template_name}\"\n\n    return Client._get_data(relative_url=url)\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.User.update","title":"<code>update(user=None, username=None, first_name=None, last_name=None, email=None, otp=None)</code>  <code>staticmethod</code>","text":"<p>Update existing user details in the server.</p> <p>Please do not pass the optional user parameter unless you are a super user. Only a  super user can update details for other users.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>Optional[str]</code> <p>Account user_uuid/username to update. If not passed, then the default value None will be used to update the currently logged-in user details.</p> <code>None</code> <code>username</code> <code>Optional[str]</code> <p>New username for the user.</p> <code>None</code> <code>first_name</code> <code>Optional[str]</code> <p>New first name for the user.</p> <code>None</code> <code>last_name</code> <code>Optional[str]</code> <p>New last name for the user.</p> <code>None</code> <code>email</code> <code>Optional[str]</code> <p>New email for the user.</p> <code>None</code> <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if you have activated the MFA for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas DataFrame encapsulating the updated user details.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the user_uuid/username is invalid or the user have insufficient permission to access other user's data</p> <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example of updating the email address of the logged-in user</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import User, Client\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Display the registered email address of the logged-in user\nprint(User.details()[\"email\"])\n\n# Update the logged-in user's email address\n# If you are a super user, you can update the details of other users by\n# passing their uuid/username in the user parameter\nemail = \"{fill in new_email}\"\nUser.update(email=email)\n\n# Check whether the email address has been updated for the logged-in user\nprint(User.details()[\"email\"])\n\n# If you try to use an already used email address, an exception will be raised.\ntry:\n    User.update(email=email)\n    print(\"Should not print this, the above line should raise an exception\")\n    raise RuntimeException()\n\nexcept ValueError as e:\n    print(\"Expected to fail, everything is fine\")\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef update(\n    user: Optional[str] = None,\n    username: Optional[str] = None,\n    first_name: Optional[str] = None,\n    last_name: Optional[str] = None,\n    email: Optional[str] = None,\n    otp: Optional[str] = None,\n) -&gt; pd.DataFrame:\n\"\"\"Update existing user details in the server.\n\n     Please do not pass the optional user parameter unless you are a super user. Only a\n     super user can update details for other users.\n\n    Args:\n        user: Account user_uuid/username to update. If not passed, then the default\n            value **None** will be used to update the currently logged-in user details.\n        username: New username for the user.\n        first_name: New first name for the user.\n        last_name: New last name for the user.\n        email: New email for the user.\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if you have activated the MFA for your account.\n\n    Returns:\n        A pandas DataFrame encapsulating the updated user details.\n\n    Raises:\n        ValueError: If the user_uuid/username is invalid or the user have insufficient permission to access other user's data\n        ValueError: If the OTP is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example of updating the email address of the logged-in user\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import User, Client\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Display the registered email address of the logged-in user\n        print(User.details()[\"email\"])\n\n        # Update the logged-in user's email address\n        # If you are a super user, you can update the details of other users by\n        # passing their uuid/username in the user parameter\n        email = \"{fill in new_email}\"\n        User.update(email=email)\n\n        # Check whether the email address has been updated for the logged-in user\n        print(User.details()[\"email\"])\n\n        # If you try to use an already used email address, an exception will be raised.\n        try:\n            User.update(email=email)\n            print(\"Should not print this, the above line should raise an exception\")\n            raise RuntimeException()\n\n        except ValueError as e:\n            print(\"Expected to fail, everything is fine\")\n        ```\n    \"\"\"\n    user_uuid = User.details(user=user)[\"uuid\"]\n    req_json = dict(\n        username=username,\n        first_name=first_name,\n        last_name=last_name,\n        email=email,\n        otp=otp,\n    )\n\n    response = Client._post_data(\n        relative_url=f\"/user/{user_uuid}/update\", json=req_json\n    )\n\n    return pd.DataFrame(response, index=[0])[User.USER_COLS]\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.User.validate_phone_number","title":"<code>validate_phone_number(otp=None)</code>  <code>staticmethod</code>","text":"<p>Validate a registered phone number</p> <p>Please call the <code>register_phone_number</code> method to get the OTP via SMS and then call this method with the OTP to complete the registration and validation process.</p> <p>Parameters:</p> Name Type Description Default <code>otp</code> <code>Optional[str]</code> <p>The OTP you have received on your registered phone number.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Union[str, bool]]</code> <p>A dict containing the updated user details</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>Here's an example of registering and validating a new phone number for the currently logged-in user</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, User\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Display the phone number that is currently registered\n# If no phone number has been registered, None will be displayed\nprint(User.details()[\"phone_number\"])\n\n# Register a new phone number.\n# If you only want to validate an existing phone number, call the\n# method below without the phone_number parameter\nUser.register_phone_number(phone_number=\"{fill in phone_number}\")\n\n# The above method will send the OTP via SMS to the specified phone number,\n# which you must enter below to complete the registration process\nUser.validate_phone_number(otp=\"{fill in otp}\")\n\n# Check whether the phone number has been updated and verified\n# The is_phone_number_verified flag should be set to True, if the\n# registration is successful\nuser_details = User.details()\nprint(user_details[\"phone_number\"])\nprint(user_details[\"is_phone_number_verified\"])\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef validate_phone_number(\n    otp: Optional[str] = None,\n) -&gt; Dict[str, Union[str, bool]]:\n\"\"\"Validate a registered phone number\n\n    Please call the `register_phone_number` method to get the OTP via SMS and then call this method\n    with the OTP to complete the registration and validation process.\n\n    Args:\n        otp: The OTP you have received on your registered phone number.\n\n    Returns:\n        A dict containing the updated user details\n\n    Raises:\n        ValueError: If the OTP is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    Here's an example of registering and validating a new phone number for the currently logged-in user\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, User\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Display the phone number that is currently registered\n        # If no phone number has been registered, None will be displayed\n        print(User.details()[\"phone_number\"])\n\n        # Register a new phone number.\n        # If you only want to validate an existing phone number, call the\n        # method below without the phone_number parameter\n        User.register_phone_number(phone_number=\"{fill in phone_number}\")\n\n        # The above method will send the OTP via SMS to the specified phone number,\n        # which you must enter below to complete the registration process\n        User.validate_phone_number(otp=\"{fill in otp}\")\n\n        # Check whether the phone number has been updated and verified\n        # The is_phone_number_verified flag should be set to True, if the\n        # registration is successful\n        user_details = User.details()\n        print(user_details[\"phone_number\"])\n        print(user_details[\"is_phone_number_verified\"])\n        ```\n    \"\"\"\n    url = \"/user/validate_phone_number\"\n\n    return Client._get_data(relative_url=check_and_append_otp_query_param(url, otp))\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.cls","title":"<code> cls        </code>","text":"<p>A class for managing the APIKeys in the server.</p> <p>Both the APIKey and the token can be used for accessing the captn services. However, there is a slight difference in generating and managing the two.</p> <p>For generating the APIKey, you first need to get the developer token. Please refer to <code>Client.get_token</code> method documentation to generate one.</p> <p>After logging in with your developer token, you can create any number of new APIKeys and can set an expiration date individually. You can also access other methods available in the APIKey class to list, revoke the APIKey at any time.</p> <p>Here's an example of how to use the APIKey class to create a new key and use it to access the captn service.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, APIKey, User\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a new key with the given name\nkey_name = \"{fill in key_name}\"\nnew_key = APIKey.create(name=key_name)\n\n# Display the details of the newly created key\nprint(APIKey.details(apikey=key_name))\n\n# Call the set_token method to set the newly generated key\nClient.set_token(token=new_key[\"access_token\"])\n\n# Print the logged-in user details\n# If set_token fails, the line below will throw an error.\nprint(User.details())\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.cls.__init__","title":"<code>__init__(self, uuid, name=None, expiry=None, disabled=None, created=None)</code>  <code>special</code>","text":"<p>Constructs a new APIKey instance.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>str</code> <p>APIKey uuid.</p> required <code>name</code> <code>Optional[str]</code> <p>APIKey name.</p> <code>None</code> <code>expiry</code> <code>Optional[str]</code> <p>APIKey expiry date.</p> <code>None</code> <code>disabled</code> <code>Optional[bool]</code> <p>Flag to indicate the status of the APIKey.</p> <code>None</code> <code>created</code> <code>Optional[str]</code> <p>APIKey creation date.</p> <code>None</code> Source code in <code>captn/client.py</code> <pre><code>def __init__(\n    self,\n    uuid: str,\n    name: Optional[str] = None,\n    expiry: Optional[str] = None,\n    disabled: Optional[bool] = None,\n    created: Optional[str] = None,\n):\n\"\"\"Constructs a new APIKey instance.\n\n    Args:\n        uuid: APIKey uuid.\n        name: APIKey name.\n        expiry: APIKey expiry date.\n        disabled: Flag to indicate the status of the APIKey.\n        created: APIKey creation date.\n    \"\"\"\n    self.uuid = uuid\n    self.name = name\n    self.expiry = expiry\n    self.disabled = disabled\n    self.created = created\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.cls.as_df","title":"<code>as_df(ax)</code>  <code>staticmethod</code>","text":"<p>Return the details of APIKey instances in a pandas dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>ax</code> <code>List[APIKey]</code> <p>List of APIKey instances.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>Details of all the APIKeys in a dataframe.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>An example of displaying the APIKeys generated by the currently logged-in user in a dataframe</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, APIKey\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a key without an expiry date in the given name\nkey_name = \"{fill in key_name}\"\nAPIKey.create(name=key_name)\n\n# Display all the APIKey instance details in a pandas dataframe\ndf = APIKey.as_df(APIKey.ls())\nprint(df)\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef as_df(ax: List[\"APIKey\"]) -&gt; pd.DataFrame:\n\"\"\"Return the details of APIKey instances in a pandas dataframe.\n\n    Args:\n        ax: List of APIKey instances.\n\n    Returns:\n        Details of all the APIKeys in a dataframe.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n\n    An example of displaying the APIKeys generated by the currently logged-in user in a dataframe\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a key without an expiry date in the given name\n        key_name = \"{fill in key_name}\"\n        APIKey.create(name=key_name)\n\n        # Display all the APIKey instance details in a pandas dataframe\n        df = APIKey.as_df(APIKey.ls())\n        print(df)\n        ```\n    \"\"\"\n    lists = get_attributes_from_instances(ax, APIKey.API_KEY_COLS)  # type: ignore\n    return generate_df(lists, APIKey.API_KEY_COLS)\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.cls.create","title":"<code>create(name, expiry=None, otp=None)</code>  <code>staticmethod</code>","text":"<p>Create a new APIKey</p> <p>In order to access the captn service with the newly generated APIKey, please call the <code>Client.set_token</code> method or set the APIKey value in the CAPTN_SERVICE_TOKEN environment variable.</p> <p>Note</p> <ul> <li> <p>The APIKey's name must be unique. If not, an exception will be raised while creating a new key with the name of an existing key. However, you can create a new key with the name of a revoked key.</p> </li> <li> <p>The expiry for an APIKey is optional, if not passed then the default value None will be used to create an APIKey with no expiry date!</p> </li> </ul> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the APIKey.</p> required <code>expiry</code> <code>Union[int, datetime.timedelta, datetime.datetime]</code> <p>The validity for the APIKey. This can be an integer representing the number of days till expiry, can be an instance of timedelta (timedelta(days=x)) or can be an instance of datetime. If not passed, then the default value None will be used to create a APIKey that will never expire!</p> <code>None</code> <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if the MFA is enabled for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, str]</code> <p>The APIKey and its type as a dictionary.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the user is not authenticated.</p> <code>ValueError</code> <p>If the user tries to create a new APIKey with an existing key name.</p> <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>In the following example, a new APIKey is created with a 10-day expiration date and used to access the captn service.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, APIKey\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a key with the given name and set the expiry to 10 days from now.\n# If the expiry parameter is not specified, a key with no expiry date is created.\nkey_name = \"{fill in key_name}\"\nnew_key_details = APIKey.create(name=key_name, expiry=10)\n\n# Display the details of the newly created key\nprint(APIKey.details(apikey=key_name))\n\n# If a new key with the same name is created, an exception will be raised.\n# However, you can create a new key with the name of a revoked key.\ntry:\n    APIKey.create(name=key_name, expiry=10)\n    print(\"Should not print this, the above line should raise an exception\")\n    raise RuntimeException()\n\nexcept ValueError as e:\n    print(\"Expected to fail, everything is fine\")\n\n# Finally, either call the below method to set the newly generated key\n# or store it in the CAPTN_SERVICE_TOKEN environment variable.\nClient.set_token(token=new_key_details[\"access_token\"])\n\n# If set_token fails, the line below will throw an error.\nprint(APIKey.details(apikey=key_name))\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef create(\n    name: str,\n    expiry: Optional[Union[int, timedelta, datetime]] = None,\n    otp: Optional[str] = None,\n) -&gt; Dict[str, str]:\n\"\"\"Create a new APIKey\n\n    In order to access the airt service with the newly generated APIKey, please call the `Client.set_token` method\n    or set the APIKey value in the **AIRT_SERVICE_TOKEN** environment variable.\n\n    !!! note\n\n        - The APIKey's name must be unique. If not, an exception will be raised while creating a new key with the name of an existing key.\n        However, you can create a new key with the name of a revoked key.\n\n        - The expiry for an APIKey is optional, if not passed then the default value **None** will be used to create an APIKey with no expiry date!\n\n    Args:\n        name: The name of the APIKey.\n        expiry: The validity for the APIKey. This can be an integer representing the number of days till expiry, can be\n            an instance of timedelta (timedelta(days=x)) or can be an instance of datetime. If not passed, then the default value\n            **None** will be used to create a APIKey that will never expire!\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if the MFA is enabled for your account.\n\n    Returns:\n        The APIKey and its type as a dictionary.\n\n    Raises:\n        ValueError: If the user is not authenticated.\n        ValueError: If the user tries to create a new APIKey with an existing key name.\n        ValueError: If the OTP is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    In the following example, a new APIKey is created with a 10-day expiration date and used to access the airt service.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a key with the given name and set the expiry to 10 days from now.\n        # If the expiry parameter is not specified, a key with no expiry date is created.\n        key_name = \"{fill in key_name}\"\n        new_key_details = APIKey.create(name=key_name, expiry=10)\n\n        # Display the details of the newly created key\n        print(APIKey.details(apikey=key_name))\n\n        # If a new key with the same name is created, an exception will be raised.\n        # However, you can create a new key with the name of a revoked key.\n        try:\n            APIKey.create(name=key_name, expiry=10)\n            print(\"Should not print this, the above line should raise an exception\")\n            raise RuntimeException()\n\n        except ValueError as e:\n            print(\"Expected to fail, everything is fine\")\n\n        # Finally, either call the below method to set the newly generated key\n        # or store it in the AIRT_SERVICE_TOKEN environment variable.\n        Client.set_token(token=new_key_details[\"access_token\"])\n\n        # If set_token fails, the line below will throw an error.\n        print(APIKey.details(apikey=key_name))\n        ```\n    \"\"\"\n    if expiry is None:\n        expiry_date = expiry\n    else:\n        if isinstance(expiry, int):\n            delta = datetime.now() + timedelta(days=expiry)\n        elif isinstance(expiry, timedelta):\n            delta = datetime.now() + expiry\n        else:\n            delta = expiry\n\n        expiry_date = delta.strftime(\"%Y-%m-%dT%H:%M\")\n\n    return Client._post_data(\n        relative_url=\"/apikey\",\n        json=dict(name=name, expiry=expiry_date, otp=otp),\n    )\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.cls.details","title":"<code>details(apikey)</code>  <code>staticmethod</code>","text":"<p>Return details of an APIKey.</p> <p>Parameters:</p> Name Type Description Default <code>apikey</code> <code>str</code> <p>APIKey uuid/name.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas Dataframe encapsulating the details of the APIKey.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the APIKey uuid is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>An example to get details of an APIKey</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, APIKey\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a key without an expiry date in the given name\nkey_name = \"{fill in key_name}\"\nAPIKey.create(name=key_name)\n\n# Display the details of the newly created key\nprint(APIKey.details(apikey=key_name))\n\n# To display the details of all keys created by the user, use the method below.\ndf = APIKey.as_df(APIKey.ls())\nprint(df)\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef details(apikey: str) -&gt; pd.DataFrame:\n\"\"\"Return details of an APIKey.\n\n    Args:\n        apikey: APIKey uuid/name.\n\n    Returns:\n        A pandas Dataframe encapsulating the details of the APIKey.\n\n    Raises:\n        ValueError: If the APIKey uuid is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    An example to get details of an APIKey\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a key without an expiry date in the given name\n        key_name = \"{fill in key_name}\"\n        APIKey.create(name=key_name)\n\n        # Display the details of the newly created key\n        print(APIKey.details(apikey=key_name))\n\n        # To display the details of all keys created by the user, use the method below.\n        df = APIKey.as_df(APIKey.ls())\n        print(df)\n        ```\n    \"\"\"\n    details = Client._get_data(relative_url=f\"/apikey/{apikey}\")\n\n    return pd.DataFrame(details, index=[0])[APIKey.API_KEY_COLS]\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.cls.ls","title":"<code>ls(user=None, offset=0, limit=100, include_disabled=False)</code>  <code>staticmethod</code>","text":"<p>Return the list of APIKeys instances.</p> <p>Please do not pass the user parameter unless you are a super user. Only a super user can view the APIKeys created by other users.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>Optional[str]</code> <p>user_uuid/username associated with the APIKey. Please call <code>User.details</code> method of the User class to get your user_uuid. If not passed, then the currently logged-in user_uuid will be used.</p> <code>None</code> <code>offset</code> <code>int</code> <p>The number of APIKeys to offset at the beginning. If None, then the default value 0 will be used.</p> <code>0</code> <code>limit</code> <code>int</code> <p>The maximum number of APIKeys to return from the server. If None, then the default value 100 will be used.</p> <code>100</code> <code>include_disabled</code> <code>bool</code> <p>If set to True, then the disabled APIKeys will also be included in the result.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[APIKey]</code> <p>A list of APIKey instances.</p> <p>Exceptions:</p> Type Description <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <code>ValueError</code> <p>If the user_uuid is invalid.</p> <p>An example of displaying the APIKeys generated by the currently logged-in user</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, APIKey\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a key without an expiry date in the given name\nkey_name = \"{fill in key_name}\"\nAPIKey.create(name=key_name)\n\n# Get the list of all APIKey instances created by the currently logged-in user.\n# If you are a super user, you can view the APIkeys created by other users by\n# passing their uuid/username in the user parameter.\nax = APIKey.ls()\nprint(ax)\n\n# Display the details of the instances in a pandas dataframe\ndf = APIKey.as_df(ax)\nprint(df)\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef ls(\n    user: Optional[str] = None,\n    offset: int = 0,\n    limit: int = 100,\n    include_disabled: bool = False,\n) -&gt; List[\"APIKey\"]:\n\"\"\"Return the list of APIKeys instances.\n\n    Please do not pass the **user** parameter unless you are a super user. Only a super user can view\n    the APIKeys created by other users.\n\n    Args:\n        user: user_uuid/username associated with the APIKey. Please call `User.details` method of the User class to get your user_uuid.\n            If not passed, then the currently logged-in user_uuid will be used.\n        offset: The number of APIKeys to offset at the beginning. If None, then the default value 0 will be used.\n        limit: The maximum number of APIKeys to return from the server. If None, then the default value 100 will be used.\n        include_disabled: If set to **True**, then the disabled APIKeys will also be included in the result.\n\n    Returns:\n        A list of APIKey instances.\n\n    Raises:\n        ConnectionError: If the server address is invalid or not reachable.\n        ValueError: If the user_uuid is invalid.\n\n    An example of displaying the APIKeys generated by the currently logged-in user\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a key without an expiry date in the given name\n        key_name = \"{fill in key_name}\"\n        APIKey.create(name=key_name)\n\n        # Get the list of all APIKey instances created by the currently logged-in user.\n        # If you are a super user, you can view the APIkeys created by other users by\n        # passing their uuid/username in the user parameter.\n        ax = APIKey.ls()\n        print(ax)\n\n        # Display the details of the instances in a pandas dataframe\n        df = APIKey.as_df(ax)\n        print(df)\n        ```\n    \"\"\"\n    user_uuid = User.details(user=user)[\"uuid\"]\n\n    apikeys = Client._get_data(\n        relative_url=f\"/{user_uuid}/apikey?include_disabled={include_disabled}&amp;offset={offset}&amp;limit={limit}\"\n    )\n\n    ax = [\n        APIKey(\n            uuid=apikey[\"uuid\"],\n            name=apikey[\"name\"],\n            expiry=apikey[\"expiry\"],\n            disabled=apikey[\"disabled\"],\n            created=apikey[\"created\"],\n        )\n        for apikey in apikeys\n    ]\n\n    return ax\n</code></pre>"},{"location":"captn_api_docs/captn/client/#captn.client.cls.revoke","title":"<code>revoke(keys, user=None, otp=None)</code>  <code>staticmethod</code>","text":"<p>Revoke one or more APIKeys</p> <p>Please do not pass the user parameter unless you are a super user. Only a super user can revoke the APIKeys created by other users.</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>Union[str, List[str], List[APIKey]]</code> <p>APIKey uuid/name to revoke. To revoke multiple keys, either pass a list of APIKey uuid/names or a list of APIKey instances.</p> required <code>user</code> <code>Optional[str]</code> <p>user_uuid/username associated with the APIKey. Please call <code>User.details</code> method of the User class to get your user_uuid/username. If not passed, then the currently logged-in user will be used.</p> <code>None</code> <code>otp</code> <code>Optional[str]</code> <p>Dynamically generated six-digit verification code from the authenticator app. Please pass this parameter only if the MFA is enabled for your account.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A pandas Dataframe encapsulating the details of the deleted APIKey(s).</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the APIKey uuid is invalid.</p> <code>ValueError</code> <p>If the user_uuid is invalid.</p> <code>ValueError</code> <p>If the OTP is invalid.</p> <code>ConnectionError</code> <p>If the server address is invalid or not reachable.</p> <p>An example to revoke a single APIKey by name</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, APIKey\n\n# Authenticate\nClient.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n# Create a key without an expiry date in the given name\nkey_name = \"{fill in key_name}\"\nAPIKey.create(name=key_name)\n\n# Check that the newly created key exists\nprint([key.name for key in APIKey.ls()])\n\n# Revoke the newly created key\n# To delete multiple keys, pass a list of key names or key instances\nAPIKey.revoke(keys=key_name)\n\n# Check that the newly created key does not exists\nprint([key.name for key in APIKey.ls()])\n</code></pre> <p>Here's an example of a super user revoking all APIkeys generated by a specific user.</p> <p>Examples:</p> <pre><code># Importing necessary libraries\nfrom  captn.client import Client, APIKey\n\n# Authenticate with super user privileges\nClient.get_token(\n    username=\"{fill in super_user_username}\",\n    password=\"{fill in super_user_password}\"\n)\n\n# List the APIKeys generated by a specific user\nuser = \"{fill in other_username}\"\nax = APIKey.ls(user=user)\nprint([key.name for key in ax])\n\n# Revoke the APIKeys\nAPIKey.revoke(keys=ax, user=user)\n\n# Check that all APIkeys have been revoked\nprint([key.name for key in APIKey.ls(user=user)])\n</code></pre> Source code in <code>captn/client.py</code> <pre><code>@staticmethod\ndef revoke(\n    keys: Union[str, List[str], List[\"APIKey\"]],\n    user: Optional[str] = None,\n    otp: Optional[str] = None,\n) -&gt; pd.DataFrame:\n\"\"\"Revoke one or more APIKeys\n\n    Please do not pass the **user** parameter unless you are a super user. Only a super user can revoke the\n    APIKeys created by other users.\n\n    Args:\n        keys: APIKey uuid/name to revoke. To revoke multiple keys, either pass a list of APIKey uuid/names or a list of APIKey instances.\n        user: user_uuid/username associated with the APIKey. Please call `User.details` method of the User class to get your user_uuid/username.\n            If not passed, then the currently logged-in user will be used.\n        otp: Dynamically generated six-digit verification code from the authenticator app. Please pass this\n            parameter only if the MFA is enabled for your account.\n\n    Returns:\n         A pandas Dataframe encapsulating the details of the deleted APIKey(s).\n\n    Raises:\n        ValueError: If the APIKey uuid is invalid.\n        ValueError: If the user_uuid is invalid.\n        ValueError: If the OTP is invalid.\n        ConnectionError: If the server address is invalid or not reachable.\n\n    An example to revoke a single APIKey by name\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate\n        Client.get_token(username=\"{fill in username}\", password=\"{fill in password}\")\n\n        # Create a key without an expiry date in the given name\n        key_name = \"{fill in key_name}\"\n        APIKey.create(name=key_name)\n\n        # Check that the newly created key exists\n        print([key.name for key in APIKey.ls()])\n\n        # Revoke the newly created key\n        # To delete multiple keys, pass a list of key names or key instances\n        APIKey.revoke(keys=key_name)\n\n        # Check that the newly created key does not exists\n        print([key.name for key in APIKey.ls()])\n        ```\n\n    Here's an example of a super user revoking all APIkeys generated by a specific user.\n\n    Example:\n        ```python\n        # Importing necessary libraries\n        from  airt.client import Client, APIKey\n\n        # Authenticate with super user privileges\n        Client.get_token(\n            username=\"{fill in super_user_username}\",\n            password=\"{fill in super_user_password}\"\n        )\n\n        # List the APIKeys generated by a specific user\n        user = \"{fill in other_username}\"\n        ax = APIKey.ls(user=user)\n        print([key.name for key in ax])\n\n        # Revoke the APIKeys\n        APIKey.revoke(keys=ax, user=user)\n\n        # Check that all APIkeys have been revoked\n        print([key.name for key in APIKey.ls(user=user)])\n        ```\n    \"\"\"\n    user_uuid = User.details(user=user)[\"uuid\"]\n    _keys = APIKey._get_key_names(keys)\n\n    response_list = []\n\n    for key_uuid in _keys:\n        url = f\"/{user_uuid}/apikey/{key_uuid}\"\n        response = Client._delete_data(\n            relative_url=check_and_append_otp_query_param(url, otp)\n        )\n        response_list.append(response)\n\n    return generate_df(response_list, APIKey.API_KEY_COLS)\n</code></pre>"},{"location":"captn_cli_docs/captn/","title":"<code>captn</code>","text":"<p>CLI for interfacing with Capt\u2019n.</p> <p>Usage:</p> <pre><code>$ captn [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>api-key</code>: A set of commands for managing the ApiKeys...</li> <li><code>db</code>: A set of commands for importing and...</li> <li><code>ds</code>: A set of commands for managing datasources...</li> <li><code>token</code>: Get application token for captn service...</li> <li><code>user</code>: A set of commands for managing users and...</li> <li><code>version</code>: Return the server and client versions.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-api-key","title":"<code>captn api-key</code>","text":"<p>A set of commands for managing the ApiKeys in the server.</p> <p>Both the ApiKey and the token can be used for accessing the captn services. However, there is a  slight difference in generating and managing the two.</p> <p>For generating the ApiKey, you first need to get the developer token. Please refer to captn token command documentation to generate one.</p> <p>After logging in with your developer token, you can create any number of new ApiKeys and can set an  expiration date individually. You can also access other commands available as part of captn api-key sub-command to  list, revoke the ApiKeys at any time.</p> <p>Once the new API key is generated, please set it in the CAPTN_SERVICE_TOKEN environment variable to start accessing the captn services with it.</p> <p>Usage:</p> <pre><code>$ captn api-key [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>create</code>: Create a new ApiKey</li> <li><code>details</code>: Get the details of an ApiKey.</li> <li><code>ls</code>: Get the list of ApiKeys.</li> <li><code>revoke</code>: Revoke one or more ApiKeys</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-api-key-create","title":"<code>captn api-key create</code>","text":"<p>Create a new ApiKey</p> <p>Note</p> <ul> <li> <p>The name of the ApiKey must be unique. If not, an exception will be raised while creating a new key with an existing key's name.</p> </li> <li> <p>The expiry for an ApiKey is optional. If not passed, then the default value None will be used to create an ApiKey with no expiry date!</p> </li> </ul> <p>Usage:</p> <pre><code>$ captn api-key create [OPTIONS] NAME\n</code></pre> <p>Arguments:</p> <ul> <li><code>NAME</code>: The name of the ApiKey.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-e, --expiry INTEGER</code>: The validity of the API key in number of days. If not passed, then the default value None will be used to create an ApiKey with no expiry date!</li> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app. Please pass this optional argument only if the MFA is enabled for your account.</li> <li><code>-q, --quiet</code>: Output access token only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-api-key-details","title":"<code>captn api-key details</code>","text":"<p>Get the details of an ApiKey.</p> <p>Usage:</p> <pre><code>$ captn api-key details [OPTIONS] APIKEY\n</code></pre> <p>Arguments:</p> <ul> <li><code>APIKEY</code>: ApiKey uuid/name.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-api-key-ls","title":"<code>captn api-key ls</code>","text":"<p>Get the list of ApiKeys.</p> <p>Usage:</p> <pre><code>$ captn api-key ls [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-u, --user TEXT</code>: user_uuid/username associated with the ApiKey. To get the user account uuid/username, use the <code>captn user details</code> command. If the user_uuid/username is not passed, then the currently logged-in user_uuid/username will be used.</li> <li><code>-o, --offset INTEGER</code>: The number of ApiKeys to offset at the beginning. If None, then the default value 0 will be used.  [default: 0]</li> <li><code>-l, --limit INTEGER</code>: The maximum number of ApiKeys to return from the server. If None, then the default value 100 will be used.  [default: 100]</li> <li><code>--disabled</code>: If set to True, then the disabled ApiKeys will also be included in the result.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output only ApiKey uuids.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-api-key-revoke","title":"<code>captn api-key revoke</code>","text":"<p>Revoke one or more ApiKeys</p> <p>Usage:</p> <pre><code>$ captn api-key revoke [OPTIONS] KEYS...\n</code></pre> <p>Arguments:</p> <ul> <li><code>KEYS...</code>: ApiKey uuid/name to revoke. To revoke multiple keys, please pass the uuids/names separated by space.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--user TEXT</code>: user_uuid/username associated with the ApiKey. To get the user account uuid/username, use the <code>captn user details</code> command. If the user_uuid/username is not passed, then the currently logged-in user_uuid/username will be used.</li> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app. Please pass this optional argument only if the MFA is enabled for your account.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output only the revoked ApiKey uuid(s).</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-db","title":"<code>captn db</code>","text":"<p>A set of commands for importing and processing data from sources such as CSV/parquet files, databases, AWS S3 buckets, and Azure Blob Storage.</p> <p>Usage:</p> <pre><code>$ captn db [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>details</code>: Return details of a datablob.</li> <li><code>from-azure-blob-storage</code>: Create and return a datablob that...</li> <li><code>from-clickhouse</code>: Create and return a datablob that...</li> <li><code>from-local</code>: Create and return a datablob from local...</li> <li><code>from-mysql</code>: Create and return a datablob that...</li> <li><code>from-s3</code>: Create and return a datablob that...</li> <li><code>ls</code>: Return the list of datablobs.</li> <li><code>rm</code>: Delete a datablob from the server.</li> <li><code>tag</code>: Tag an existing datablob in the server.</li> <li><code>to-datasource</code>: Process the datablob and return a...</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-db-details","title":"<code>captn db details</code>","text":"<p>Return details of a datablob.</p> <p>Usage:</p> <pre><code>$ captn db details [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Datablob uuid.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-db-from-azure-blob-storage","title":"<code>captn db from-azure-blob-storage</code>","text":"<p>Create and return a datablob that encapsulates the data from an Azure Blob Storage.</p> <p>Usage:</p> <pre><code>$ captn db from-azure-blob-storage [OPTIONS] URI\n</code></pre> <p>Arguments:</p> <ul> <li><code>URI</code>: Azure Blob Storage URI of the source file.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-c, --credential TEXT</code>: Credential to access the Azure Blob Storage.  [required]</li> <li><code>-cp, --cloud-provider TEXT</code>: The destination cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers. If None (default value), then azure  will be used as the cloud storage provider.</li> <li><code>-r, --region TEXT</code>: The destination cloud provider's region to save your datablob. If None (default value) then the default region will be assigned based on the cloud provider. In the case of aws, eu-west-1 will be used and in the case of azure, westeurope will be used. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</li> <li><code>-t, --tag TEXT</code>: A string to tag the datablob. If not passed, then the tag latest will be assigned to the datablob.</li> <li><code>-q, --quiet</code>: Output datablob uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-db-from-clickhouse","title":"<code>captn db from-clickhouse</code>","text":"<p>Create and return a datablob that encapsulates the data from a ClickHouse database.</p> <p>If the database requires authentication, pass the username/password as commandline arguments or store it in the CLICKHOUSE_USERNAME and CLICKHOUSE_PASSWORD environment variables.</p> <p>Usage:</p> <pre><code>$ captn db from-clickhouse [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--host TEXT</code>: Remote database host name.  [required]</li> <li><code>--database TEXT</code>: Database name.  [required]</li> <li><code>--table TEXT</code>: Table name.  [required]</li> <li><code>--protocol TEXT</code>: Protocol to use. The valid values are \"native\" and \"http\".  [required]</li> <li><code>--index-column TEXT</code>: The column to use as index (row labels).  [required]</li> <li><code>--timestamp-column TEXT</code>: Timestamp column name in the tabel.  [required]</li> <li><code>--port INTEGER</code>: Host port number. If not passed, then the default value 0 will be used.  [default: 0]</li> <li><code>-cp, --cloud-provider TEXT</code>: The destination cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers. If None (default value), then aws  will be used as the cloud storage provider.</li> <li><code>-r, --region TEXT</code>: The destination cloud provider's region to save your datablob. If None (default value) then the default region will be assigned based on the cloud provider. In the case of aws, eu-west-1 will be used and in the case of azure, westeurope will be used. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</li> <li><code>-u, --username TEXT</code>: Database username. If not passed, the default value 'root' will be used unless the value is explicitly set in the environment variable CLICKHOUSE_USERNAME.</li> <li><code>-p, --password TEXT</code>: Database password. If not passed, the default value '' will be used unless the value is explicitly set in the environment variable CLICKHOUSE_PASSWORD.</li> <li><code>-f, --filters-json TEXT</code>: Additional parameters to be used when importing data. For example, if you want to filter and extract data only for a specific user_id, pass '{\"user_id\": 1}'.</li> <li><code>-t, --tag TEXT</code>: A string to tag the datablob. If not passed, then the tag latest will be assigned to the datablob.</li> <li><code>-q, --quiet</code>: Output datablob uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-db-from-local","title":"<code>captn db from-local</code>","text":"<p>Create and return a datablob from local csv file.</p> <p>The API currently allows users to create datablobs from CSV or Parquet files. We intend to support additional file formats in future releases.</p> <p>Usage:</p> <pre><code>$ captn db from-local [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-p, --path TEXT</code>: The relative or absolute path to a local CSV/parquet file or to a directory containing the CSV/parquet files.  [required]</li> <li><code>-cp, --cloud-provider TEXT</code>: The destination cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers. If None (default value), then aws  will be used as the cloud storage provider.</li> <li><code>-r, --region TEXT</code>: The destination cloud provider's region to save your datablob. If None (default value) then the default region will be assigned based on the cloud provider. In the case of aws, eu-west-1 will be used and in the case of azure, westeurope will be used. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</li> <li><code>-t, --tag TEXT</code>: A string to tag the datablob. If not passed, then the tag latest will be assigned to the datablob.</li> <li><code>-q, --quiet</code>: Output data id only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-db-from-mysql","title":"<code>captn db from-mysql</code>","text":"<p>Create and return a datablob that encapsulates the data from a mysql database.</p> <p>If the database requires authentication, pass the username/password as commandline arguments or store it in the CAPTN_CLIENT_DB_USERNAME and CAPTN_CLIENT_DB_PASSWORD environment variables.</p> <p>Usage:</p> <pre><code>$ captn db from-mysql [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--host TEXT</code>: Remote database host name.  [required]</li> <li><code>--database TEXT</code>: Database name.  [required]</li> <li><code>--table TEXT</code>: Table name.  [required]</li> <li><code>--port INTEGER</code>: Host port number. If not passed, then the default value 3306 will be used.  [default: 3306]</li> <li><code>-cp, --cloud-provider TEXT</code>: The destination cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers. If None (default value), then aws  will be used as the cloud storage provider.</li> <li><code>-r, --region TEXT</code>: The destination cloud provider's region to save your datablob. If None (default value) then the default region will be assigned based on the cloud provider. In the case of aws, eu-west-1 will be used and in the case of azure, westeurope will be used. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</li> <li><code>-u, --username TEXT</code>: Database username. If not passed, the default value \"root\" will be used unless the value is explicitly set in the environment variable CAPTN_CLIENT_DB_USERNAME.</li> <li><code>-p, --password TEXT</code>: Database password. If not passed, the default value \"\" will be used unless the value is explicitly set in the environment variable CAPTN_CLIENT_DB_PASSWORD.</li> <li><code>-t, --tag TEXT</code>: A string to tag the datablob. If not passed, then the tag latest will be assigned to the datablob.</li> <li><code>-q, --quiet</code>: Output datablob uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-db-from-s3","title":"<code>captn db from-s3</code>","text":"<p>Create and return a datablob that encapsulates the data from an AWS S3 bucket.</p> <p>Usage:</p> <pre><code>$ captn db from-s3 [OPTIONS] URI\n</code></pre> <p>Arguments:</p> <ul> <li><code>URI</code>: The AWS S3 bucket uri.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--access-key TEXT</code>: Access key for the S3 bucket. If None (default value), then the value from AWS_ACCESS_KEY_ID environment variable is used.</li> <li><code>--secret-key TEXT</code>: Secret key for the S3 bucket. If None (default value), then the value from AWS_SECRET_ACCESS_KEY environment variable is used.</li> <li><code>-cp, --cloud-provider TEXT</code>: The destination cloud storage provider's name to store the datablob. Currently, the API only supports aws and azure as cloud storage providers. If None (default value), then aws  will be used as the cloud storage provider.</li> <li><code>-r, --region TEXT</code>: The destination cloud provider's region to save your datablob. If None (default value) then the default region will be assigned based on the cloud provider. In the case of aws, the datablob's source bucket region will be used and in the case of azure, westeurope will be used. The supported AWS regions are: ap-northeast-1, ap-northeast-2, ap-south-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2. The supported Azure Blob Storage regions are: australiacentral, australiacentral2, australiaeast, australiasoutheast, brazilsouth, canadacentral, canadaeast, centralindia, centralus, eastasia, eastus, eastus2, francecentral, francesouth, germanynorth, germanywestcentral, japaneast, japanwest, koreacentral, koreasouth, northcentralus, northeurope, norwayeast, norwaywest, southafricanorth, southafricawest, southcentralus, southeastasia, southindia, switzerlandnorth, switzerlandwest, uaecentral, uaenorth, uksouth, ukwest, westcentralus, westeurope, westindia, westus, westus2.</li> <li><code>-t, --tag TEXT</code>: A string to tag the datablob. If not passed, then the tag latest will be assigned to the datablob.</li> <li><code>-q, --quiet</code>: Output datablob uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-db-ls","title":"<code>captn db ls</code>","text":"<p>Return the list of datablobs.</p> <p>Usage:</p> <pre><code>$ captn db ls [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-o, --offset INTEGER</code>: The number of datablobs to offset at the beginning. If None, then the default value 0 will be used.  [default: 0]</li> <li><code>-l, --limit INTEGER</code>: The maximum number of datablobs to return from the server. If None, then the default value 100 will be used.  [default: 100]</li> <li><code>--disabled</code>: If set to True, then only the deleted datablobs will be returned.Else, the default value False will be used to return only the listof active datablobs.</li> <li><code>--completed</code>: If set to True, then only the datablobs that are successfully downloadedto the server will be returned. Else, the default value False will be used toreturn all the datablobs.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output only datablob uuids separated by space</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-db-rm","title":"<code>captn db rm</code>","text":"<p>Delete a datablob from the server.</p> <p>Usage:</p> <pre><code>$ captn db rm [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Datablob uuid.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output the deleted datablob uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-db-tag","title":"<code>captn db tag</code>","text":"<p>Tag an existing datablob in the server.</p> <p>Usage:</p> <pre><code>$ captn db tag [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-uuid, --datablob_uuid TEXT</code>: Datablob uuid in the server.  [required]</li> <li><code>-n, --name TEXT</code>: A string to tag the datablob.  [required]</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-db-to-datasource","title":"<code>captn db to-datasource</code>","text":"<p>Process the datablob and return a datasource object.</p> <p>Usage:</p> <pre><code>$ captn db to-datasource [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--uuid TEXT</code>: Datablob uuid.  [required]</li> <li><code>--file-type TEXT</code>: The file type of the datablob. Currently, the API only supports \"csv\" and \"parquet\" as file types.  [required]</li> <li><code>--index-column TEXT</code>: The column to use as index (row labels).  [required]</li> <li><code>--sort-by TEXT</code>: The column(s) to sort the data. Can either be a string or a JSON encoded list of strings.  [required]</li> <li><code>--deduplicate-data / --no-deduplicate-data</code>: If set to True (default value False), the datasource will be created with duplicate rows removed.  [default: no-deduplicate-data]</li> <li><code>--blocksize TEXT</code>: The number of bytes used to split larger files. If None, then the default value 256MB will be used.  [default: 256MB]</li> <li><code>--kwargs-json TEXT</code>: Additional JSON encoded dict arguments to use while processing the data.e.g: To skip 100 lines from the bottom of file, pass '{\"skipfooter\": 100}'</li> <li><code>-q, --quiet</code>: Output datasource uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-ds","title":"<code>captn ds</code>","text":"<p>A set of commands for managing datasources and training ML models on them.</p> <p>Usage:</p> <pre><code>$ captn ds [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>details</code>: Return details of a datasource.</li> <li><code>dtypes</code>: Return the dtypes of the datasource.</li> <li><code>head</code>: Return the first few rows of the datasource.</li> <li><code>ls</code>: Return the list of datasources.</li> <li><code>rm</code>: Delete a datasource from the server.</li> <li><code>tag</code>: Tag an existing datasource in server.</li> <li><code>train</code>: Train a model against the datasource.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-ds-details","title":"<code>captn ds details</code>","text":"<p>Return details of a datasource.</p> <p>Usage:</p> <pre><code>$ captn ds details [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Datasource uuid.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-ds-dtypes","title":"<code>captn ds dtypes</code>","text":"<p>Return the dtypes of the datasource.</p> <p>Usage:</p> <pre><code>$ captn ds dtypes [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Datasource uuid.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-ds-head","title":"<code>captn ds head</code>","text":"<p>Return the first few rows of the datasource.</p> <p>Usage:</p> <pre><code>$ captn ds head [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Datasource uuid.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-ds-ls","title":"<code>captn ds ls</code>","text":"<p>Return the list of datasources.</p> <p>Usage:</p> <pre><code>$ captn ds ls [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-o, --offset INTEGER</code>: The number of datasources to offset at the beginning. If None, then the default value 0 will be used.  [default: 0]</li> <li><code>-l, --limit INTEGER</code>: The maximum number of datasources to return from the server. If None, then the default value 100 will be used.  [default: 100]</li> <li><code>--disabled</code>: If set to True, then only the deleted datasources will be returned.Else, the default value False will be used to return only the listof active datasources.</li> <li><code>--completed</code>: If set to True, then only the datasources that are successfully downloadedto the server will be returned. Else, the default value False will be used toreturn all the datasources.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output only datasource uuids separated by space</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-ds-rm","title":"<code>captn ds rm</code>","text":"<p>Delete a datasource from the server.</p> <p>Usage:</p> <pre><code>$ captn ds rm [OPTIONS] UUID\n</code></pre> <p>Arguments:</p> <ul> <li><code>UUID</code>: Datasource uuid.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output the deleted datasource uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-ds-tag","title":"<code>captn ds tag</code>","text":"<p>Tag an existing datasource in server.</p> <p>Usage:</p> <pre><code>$ captn ds tag [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-uuid, --datasource_uuid TEXT</code>: Datasource uuid.  [required]</li> <li><code>-n, --name TEXT</code>: A string to tag the datasource.  [required]</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-ds-train","title":"<code>captn ds train</code>","text":"<p>Train a model against the datasource.</p> <p>Usage:</p> <pre><code>$ captn ds train [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-uuid, --datasource_uuid TEXT</code>: Datasource uuid.  [required]</li> <li><code>--client_column TEXT</code>: The column name that uniquely identifies the users/clients.  [required]</li> <li><code>--timestamp_column TEXT</code>: The timestamp column indicating the time of an event. If not passed, then the default value None will be used. </li> <li><code>--target_column TEXT</code>: Target column name that indicates the type of the event.  [required]</li> <li><code>--target TEXT</code>: Target event name to train and make predictions. You can pass the target event as a string or as a regular expression for predicting more than one event. For example, passing *checkout will train a model to predict any checkout event.  [required]</li> <li><code>--predict_after TEXT</code>: Time delta in hours of the expected target event.  [required]</li> <li><code>-q, --quiet</code>: Output model uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-token","title":"<code>captn token</code>","text":"<p>Get application token for captn service from a username/password pair.</p> <p>To access the captn service, you must first create a developer account. To obtain one, please contact us at info@captn.ai.</p> <p>After successful verification, you will receive an email with the username and password for the developer account.</p> <p>Once you have the credentials, use them to get an access token by running captn token command. It is necessary to get an access token; otherwise, you won't be able to access all of the captn service's APIs. You can either pass the username, password, and server address as command line arguments or store them in the environment variables CAPTN_SERVICE_USERNAME, CAPTN_SERVICE_PASSWORD, and CAPTN_SERVER_URL.</p> <p>If you've already enabled multi-factor authentication (MFA) for your account, you'll need to pass the dynamically generated six-digit verification code along with your username and password to generate new tokens.</p> <p>If the token is requested using Single sign-on (SSO), an authorization URL will be returned. Please copy and paste it into your preferred browser and complete the SSO provider authentication within 10 minutes. Otherwise, the SSO login will time out and you will need to re-request the token.</p> <p>Single sign-on (SSO) can be enabled for your account in three simple steps:</p> <ol> <li> <p>Enable the SSO for a provider by calling the command <code>captn user sso enable</code> with the SSO provider name and an email address. At the moment, we only support \"google\" and \"github\" as SSO providers. We intend to support additional SSO providers in future releases.</p> </li> <li> <p>Before you can start generating new tokens with SSO, you must first authenticate with the SSO provider. Call the <code>captn token</code> command with the same SSO provider you have enabled in the step above to generate an SSO authorization URL. Please copy and paste it into your preferred browser and complete the authentication process with the SSO provider.</p> </li> <li> <p>After successfully authenticating with the SSO provider, an access token will be generated and returned. Please set it in the CAPTN_SERVICE_TOKEN environment variable for accessing the captn service.</p> </li> </ol> <p>Usage:</p> <pre><code>$ captn token [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-u, --username TEXT</code>: Username for the developer account. If None (default value), then the value from CAPTN_SERVICE_USERNAME environment variable is used.</li> <li><code>-p, --password TEXT</code>: Password for the developer account. If None (default value), then the value from CAPTN_SERVICE_PASSWORD environment variable is used.</li> <li><code>-s, --server TEXT</code>: The captn server uri. If None (default value), then the value from CAPTN_SERVER_URL environment variable is used. If the variable is not set as well, then the default public server will be used. Please leave this setting to default unless you are running the service in your own server (please email us to info@captn.ai for that possibility).</li> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app or the OTP you have received via SMS. Please do not pass this parameter if you haven't enabled the multi-factor authentication for your account.</li> <li><code>-sp, --sso_provider TEXT</code>: Name of the Single sign-on (SSO) provider. At the moment, we only support google and github as SSO providers. Please pass this parameter only if you have successfully enabled SSO for the provider.</li> <li><code>-q, --quiet</code>: Output authentication token only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-user","title":"<code>captn user</code>","text":"<p>A set of commands for managing users and their authentication in the server.</p> <p>Usage:</p> <pre><code>$ captn user [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>create</code>: Create a new user in the server.</li> <li><code>details</code>: Get user details</li> <li><code>disable</code>: Disable a user in the server.</li> <li><code>enable</code>: Enable a disabled user in the server.</li> <li><code>ls</code>: Return the list of users available in the...</li> <li><code>mfa</code>: Commands for enabling and disabling...</li> <li><code>register-phone-number</code>: Register and validate a phone number</li> <li><code>reset-password</code>: Reset the account password</li> <li><code>sso</code>: Commands for enabling and disabling Single...</li> <li><code>update</code>: Update existing user details in the server.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-user-create","title":"<code>captn user create</code>","text":"<p>Create a new user in the server.</p> <p>Usage:</p> <pre><code>$ captn user create [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-un, --username TEXT</code>: The new user's username. The username must be unique or an exception will be thrown.  [required]</li> <li><code>-fn, --first_name TEXT</code>: The new user's first name.  [required]</li> <li><code>-ln, --last_name TEXT</code>: The new user's last name.  [required]</li> <li><code>-e, --email TEXT</code>: The new user's email. The email must be unique or an exception will be thrown.  [required]</li> <li><code>-p, --password TEXT</code>: The new user's password.  [required]</li> <li><code>-st, --subscription_type TEXT</code>: User subscription type. Currently, the API supports only the following subscription types small, medium and large.  [required]</li> <li><code>-su, --super_user</code>: If set to True, then the new user will have super user privilages. If None, then the default value False will be used to create a non-super user.</li> <li><code>-ph, --phone_number TEXT</code>: Phone number to be added to the user account. The phone number should follow the pattern of the country code followed by your phone number. For example, 440123456789, +440123456789, 00440123456789, +44 0123456789,and (+44) 012 345 6789 are all valid formats for registering a UK phone number.</li> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app. Please pass this optional argument only if you have activated the MFA for your account.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output user uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-user-details","title":"<code>captn user details</code>","text":"<p>Get user details</p> <p>Please do not pass the optional 'user' option unless you are a super user. Only a super user can view details for other users.</p> <p>Usage:</p> <pre><code>$ captn user details [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-u, --user TEXT</code>: Account user_uuid/username to get details. If not passed, then the currently logged-in details will be returned.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output user uuid only.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-user-disable","title":"<code>captn user disable</code>","text":"<p>Disable a user in the server.</p> <p>Usage:</p> <pre><code>$ captn user disable [OPTIONS] USERS...\n</code></pre> <p>Arguments:</p> <ul> <li><code>USERS...</code>: user_uuid/username to disabled.  To disable multiple users, please pass the uuids/names separated by space.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app. Please pass this optional argument only if you have activated the MFA for your account.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output user uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-user-enable","title":"<code>captn user enable</code>","text":"<p>Enable a disabled user in the server.</p> <p>Usage:</p> <pre><code>$ captn user enable [OPTIONS] USERS...\n</code></pre> <p>Arguments:</p> <ul> <li><code>USERS...</code>: user_uuid/username to enable. To enable multiple users, please pass the uuids/names separated by space.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app. Please pass this optional argument only if you have activated the MFA for your account.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output user uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-user-ls","title":"<code>captn user ls</code>","text":"<p>Return the list of users available in the server.</p> <p>Usage:</p> <pre><code>$ captn user ls [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-o, --offset INTEGER</code>: The number of users to offset at the beginning. If None, then the default value 0 will be used.  [default: 0]</li> <li><code>-l, --limit INTEGER</code>: The maximum number of users to return from the server. If None, then the default value 100 will be used.  [default: 100]</li> <li><code>--disabled</code>: If set to True, then only the deleted users will be returned. Else, the default value False will be used to return only the list of active users.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output only user uuids separated by space</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-user-mfa","title":"<code>captn user mfa</code>","text":"<p>Commands for enabling and disabling Multi-Factor Authentication (MFA).</p> <p>Usage:</p> <pre><code>$ captn user mfa [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>disable</code>: Disable Multi-Factor Authentication (MFA)...</li> <li><code>enable</code>: Enable Multi-Factor Authentication (MFA)...</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-user-mfa-disable","title":"<code>captn user mfa disable</code>","text":"<p>Disable Multi-Factor Authentication (MFA) for the user.</p> <p>The command switches to interactive mode unless the OTP argument is passed. The interactive mode will prompt you to choose an OTP option you want to use. Currently, we only support disabling MFA either using a TOTP or SMS OTP.</p> <p>If you have access to the authenticator application, then you can either enter the dynamically generated six-digit verification code from the authenticator app (TOTP) or request an OTP via SMS to your registered phone number.</p> <p>After selecting an option, please follow the on-screen instructions to disable MFA for your account. In case, you don't have access to the authenticator app and your registered phone number, please contact your administrator.</p> <p>Note: Please do not pass the user argument unless you are a super user. Only a super user can disable MFA for other users.</p> <p>Usage:</p> <pre><code>$ captn user mfa disable [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-u, --user TEXT</code>: Account user_uuid/username to disable MFA. If not passed, then the default value None will be used to disable MFA for the currently logged-in user.</li> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app or the OTP you have received via SMS.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-user-mfa-enable","title":"<code>captn user mfa enable</code>","text":"<p>Enable Multi-Factor Authentication (MFA) for the user.</p> <p>This is an interactive command and will generate a QR code. You can use an authenticator app, such as Google Authenticator to scan the code and enter the valid six-digit verification code from the authenticator app in the interactive prompt to enable and activate MFA for your account.</p> <p>After three invalid attempts, you have to call this command again to generate a new QR code.</p> <p>Usage:</p> <pre><code>$ captn user mfa enable [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app. Please pass this optional argument only if you have activated the MFA for your account.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-user-register-phone-number","title":"<code>captn user register-phone-number</code>","text":"<p>Register and validate a phone number</p> <p>This is an interactive command, one called it will send an OTP via SMS to the phone number. Please enter the OTP you have received in the interactive prompt to complete the phone number registration process.</p> <p>After ten invalid OTP attempts, you have to call this command again to register the phone number.</p> <p>Usage:</p> <pre><code>$ captn user register-phone-number [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-p, --phone-number TEXT</code>: Phone number to register. The phone number should follow the pattern of the  country code followed by your phone number. For example, 440123456789, +440123456789, 00440123456789, +44 0123456789, and (+44) 012 345 6789 are all valid formats for registering a UK phone number. If the phone number is not passed in the arguments, then the OTP will be sent to the phone  number that was already registered to the user's account.</li> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app. Please pass this optional argument only if you have activated the MFA for your account.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-user-reset-password","title":"<code>captn user reset-password</code>","text":"<p>Reset the account password</p> <pre><code>We currently support two types of OTPs to reset the password for your account and you don't have to be logged in to call this command\n</code></pre> <p>The command switches to interactive mode unless all arguments are passed. The interactive mode will prompt you for the missing details and ask you to choose a recovery option to reset your password. Currently, we only support resetting the password either using a TOTP or SMS OTP.</p> <p>If you have already activated the MFA for your account, then you can either enter the dynamically generated six-digit verification code from the authenticator app (TOTP) or request an OTP via SMS to your registered phone number.</p> <p>If the MFA is not activated already, then you can only request the OTP via SMS to your registered phone number.</p> <p>After selecting an option, please follow the on-screen instructions to reset your password. In case, you don't have MFA enabled or don't have access to your registered phone number, please contact your administrator.</p> <p>Usage:</p> <pre><code>$ captn user reset-password [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-u, --username TEXT</code>: Account username to reset the password</li> <li><code>-np, --new-password TEXT</code>: New password to set for the account</li> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-user-sso","title":"<code>captn user sso</code>","text":"<p>Commands for enabling and disabling Single sign-on (SSO).</p> <p>Usage:</p> <pre><code>$ captn user sso [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>disable</code>: Disable Single sign-on (SSO) for the user.</li> <li><code>enable</code>: Enable Single sign-on (SSO) for the user</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-user-sso-disable","title":"<code>captn user sso disable</code>","text":"<p>Disable Single sign-on (SSO) for the user.</p> <p>Please do not pass the user argument unless you are a super user. Only a super user can disable SSO for other users.</p> <p>Usage:</p> <pre><code>$ captn user sso disable [OPTIONS] SSO_PROVIDER\n</code></pre> <p>Arguments:</p> <ul> <li><code>SSO_PROVIDER</code>: Name of the Single sign-on (SSO) identity provider. At present, the API only supports Google and Github as valid SSO identity providers.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-u, --user TEXT</code>: Account user_uuid/username to disable MFA. If not passed, then the default value None will be used to disable SSO for the currently logged-in user.</li> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app. Please pass this optional argument only if you have activated the MFA for your account.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-user-sso-enable","title":"<code>captn user sso enable</code>","text":"<p>Enable Single sign-on (SSO) for the user</p> <p>Usage:</p> <pre><code>$ captn user sso enable [OPTIONS] SSO_PROVIDER\n</code></pre> <p>Arguments:</p> <ul> <li><code>SSO_PROVIDER</code>: Name of the Single sign-on (SSO) identity provider. At present, the API only supports Google\u00a0and\u00a0Github as valid SSO identity providers.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>-e, --email TEXT</code>: Email id going to be used for SSO authentication.  [required]</li> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app. Please pass this optional argument only if you have activated the MFA for your account.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-user-update","title":"<code>captn user update</code>","text":"<p>Update existing user details in the server.</p> <p>Please do not pass the optional user option unless you are a super user. Only a super user can update details for other users.</p> <p>Usage:</p> <pre><code>$ captn user update [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--user TEXT</code>: Account user_uuid/username to update. If not passed, then the default value None will be used to update the currently logged-in user details.</li> <li><code>-un, --username TEXT</code>: New username for the user.</li> <li><code>-fn, --first_name TEXT</code>: New first name for the user.</li> <li><code>-ln, --last_name TEXT</code>: New last name for the user.</li> <li><code>-e, --email TEXT</code>: New email for the user.</li> <li><code>--otp TEXT</code>: Dynamically generated six-digit verification code from the authenticator app. Please pass this optional argument only if you have activated the MFA for your account.</li> <li><code>-f, --format TEXT</code>: Format output and show only the given column(s) values.</li> <li><code>-q, --quiet</code>: Output user uuid only.</li> <li><code>-d, --debug</code>: Set logger level to DEBUG and output everything.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"captn_cli_docs/captn/#captn-version","title":"<code>captn version</code>","text":"<p>Return the server and client versions.</p> <p>Usage:</p> <pre><code>$ captn version [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"}]}